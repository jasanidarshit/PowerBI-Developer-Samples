{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { JoseHeaderError } from '../error/JoseHeaderError.js';\nimport { JsonTypes } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar JoseHeader =\n/** @class */\nfunction () {\n  function JoseHeader(options) {\n    this.typ = options.typ;\n    this.alg = options.alg;\n    this.kid = options.kid;\n  }\n  /**\r\n   * Builds SignedHttpRequest formatted JOSE Header from the\r\n   * JOSE Header options provided or previously set on the object and returns\r\n   * the stringified header object.\r\n   * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n   * @param shrHeaderOptions\r\n   * @returns\r\n   */\n\n\n  JoseHeader.getShrHeaderString = function (shrHeaderOptions) {\n    // KeyID is required on the SHR header\n    if (!shrHeaderOptions.kid) {\n      throw JoseHeaderError.createMissingKidError();\n    } // Alg is required on the SHR header\n\n\n    if (!shrHeaderOptions.alg) {\n      throw JoseHeaderError.createMissingAlgError();\n    }\n\n    var shrHeader = new JoseHeader({\n      // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n      typ: shrHeaderOptions.typ || JsonTypes.Pop,\n      kid: shrHeaderOptions.kid,\n      alg: shrHeaderOptions.alg\n    });\n    return JSON.stringify(shrHeader);\n  };\n\n  return JoseHeader;\n}();\n\nexport { JoseHeader };","map":{"version":3,"sources":["../../src/crypto/JoseHeader.ts"],"names":[],"mappings":";;;;;AAAA;;;AAGG;;AAWH,IAAA,UAAA;AAAA;AAAA,YAAA;AAKI,WAAA,UAAA,CAAa,OAAb,EAAuC;AACnC,SAAK,GAAL,GAAW,OAAO,CAAC,GAAnB;AACA,SAAK,GAAL,GAAW,OAAO,CAAC,GAAnB;AACA,SAAK,GAAL,GAAW,OAAO,CAAC,GAAnB;AACH;AAED;;;;;;;AAOG;;;AACI,EAAA,UAAkB,CAAA,kBAAlB,GAAP,UAA0B,gBAA1B,EAA6D;;AAEzD,QAAI,CAAC,gBAAgB,CAAC,GAAtB,EAA2B;AACvB,YAAM,eAAe,CAAC,qBAAhB,EAAN;AACH,KAJwD,C;;;AAOzD,QAAI,CAAC,gBAAgB,CAAC,GAAtB,EAA2B;AACvB,YAAM,eAAe,CAAC,qBAAhB,EAAN;AACH;;AAED,QAAM,SAAS,GAAG,IAAI,UAAJ,CAAe;;AAE7B,MAAA,GAAG,EAAE,gBAAgB,CAAC,GAAjB,IAAwB,SAAS,CAAC,GAFV;AAG7B,MAAA,GAAG,EAAE,gBAAgB,CAAC,GAHO;AAI7B,MAAA,GAAG,EAAE,gBAAgB,CAAC;AAJO,KAAf,CAAlB;AAOA,WAAO,IAAI,CAAC,SAAL,CAAe,SAAf,CAAP;AACH,GAnBM;;AAoBX,SAAC,UAAD;AAAC,CAvCD,EAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { JoseHeaderError } from \"../error/JoseHeaderError\";\r\nimport { JsonTypes } from \"../utils/Constants\";\r\n\r\nexport type JoseHeaderOptions = {\r\n    typ?: JsonTypes,\r\n    alg?: string,\r\n    kid?: string\r\n};\r\n\r\nexport class JoseHeader {\r\n    public typ?: JsonTypes;\r\n    public alg?: string;\r\n    public kid?: string;\r\n\r\n    constructor (options: JoseHeaderOptions) {\r\n        this.typ = options.typ;\r\n        this.alg = options.alg;\r\n        this.kid = options.kid;\r\n    }\r\n\r\n    /**\r\n     * Builds SignedHttpRequest formatted JOSE Header from the\r\n     * JOSE Header options provided or previously set on the object and returns\r\n     * the stringified header object.\r\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n     * @param shrHeaderOptions \r\n     * @returns \r\n     */\r\n    static getShrHeaderString(shrHeaderOptions: JoseHeaderOptions): string {\r\n        // KeyID is required on the SHR header\r\n        if (!shrHeaderOptions.kid) {\r\n            throw JoseHeaderError.createMissingKidError();\r\n        }\r\n\r\n        // Alg is required on the SHR header\r\n        if (!shrHeaderOptions.alg) {\r\n            throw JoseHeaderError.createMissingAlgError();\r\n        }\r\n\r\n        const shrHeader = new JoseHeader({\r\n            // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\r\n            typ: shrHeaderOptions.typ || JsonTypes.Pop,\r\n            kid: shrHeaderOptions.kid,\r\n            alg: shrHeaderOptions.alg\r\n        });\r\n\r\n        return JSON.stringify(shrHeader);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}