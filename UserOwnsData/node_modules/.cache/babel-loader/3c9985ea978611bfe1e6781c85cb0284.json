{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { Authority } from './Authority.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar AuthorityFactory =\n/** @class */\nfunction () {\n  function AuthorityFactory() {}\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Also performs endpoint discovery.\r\n   *\r\n   * @param authorityUri\r\n   * @param networkClient\r\n   * @param protocolMode\r\n   */\n\n\n  AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authorityUriFinal, acquireTokenAuthority, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            performanceClient === null || performanceClient === void 0 ? void 0 : performanceClient.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n            authorityUriFinal = Authority.transformCIAMAuthority(authorityUri);\n            acquireTokenAuthority = AuthorityFactory.createInstance(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            performanceClient === null || performanceClient === void 0 ? void 0 : performanceClient.setPreQueueTime(PerformanceEvents.AuthorityResolveEndpointsAsync, correlationId);\n            return [4\n            /*yield*/\n            , acquireTokenAuthority.resolveEndpointsAsync()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , acquireTokenAuthority];\n\n          case 3:\n            e_1 = _a.sent();\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Does not perform endpoint discovery.\r\n   *\r\n   * @param authorityUrl\r\n   * @param networkInterface\r\n   * @param protocolMode\r\n   */\n\n\n  AuthorityFactory.createInstance = function (authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {\n    // Throw error if authority url is empty\n    if (StringUtils.isEmpty(authorityUrl)) {\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n\n    return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\n  };\n\n  return AuthorityFactory;\n}();\n\nexport { AuthorityFactory };","map":{"version":3,"sources":["../../src/authority/AuthorityFactory.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;;AAGG;;AAaH,IAAA,gBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,gBAAA,GAAA,CAuEC;AArEG;;;;;;;;;AASG;;;AACU,EAAA,gBAAA,CAAA,wBAAA,GAAb,UACI,YADJ,EAEI,aAFJ,EAGI,YAHJ,EAII,gBAJJ,EAKI,MALJ,EAMI,iBANJ,EAOI,aAPJ,EAO0B;;;;;;AAEtB,YAAA,iBAAiB,KAAjB,IAAA,IAAA,iBAAiB,KAAjB,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAiB,CAAE,mBAAnB,CAAuC,iBAAiB,CAAC,wCAAzD,EAAmG,aAAnG,CAAA;AAEM,YAAA,iBAAiB,GAAG,SAAS,CAAC,sBAAV,CAAiC,YAAjC,CAApB;AAGA,YAAA,qBAAqB,GAAc,gBAAgB,CAAC,cAAjB,CACrC,iBADqC,EAErC,aAFqC,EAGrC,YAHqC,EAIrC,gBAJqC,EAKrC,MALqC,EAMrC,iBANqC,EAOrC,aAPqC,CAAnC;;;;;;AAWF,YAAA,iBAAiB,KAAjB,IAAA,IAAA,iBAAiB,KAAjB,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAiB,CAAE,eAAnB,CAAmC,iBAAiB,CAAC,8BAArD,EAAqF,aAArF,CAAA;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,qBAAqB,CAAC,qBAAtB,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,qBAAP,CAAA;;;;AAEA,kBAAM,eAAe,CAAC,sCAAhB,CAAuD,GAAvD,CAAN;;;;;;;;;AAEP,GA/BY;AAiCb;;;;;;;;;AASG;;;AACI,EAAA,gBAAA,CAAA,cAAA,GAAP,UACI,YADJ,EAEI,gBAFJ,EAGI,YAHJ,EAII,gBAJJ,EAKI,MALJ,EAMI,iBANJ,EAOI,aAPJ,EAO0B;;AAGtB,QAAI,WAAW,CAAC,OAAZ,CAAoB,YAApB,CAAJ,EAAuC;AACnC,YAAM,wBAAwB,CAAC,mBAAzB,EAAN;AACH;;AAED,WAAO,IAAI,SAAJ,CAAc,YAAd,EAA4B,gBAA5B,EAA8C,YAA9C,EAA4D,gBAA5D,EAA8E,MAA9E,EAAsF,iBAAtF,EAAyG,aAAzG,CAAP;AACH,GAfM;;AAgBX,SAAC,gBAAD;AAAC,CAvED,EAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Authority } from \"./Authority\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { INetworkModule } from \"../network/INetworkModule\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\r\nimport { AuthorityOptions } from \"./AuthorityOptions\";\r\nimport { Logger } from \"../logger/Logger\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\r\n\r\nexport class AuthorityFactory {\r\n\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n     *\r\n     * Also performs endpoint discovery.\r\n     *\r\n     * @param authorityUri\r\n     * @param networkClient\r\n     * @param protocolMode\r\n     */\r\n    static async createDiscoveredInstance(\r\n        authorityUri: string,\r\n        networkClient: INetworkModule,\r\n        cacheManager: ICacheManager,\r\n        authorityOptions: AuthorityOptions,\r\n        logger: Logger,\r\n        performanceClient?: IPerformanceClient,\r\n        correlationId?: string\r\n    ): Promise<Authority> {\r\n        performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\r\n        \r\n        const authorityUriFinal = Authority.transformCIAMAuthority(authorityUri);\r\n\r\n        // Initialize authority and perform discovery endpoint check.\r\n        const acquireTokenAuthority: Authority = AuthorityFactory.createInstance(\r\n            authorityUriFinal,\r\n            networkClient,\r\n            cacheManager,\r\n            authorityOptions,\r\n            logger,\r\n            performanceClient,\r\n            correlationId\r\n        );\r\n\r\n        try {\r\n            performanceClient?.setPreQueueTime(PerformanceEvents.AuthorityResolveEndpointsAsync, correlationId);\r\n            await acquireTokenAuthority.resolveEndpointsAsync();\r\n            return acquireTokenAuthority;\r\n        } catch (e) {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n     *\r\n     * Does not perform endpoint discovery.\r\n     *\r\n     * @param authorityUrl\r\n     * @param networkInterface\r\n     * @param protocolMode\r\n     */\r\n    static createInstance(\r\n        authorityUrl: string,\r\n        networkInterface: INetworkModule,\r\n        cacheManager: ICacheManager,\r\n        authorityOptions: AuthorityOptions,\r\n        logger: Logger,\r\n        performanceClient?: IPerformanceClient,\r\n        correlationId?: string\r\n    ): Authority {\r\n        // Throw error if authority url is empty\r\n        if (StringUtils.isEmpty(authorityUrl)) {\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n\r\n        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}