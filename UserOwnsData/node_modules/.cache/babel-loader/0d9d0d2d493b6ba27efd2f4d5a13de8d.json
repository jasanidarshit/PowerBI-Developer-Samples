{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { OIDC_DEFAULT_SCOPES, StringUtils, UrlString, Constants, AuthError, ThrottlingUtils, ProtocolUtils, PerformanceEvents } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserConstants, InteractionType, ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar PopupClient =\n/** @class */\nfunction (_super) {\n  __extends(PopupClient, _super);\n\n  function PopupClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this; // Properly sets this reference for the unload event.\n\n\n    _this.unloadWindow = _this.unloadWindow.bind(_this);\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.acquireToken = function (request) {\n    try {\n      var popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\n      var popupWindowAttributes = request.popupWindowAttributes || {}; // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true, acquiring token\"); // Passes on popup position and dimensions if in request\n\n        return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before acquiring token.\n        this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n        var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n        return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n   * @param logoutRequest\r\n   */\n\n\n  PopupClient.prototype.logout = function (logoutRequest) {\n    try {\n      this.logger.verbose(\"logoutPopup called\");\n      var validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n      var popupName = this.generateLogoutPopupName(validLogoutRequest);\n      var authority = logoutRequest && logoutRequest.authority;\n      var mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n      var popupWindowAttributes = (logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.popupWindowAttributes) || {}; // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true\"); // Passes on popup position and dimensions if in request\n\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before logging out.\n        this.logger.verbose(\"asyncPopup set to false, opening popup\");\n        var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\n      }\n    } catch (e) {\n      // Since this function is synchronous we need to reject\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param popup\r\n   * @param popupWindowAttributes\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PopupClient.prototype.acquireTokenPopupAsync = function (request, popupName, popupWindowAttributes, popup) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, validRequest, authCodeRequest, authClient, isNativeBroker, fetchNativeAccountIdMeasurement, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, serverParams, state_1, nativeInteractionClient, userRequestState, result, e_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"acquireTokenPopupAsync called\");\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Popup)];\n\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 8,, 9]); // Create auth code request and generate PKCE params\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(validRequest)];\n\n          case 3:\n            authCodeRequest = _a.sent(); // Initialize the client\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\n            fetchNativeAccountIdMeasurement = void 0;\n\n            if (isNativeBroker) {\n              fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\n            }\n\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), {\n              nativeBroker: isNativeBroker\n            }))];\n\n          case 5:\n            navigateUrl = _a.sent();\n            interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n            popupParameters = {\n              popup: popup,\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes\n            };\n            popupWindow = this.initiateAuthRequest(navigateUrl, popupParameters);\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4\n            /*yield*/\n            , this.monitorPopupForHash(popupWindow)];\n\n          case 6:\n            hash = _a.sent();\n            serverParams = UrlString.getDeserializedHash(hash);\n            state_1 = this.validateAndExtractStateFromHash(serverParams, InteractionType.Popup, validRequest.correlationId); // Remove throttle if it exists\n\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\"); // end measurement for server call with native brokering enabled\n\n              if (fetchNativeAccountIdMeasurement) {\n                fetchNativeAccountIdMeasurement.endMeasurement({\n                  success: true,\n                  isNativeBroker: true\n                });\n              }\n\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state_1).userRequestState;\n              return [2\n              /*return*/\n              , nativeInteractionClient.acquireToken(__assign(__assign({}, validRequest), {\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state_1);\n              })];\n            }\n\n            return [4\n            /*yield*/\n            , interactionHandler.handleCodeResponseFromHash(hash, state_1, authClient.authority, this.networkClient)];\n\n          case 7:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n\n          case 8:\n            e_1 = _a.sent();\n\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param requestAuthority\r\n   * @param popup\r\n   * @param mainWindowRedirectUri\r\n   * @param popupWindowAttributes\r\n   */\n\n\n  PopupClient.prototype.logoutPopupAsync = function (validRequest, popupName, popupWindowAttributes, requestAuthority, popup, mainWindowRedirectUri) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, authClient, logoutUri, popupWindow, navigationOptions, absoluteUrl, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutPopupAsync called\");\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 5,, 6]); // Clear cache on logout\n\n\n            return [4\n            /*yield*/\n            , this.clearCacheOnLogout(validRequest.account)];\n\n          case 2:\n            // Clear cache on logout\n            _a.sent(); // Initialize the client\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, requestAuthority)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n            popupWindow = this.openPopup(logoutUri, {\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes,\n              popup: popup\n            });\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4\n            /*yield*/\n            , this.waitForLogoutPopup(popupWindow)];\n\n          case 4:\n            _a.sent();\n\n            if (mainWindowRedirectUri) {\n              navigationOptions = {\n                apiId: ApiId.logoutPopup,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n              };\n              absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\n              this.logger.verbose(\"Redirecting main window to url specified in the request\");\n              this.logger.verbosePii(\"Redirecting main window to: \" + absoluteUrl);\n              this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n              this.logger.verbose(\"No main window navigation requested\");\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            e_2 = _a.sent();\n\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e_2);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            throw e_2;\n\n          case 6:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Opens a popup window with given request Url.\r\n   * @param requestUrl\r\n   */\n\n\n  PopupClient.prototype.initiateAuthRequest = function (requestUrl, params) {\n    // Check that request url is not empty.\n    if (!StringUtils.isEmpty(requestUrl)) {\n      this.logger.infoPii(\"Navigate to: \" + requestUrl); // Open the popup window to requestUrl.\n\n      return this.openPopup(requestUrl, params);\n    } else {\n      // Throw error if request URL is empty.\n      this.logger.error(\"Navigate url is empty\");\n      throw BrowserAuthError.createEmptyNavigationUriError();\n    }\n  };\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   * @param timeout - timeout for processing hash once popup is redirected back to application\r\n   */\n\n\n  PopupClient.prototype.monitorPopupForHash = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      /*\r\n       * Polling for popups needs to be tick-based,\r\n       * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).\r\n       */\n      var maxTicks = _this.config.system.windowHashTimeout / _this.config.system.pollIntervalMilliseconds;\n      var ticks = 0;\n\n      _this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\n\n      var intervalId = setInterval(function () {\n        // Window is closed\n        if (popupWindow.closed) {\n          _this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\n\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createUserCancelledError());\n          return;\n        }\n\n        var href = Constants.EMPTY_STRING;\n        var hash = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n          hash = popupWindow.location.hash;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        _this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\n        /*\r\n         * Only run clock when we are on same domain for popups\r\n         * as popup operations can take a long time.\r\n         */\n\n\n        ticks++;\n\n        if (hash) {\n          _this.logger.verbose(\"PopupHandler.monitorPopupForHash - found hash in url\");\n\n          clearInterval(intervalId);\n\n          _this.cleanPopup(popupWindow);\n\n          if (UrlString.hashContainsKnownProperties(hash)) {\n            _this.logger.verbose(\"PopupHandler.monitorPopupForHash - hash contains known properties, returning.\");\n\n            resolve(hash);\n          } else {\n            _this.logger.error(\"PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.\");\n\n            _this.logger.errorPii(\"PopupHandler.monitorPopupForHash - hash found: \" + hash);\n\n            reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\n          }\n        } else if (ticks > maxTicks) {\n          _this.logger.error(\"PopupHandler.monitorPopupForHash - unable to find hash in url, timing out\");\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createMonitorPopupTimeoutError());\n        }\n      }, _this.config.system.pollIntervalMilliseconds);\n    });\n  };\n  /**\r\n   * Waits for user interaction in logout popup window\r\n   * @param popupWindow\r\n   * @returns\r\n   */\n\n\n  PopupClient.prototype.waitForLogoutPopup = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - polling started\");\n\n      var intervalId = setInterval(function () {\n        // Window is closed\n        if (popupWindow.closed) {\n          _this.logger.error(\"PopupHandler.waitForLogoutPopup - window closed\");\n\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          resolve();\n        }\n\n        var href = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.\");\n\n        clearInterval(intervalId);\n\n        _this.cleanPopup(popupWindow);\n\n        resolve();\n      }, _this.config.system.pollIntervalMilliseconds);\n    });\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @param popupWindowAttributes\r\n   * @ignore\r\n   * @hidden\r\n   */\n\n\n  PopupClient.prototype.openPopup = function (urlNavigate, popupParams) {\n    try {\n      var popupWindow = void 0; // Popup window passed in, setting url to navigate to\n\n      if (popupParams.popup) {\n        popupWindow = popupParams.popup;\n        this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popupParams.popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\n        popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);\n      } // Popup will be null if popups are blocked\n\n\n      if (!popupWindow) {\n        throw BrowserAuthError.createEmptyWindowCreatedError();\n      }\n\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n\n      this.currentWindow = popupWindow;\n      window.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.browserStorage.setInteractionInProgress(false);\n      throw BrowserAuthError.createPopupWindowError(e.toString());\n    }\n  };\n  /**\r\n   * Helper function to set popup window dimensions and position\r\n   * @param urlNavigate\r\n   * @param popupName\r\n   * @param popupWindowAttributes\r\n   * @returns\r\n   */\n\n\n  PopupClient.prototype.openSizedPopup = function (urlNavigate, popupName, popupWindowAttributes) {\n    var _a, _b, _c, _d;\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n\n\n    var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n    var winTop = window.screenTop ? window.screenTop : window.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n\n    var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var width = (_a = popupWindowAttributes.popupSize) === null || _a === void 0 ? void 0 : _a.width;\n    var height = (_b = popupWindowAttributes.popupSize) === null || _b === void 0 ? void 0 : _b.height;\n    var top = (_c = popupWindowAttributes.popupPosition) === null || _c === void 0 ? void 0 : _c.top;\n    var left = (_d = popupWindowAttributes.popupPosition) === null || _d === void 0 ? void 0 : _d.left;\n\n    if (!width || width < 0 || width > winWidth) {\n      this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n      width = BrowserConstants.POPUP_WIDTH;\n    }\n\n    if (!height || height < 0 || height > winHeight) {\n      this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n      height = BrowserConstants.POPUP_HEIGHT;\n    }\n\n    if (!top || top < 0 || top > winHeight) {\n      this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n      top = Math.max(0, winHeight / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    }\n\n    if (!left || left < 0 || left > winWidth) {\n      this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n      left = Math.max(0, winWidth / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    }\n\n    return window.open(urlNavigate, popupName, \"width=\" + width + \", height=\" + height + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\n  };\n  /**\r\n   * Event callback to unload main window.\r\n   */\n\n\n  PopupClient.prototype.unloadWindow = function (e) {\n    this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    } // Guarantees browser unload will happen, so no other errors will be thrown.\n\n\n    e.preventDefault();\n  };\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n\n\n  PopupClient.prototype.cleanPopup = function (popupWindow) {\n    if (popupWindow) {\n      // Close window.\n      popupWindow.close();\n    } // Remove window unload function\n\n\n    window.removeEventListener(\"beforeunload\", this.unloadWindow); // Interaction is completed - remove interaction status.\n\n    this.browserStorage.setInteractionInProgress(false);\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.generatePopupName = function (scopes, authority) {\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + scopes.join(\"-\") + \".\" + authority + \".\" + this.correlationId;\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.generateLogoutPopupName = function (request) {\n    var homeAccountId = request.account && request.account.homeAccountId;\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + homeAccountId + \".\" + this.correlationId;\n  };\n\n  return PopupClient;\n}(StandardInteractionClient);\n\nexport { PopupClient };","map":{"version":3,"sources":["../../src/interaction_client/PopupClient.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;;AAGG;;AA0BH,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,SAAyB,CAAA,WAAA,EAAA,MAAA,CAAzB;;AAI7B,WAAA,WAAA,CAAY,MAAZ,EAA0C,WAA1C,EAA4E,aAA5E,EAAoG,MAApG,EAAoH,YAApH,EAAgJ,gBAAhJ,EAAqL,iBAArL,EAA4N,iBAA5N,EAAoQ,oBAApQ,EAAiT,aAAjT,EAAuU;AAAvU,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAN,EAAc,WAAd,EAA2B,aAA3B,EAA0C,MAA1C,EAAkD,YAAlD,EAAgE,gBAAhE,EAAkF,iBAAlF,EAAqG,oBAArG,EAA2H,aAA3H,KAIH,IALD,CAAuU,C;;;AAGnU,IAAA,KAAI,CAAC,YAAL,GAAoB,KAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,KAAvB,CAApB;AACA,IAAA,KAAI,CAAC,aAAL,GAAqB,iBAArB;;AACH;AAED;;;AAGG;;;AACH,EAAA,WAAY,CAAA,SAAZ,CAAY,YAAZ,GAAA,UAAa,OAAb,EAAkC;AAC9B,QAAI;AACA,UAAM,SAAS,GAAG,KAAK,iBAAL,CAAuB,OAAO,CAAC,MAAR,IAAkB,mBAAzC,EAA8D,OAAO,CAAC,SAAR,IAAqB,KAAK,MAAL,CAAY,IAAZ,CAAiB,SAApG,CAAlB;AACA,UAAM,qBAAqB,GAAG,OAAO,CAAC,qBAAR,IAAiC,EAA/D,CAFA,C;;AAKA,UAAI,KAAK,MAAL,CAAY,MAAZ,CAAmB,WAAvB,EAAoC;AAChC,aAAK,MAAL,CAAY,OAAZ,CAAoB,0CAApB,EADgC,C;;AAGhC,eAAO,KAAK,sBAAL,CAA4B,OAA5B,EAAqC,SAArC,EAAgD,qBAAhD,CAAP;AACH,OAJD,MAIO;;AAEH,aAAK,MAAL,CAAY,OAAZ,CAAoB,+DAApB;AACA,YAAM,KAAK,GAAG,KAAK,cAAL,CAAoB,aAApB,EAAmC,SAAnC,EAA8C,qBAA9C,CAAd;AACA,eAAO,KAAK,sBAAL,CAA4B,OAA5B,EAAqC,SAArC,EAAgD,qBAAhD,EAAuE,KAAvE,CAAP;AACH;AACJ,KAfD,CAeE,OAAO,CAAP,EAAU;AACR,aAAO,OAAO,CAAC,MAAR,CAAe,CAAf,CAAP;AACH;AACJ,GAnBD;AAqBA;;;AAGG;;;AACH,EAAA,WAAM,CAAA,SAAN,CAAM,MAAN,GAAA,UAAO,aAAP,EAA6C;AACzC,QAAI;AACA,WAAK,MAAL,CAAY,OAAZ,CAAoB,oBAApB;AACA,UAAM,kBAAkB,GAAG,KAAK,uBAAL,CAA6B,aAA7B,CAA3B;AAEA,UAAM,SAAS,GAAG,KAAK,uBAAL,CAA6B,kBAA7B,CAAlB;AACA,UAAM,SAAS,GAAG,aAAa,IAAI,aAAa,CAAC,SAAjD;AACA,UAAM,qBAAqB,GAAG,aAAa,IAAI,aAAa,CAAC,qBAA7D;AACA,UAAM,qBAAqB,GAAG,CAAA,aAAa,KAAb,IAAA,IAAA,aAAa,KAAb,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAa,CAAE,qBAAf,KAAwC,EAAtE,CAPA,C;;AAUA,UAAI,KAAK,MAAL,CAAY,MAAZ,CAAmB,WAAvB,EAAoC;AAChC,aAAK,MAAL,CAAY,OAAZ,CAAoB,yBAApB,EADgC,C;;AAGhC,eAAO,KAAK,gBAAL,CAAsB,kBAAtB,EAA0C,SAA1C,EAAqD,qBAArD,EAA4E,SAA5E,EAAuF,SAAvF,EAAkG,qBAAlG,CAAP;AACH,OAJD,MAIO;;AAEH,aAAK,MAAL,CAAY,OAAZ,CAAoB,wCAApB;AACA,YAAM,KAAK,GAAG,KAAK,cAAL,CAAoB,aAApB,EAAmC,SAAnC,EAA8C,qBAA9C,CAAd;AACA,eAAO,KAAK,gBAAL,CAAsB,kBAAtB,EAA0C,SAA1C,EAAqD,qBAArD,EAA4E,SAA5E,EAAuF,KAAvF,EAA8F,qBAA9F,CAAP;AACH;AACJ,KApBD,CAoBE,OAAO,CAAP,EAAU;;AAER,aAAO,OAAO,CAAC,MAAR,CAAe,CAAf,CAAP;AACH;AACJ,GAzBD;AA2BA;;;;;;;;AAQG;;;AACa,EAAA,WAAsB,CAAA,SAAtB,CAAsB,sBAAtB,GAAhB,UAAuC,OAAvC,EAA8D,SAA9D,EAAiF,qBAAjF,EAA+H,KAA/H,EAAkJ;;;;;;;;;AAC9I,iBAAK,MAAL,CAAY,OAAZ,CAAoB,+BAApB;AACM,YAAA,sBAAsB,GAAG,KAAK,gCAAL,CAAsC,KAAK,CAAC,iBAA5C,CAAzB;AAEN,iBAAK,iBAAL,CAAuB,eAAvB,CAAuC,iBAAiB,CAAC,uDAAzD,EAAkH,OAAO,CAAC,aAA1H;AACqB,mBAAM,CAAA;AAAA;AAAA,cAAA,KAAK,8BAAL,CAAoC,OAApC,EAA6C,eAAe,CAAC,KAA7D,CAAA,CAAN;;;AAAf,YAAA,YAAY,GAAG,EAAyE,CAAA,IAAzE,EAAf;AACN,iBAAK,cAAL,CAAoB,kBAApB,CAAuC,YAAY,CAAC,KAApD,EAA2D,YAAY,CAAC,KAAxE,EAA+E,YAAY,CAAC,SAA5F,EAAuG,YAAY,CAAC,SAAb,IAA0B,SAAS,CAAC,YAA3I,EAAyJ,YAAY,CAAC,OAAb,IAAwB,IAAjL;;;;;;;AAII,iBAAK,iBAAL,CAAuB,eAAvB,CAAuC,iBAAiB,CAAC,2DAAzD,EAAsH,OAAO,CAAC,aAA9H;AACwD,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,kCAAL,CAAwC,YAAxC,CAAN,CAAA;;;AAAlD,YAAA,eAAe,GAAmC,EAA2D,CAAA,IAA3D,EAAlD,C;;AAGN,iBAAK,iBAAL,CAAuB,eAAvB,CAAuC,iBAAiB,CAAC,6CAAzD,EAAwG,OAAO,CAAC,aAAhH;AAC4C,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,oBAAL,CAA0B,sBAA1B,EAAkD,YAAY,CAAC,SAA/D,EAA0E,YAAY,CAAC,iBAAvF,CAAN,CAAA;;;AAAtC,YAAA,UAAU,GAA4B,EAA+G,CAAA,IAA/G,EAAtC;AACN,iBAAK,MAAL,CAAY,OAAZ,CAAoB,0BAApB;AAEM,YAAA,cAAc,GAAG,oBAAoB,CAAC,iBAArB,CAAuC,KAAK,MAA5C,EAAoD,KAAK,MAAzD,EAAiE,KAAK,oBAAtE,EAA4F,OAAO,CAAC,oBAApG,CAAjB;AAEF,YAAA,+BAA+B,GAAA,KAAA,CAA/B;;AACJ,gBAAI,cAAJ,EAAoB;AAChB,cAAA,+BAA+B,GAAG,KAAK,iBAAL,CAAuB,gBAAvB,CAAwC,iBAAiB,CAAC,8BAA1D,EAA0F,OAAO,CAAC,aAAlG,CAAlC;AACH;;AAGmB,mBAAM,CAAA;AAAA;AAAA,cAAA,UAAU,CAAC,cAAX,CACnB,QAAA,CAAA,QAAA,CAAA,EAAA,EAAA,YAAA,CAAA,EAAY;AACf,cAAA,YAAY,EAAE;AADC,aAAZ,CADmB,CAAA,CAAN;;;AAAd,YAAA,WAAW,GAAG,EAGlB,CAAA,IAHkB,EAAd;AAMA,YAAA,kBAAkB,GAAG,IAAI,kBAAJ,CAAuB,UAAvB,EAAmC,KAAK,cAAxC,EAAwD,eAAxD,EAAyE,KAAK,MAA9E,EAAsF,KAAK,iBAA3F,CAArB;AAGA,YAAA,eAAe,GAAgB;AACjC,cAAA,KAAK,EAAA,KAD4B;AAEjC,cAAA,SAAS,EAAA,SAFwB;AAGjC,cAAA,qBAAqB,EAAA;AAHY,aAA/B;AAKA,YAAA,WAAW,GAAW,KAAK,mBAAL,CAAyB,WAAzB,EAAsC,eAAtC,CAAtB;AACN,iBAAK,YAAL,CAAkB,SAAlB,CAA4B,SAAS,CAAC,YAAtC,EAAoD,eAAe,CAAC,KAApE,EAA2E;AAAC,cAAA,WAAW,EAAA;AAAZ,aAA3E,EAA0F,IAA1F;AAGa,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,mBAAL,CAAyB,WAAzB,CAAN,CAAA;;;AAAP,YAAA,IAAI,GAAG,EAA2C,CAAA,IAA3C,EAAP;AAEA,YAAA,YAAY,GAAoC,SAAS,CAAC,mBAAV,CAA8B,IAA9B,CAAhD;AACA,YAAA,OAAA,GAAQ,KAAK,+BAAL,CAAqC,YAArC,EAAmD,eAAe,CAAC,KAAnE,EAA0E,YAAY,CAAC,aAAvF,CAAR,C;;AAEN,YAAA,eAAe,CAAC,cAAhB,CAA+B,KAAK,cAApC,EAAoD,KAAK,MAAL,CAAY,IAAZ,CAAiB,QAArE,EAA+E,eAA/E;;AAEA,gBAAI,YAAY,CAAC,SAAjB,EAA4B;AACxB,mBAAK,MAAL,CAAY,OAAZ,CAAoB,iDAApB,EADwB,C;;AAGxB,kBAAI,+BAAJ,EAAqC;AACjC,gBAAA,+BAA+B,CAAC,cAAhC,CAA+C;AAC3C,kBAAA,OAAO,EAAE,IADkC;AAE3C,kBAAA,cAAc,EAAE;AAF2B,iBAA/C;AAIH;;AAED,kBAAI,CAAC,KAAK,oBAAV,EAAgC;AAC5B,sBAAM,gBAAgB,CAAC,yCAAjB,EAAN;AACH;;AACK,cAAA,uBAAuB,GAAG,IAAI,uBAAJ,CAA4B,KAAK,MAAjC,EAAyC,KAAK,cAA9C,EAA8D,KAAK,aAAnE,EAAkF,KAAK,MAAvF,EAA+F,KAAK,YAApG,EAAkH,KAAK,gBAAvH,EAAyI,KAAK,CAAC,iBAA/I,EAAkK,KAAK,iBAAvK,EAA0L,KAAK,oBAA/L,EAAqN,YAAY,CAAC,SAAlO,EAA6O,KAAK,aAAlP,EAAiQ,YAAY,CAAC,aAA9Q,CAA1B;AACE,cAAA,gBAAgB,GAAK,aAAa,CAAC,iBAAd,CAAgC,KAAK,aAArC,EAAoD,OAApD,EAAL,gBAAhB;AACR,qBAAA,CAAA;AAAA;AAAA,gBAAO,uBAAuB,CAAC,YAAxB,CAAoC,QAAA,CAAA,QAAA,CAAA,EAAA,EACpC,YADoC,CAAA,EAEvC;AAAA,gBAAA,KAAK,EAAE,gBAAP;AACA,gBAAA,MAAM,EAAE,SADR,CACiB;;AADjB,eAFuC,CAApC,EAIJ,OAJI,CAII,YAAA;AACP,gBAAA,KAAI,CAAC,cAAL,CAAoB,mBAApB,CAAwC,OAAxC;AACH,eANM,CAAP,CAAA;AAOH;;AAGc,mBAAA,CAAA;AAAA;AAAA,cAAM,kBAAkB,CAAC,0BAAnB,CAA8C,IAA9C,EAAoD,OAApD,EAA2D,UAAU,CAAC,SAAtE,EAAiF,KAAK,aAAtF,CAAN,CAAA;;;AAAT,YAAA,MAAM,GAAG,EAA0G,CAAA,IAA1G,EAAT;AAEN,mBAAA,CAAA;AAAA;AAAA,cAAO,MAAP,CAAA;;;;;AAEA,gBAAI,KAAJ,EAAW;;AAEP,cAAA,KAAK,CAAC,KAAN;AACH;;AAED,gBAAI,GAAC,YAAY,SAAjB,EAA4B;AACvB,cAAA,GAAe,CAAC,gBAAhB,CAAiC,KAAK,aAAtC;AACJ;;AAED,YAAA,sBAAsB,CAAC,kBAAvB,CAA0C,GAA1C;AACA,iBAAK,cAAL,CAAoB,mBAApB,CAAwC,YAAY,CAAC,KAArD;AACA,kBAAM,GAAN;;;;;;;;;AAEP,GA7Fe;AA+FhB;;;;;;;;AAQG;;;AACa,EAAA,WAAA,CAAA,SAAA,CAAA,gBAAA,GAAhB,UAAiC,YAAjC,EAAwE,SAAxE,EAA2F,qBAA3F,EAAyI,gBAAzI,EAAoK,KAApK,EAAyL,qBAAzL,EAAuN;;;;;;AACnN,iBAAK,MAAL,CAAY,OAAZ,CAAoB,yBAApB;AACA,iBAAK,YAAL,CAAkB,SAAlB,CAA4B,SAAS,CAAC,YAAtC,EAAoD,eAAe,CAAC,KAApE,EAA2E,YAA3E;AAEM,YAAA,sBAAsB,GAAG,KAAK,gCAAL,CAAsC,KAAK,CAAC,WAA5C,CAAzB;;;;;;;AAIF,mBAAM,CAAA;AAAA;AAAA,cAAA,KAAK,kBAAL,CAAwB,YAAY,CAAC,OAArC,CAAA,CAAN;;;;AAAA,YAAA,EAAA,CAAA,IAAA,G;;;AAGA,iBAAK,iBAAL,CAAuB,eAAvB,CAAuC,iBAAiB,CAAC,6CAAzD,EAAwG,YAAY,CAAC,aAArH;AACmB,mBAAM,CAAA;AAAA;AAAA,cAAA,KAAK,oBAAL,CAA0B,sBAA1B,EAAkD,gBAAlD,CAAA,CAAN;;;AAAb,YAAA,UAAU,GAAG,EAAyE,CAAA,IAAzE,EAAb;AACN,iBAAK,MAAL,CAAY,OAAZ,CAAoB,0BAApB;AAGM,YAAA,SAAS,GAAW,UAAU,CAAC,YAAX,CAAwB,YAAxB,CAApB;AAEN,iBAAK,YAAL,CAAkB,SAAlB,CAA4B,SAAS,CAAC,cAAtC,EAAsD,eAAe,CAAC,KAAtE,EAA6E,YAA7E;AAGM,YAAA,WAAW,GAAG,KAAK,SAAL,CAAe,SAAf,EAA0B;AAAC,cAAA,SAAS,EAAA,SAAV;AAAY,cAAA,qBAAqB,EAAA,qBAAjC;AAAmC,cAAA,KAAK,EAAA;AAAxC,aAA1B,CAAd;AACN,iBAAK,YAAL,CAAkB,SAAlB,CAA4B,SAAS,CAAC,YAAtC,EAAoD,eAAe,CAAC,KAApE,EAA2E;AAAC,cAAA,WAAW,EAAA;AAAZ,aAA3E,EAA0F,IAA1F;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,kBAAL,CAAwB,WAAxB,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AAEA,gBAAI,qBAAJ,EAA2B;AACjB,cAAA,iBAAiB,GAAsB;AACzC,gBAAA,KAAK,EAAE,KAAK,CAAC,WAD4B;AAEzC,gBAAA,OAAO,EAAE,KAAK,MAAL,CAAY,MAAZ,CAAmB,yBAFa;AAGzC,gBAAA,SAAS,EAAE;AAH8B,eAAvC;AAKA,cAAA,WAAW,GAAG,SAAS,CAAC,cAAV,CAAyB,qBAAzB,EAAgD,YAAY,CAAC,aAAb,EAAhD,CAAd;AAEN,mBAAK,MAAL,CAAY,OAAZ,CAAoB,yDAApB;AACA,mBAAK,MAAL,CAAY,UAAZ,CAAuB,iCAA+B,WAAtD;AACA,mBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,WAAvC,EAAoD,iBAApD;AACH,aAXD,MAWO;AACH,mBAAK,MAAL,CAAY,OAAZ,CAAoB,qCAApB;AACH;;;;;;;;;AAED,gBAAI,KAAJ,EAAW;;AAEP,cAAA,KAAK,CAAC,KAAN;AACH;;AAED,gBAAI,GAAC,YAAY,SAAjB,EAA4B;AACvB,cAAA,GAAe,CAAC,gBAAhB,CAAiC,KAAK,aAAtC;AACJ;;AAED,iBAAK,cAAL,CAAoB,wBAApB,CAA6C,KAA7C;AACA,iBAAK,YAAL,CAAkB,SAAlB,CAA4B,SAAS,CAAC,cAAtC,EAAsD,eAAe,CAAC,KAAtE,EAA6E,IAA7E,EAAmF,GAAnF;AACA,iBAAK,YAAL,CAAkB,SAAlB,CAA4B,SAAS,CAAC,UAAtC,EAAkD,eAAe,CAAC,KAAlE;AACA,YAAA,sBAAsB,CAAC,kBAAvB,CAA0C,GAA1C;AACA,kBAAM,GAAN;;;AAGJ,iBAAK,YAAL,CAAkB,SAAlB,CAA4B,SAAS,CAAC,UAAtC,EAAkD,eAAe,CAAC,KAAlE;;;;;;;AACH,GA1De;AA4DhB;;;AAGG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,UAApB,EAAwC,MAAxC,EAA2D;;AAEvD,QAAI,CAAC,WAAW,CAAC,OAAZ,CAAoB,UAApB,CAAL,EAAsC;AAClC,WAAK,MAAL,CAAY,OAAZ,CAAoB,kBAAgB,UAApC,EADkC,C;;AAGlC,aAAO,KAAK,SAAL,CAAe,UAAf,EAA2B,MAA3B,CAAP;AACH,KAJD,MAIO;;AAEH,WAAK,MAAL,CAAY,KAAZ,CAAkB,uBAAlB;AACA,YAAM,gBAAgB,CAAC,6BAAjB,EAAN;AACH;AACJ,GAXD;AAaA;;;;AAIG;;;AACH,EAAA,WAAmB,CAAA,SAAnB,CAAmB,mBAAnB,GAAA,UAAoB,WAApB,EAAuC;AAAvC,QAkEC,KAAA,GAAA,IAlED;;AACI,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B;;;AAGG;AACH,UAAM,QAAQ,GAAG,KAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,iBAAnB,GAAuC,KAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,wBAA3E;AACA,UAAI,KAAK,GAAG,CAAZ;;AAEA,MAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,oDAApB;;AAEA,UAAM,UAAU,GAAG,WAAW,CAAC,YAAA;;AAE3B,YAAI,WAAW,CAAC,MAAhB,EAAwB;AACpB,UAAA,KAAI,CAAC,MAAL,CAAY,KAAZ,CAAkB,kDAAlB;;AACA,UAAA,KAAI,CAAC,UAAL;;AACA,UAAA,aAAa,CAAC,UAAD,CAAb;AACA,UAAA,MAAM,CAAC,gBAAgB,CAAC,wBAAjB,EAAD,CAAN;AACA;AACH;;AAED,YAAI,IAAI,GAAW,SAAS,CAAC,YAA7B;AACA,YAAI,IAAI,GAAW,SAAS,CAAC,YAA7B;;AACA,YAAI;AACA;;;;AAIG;AACH,UAAA,IAAI,GAAG,WAAW,CAAC,QAAZ,CAAqB,IAA5B;AACA,UAAA,IAAI,GAAG,WAAW,CAAC,QAAZ,CAAqB,IAA5B;AACH,SARD,CAQE,OAAO,CAAP,EAAU,CAAE,CApBa,C;;;AAuB3B,YAAI,WAAW,CAAC,OAAZ,CAAoB,IAApB,KAA6B,IAAI,KAAK,aAA1C,EAAyD;AACrD;AACH;;AAED,QAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,6EAApB;AAEA;;;AAGG;;;AACH,QAAA,KAAK;;AAEL,YAAI,IAAJ,EAAU;AACN,UAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,sDAApB;;AACA,UAAA,aAAa,CAAC,UAAD,CAAb;;AACA,UAAA,KAAI,CAAC,UAAL,CAAgB,WAAhB;;AAEA,cAAI,SAAS,CAAC,2BAAV,CAAsC,IAAtC,CAAJ,EAAiD;AAC7C,YAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,+EAApB;;AACA,YAAA,OAAO,CAAC,IAAD,CAAP;AACH,WAHD,MAGO;AACH,YAAA,KAAI,CAAC,MAAL,CAAY,KAAZ,CAAkB,6JAAlB;;AACA,YAAA,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,oDAAkD,IAAvE;;AACA,YAAA,MAAM,CAAC,gBAAgB,CAAC,4CAAjB,EAAD,CAAN;AACH;AACJ,SAbD,MAaO,IAAI,KAAK,GAAG,QAAZ,EAAsB;AACzB,UAAA,KAAI,CAAC,MAAL,CAAY,KAAZ,CAAkB,2EAAlB;;AACA,UAAA,aAAa,CAAC,UAAD,CAAb;AACA,UAAA,MAAM,CAAC,gBAAgB,CAAC,8BAAjB,EAAD,CAAN;AACH;AACJ,OArD6B,EAqD3B,KAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,wBArDQ,CAA9B;AAsDH,KAhEM,CAAP;AAiEH,GAlED;AAoEA;;;;AAIG;;;AACH,EAAA,WAAkB,CAAA,SAAlB,CAAkB,kBAAlB,GAAA,UAAmB,WAAnB,EAAsC;AAAtC,QAmCC,KAAA,GAAA,IAnCD;;AACI,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAQ;AACvB,MAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,mDAApB;;AAEA,UAAM,UAAU,GAAG,WAAW,CAAC,YAAA;;AAE3B,YAAI,WAAW,CAAC,MAAhB,EAAwB;AACpB,UAAA,KAAI,CAAC,MAAL,CAAY,KAAZ,CAAkB,iDAAlB;;AACA,UAAA,KAAI,CAAC,UAAL;;AACA,UAAA,aAAa,CAAC,UAAD,CAAb;AACA,UAAA,OAAO;AACV;;AAED,YAAI,IAAI,GAAW,SAAS,CAAC,YAA7B;;AACA,YAAI;AACA;;;;AAIG;AACH,UAAA,IAAI,GAAG,WAAW,CAAC,QAAZ,CAAqB,IAA5B;AACH,SAPD,CAOE,OAAO,CAAP,EAAU,CAAE,CAjBa,C;;;AAoB3B,YAAI,WAAW,CAAC,OAAZ,CAAoB,IAApB,KAA6B,IAAI,KAAK,aAA1C,EAAyD;AACrD;AACH;;AAED,QAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,sFAApB;;AAEA,QAAA,aAAa,CAAC,UAAD,CAAb;;AACA,QAAA,KAAI,CAAC,UAAL,CAAgB,WAAhB;;AACA,QAAA,OAAO;AACV,OA7B6B,EA6B3B,KAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,wBA7BQ,CAA9B;AA8BH,KAjCM,CAAP;AAkCH,GAnCD;AAqCA;;;;;;;;;;;;AAYG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,WAAV,EAA+B,WAA/B,EAAuD;AACnD,QAAI;AACA,UAAI,WAAW,GAAA,KAAA,CAAf,CADA,C;;AAGA,UAAI,WAAW,CAAC,KAAhB,EAAuB;AACnB,QAAA,WAAW,GAAG,WAAW,CAAC,KAA1B;AACA,aAAK,MAAL,CAAY,UAAZ,CAAuB,iCAA+B,WAAtD;AACA,QAAA,WAAW,CAAC,QAAZ,CAAqB,MAArB,CAA4B,WAA5B;AACH,OAJD,MAIO,IAAI,OAAO,WAAW,CAAC,KAAnB,KAA6B,WAAjC,EAA8C;;AAEjD,aAAK,MAAL,CAAY,UAAZ,CAAuB,8BAA4B,WAAnD;AACA,QAAA,WAAW,GAAG,KAAK,cAAL,CAAoB,WAApB,EAAiC,WAAW,CAAC,SAA7C,EAAwD,WAAW,CAAC,qBAApE,CAAd;AACH,OAXD,C;;;AAcA,UAAI,CAAC,WAAL,EAAkB;AACd,cAAM,gBAAgB,CAAC,6BAAjB,EAAN;AACH;;AACD,UAAI,WAAW,CAAC,KAAhB,EAAuB;AACnB,QAAA,WAAW,CAAC,KAAZ;AACH;;AACD,WAAK,aAAL,GAAqB,WAArB;AACA,MAAA,MAAM,CAAC,gBAAP,CAAwB,cAAxB,EAAwC,KAAK,YAA7C;AAEA,aAAO,WAAP;AACH,KAxBD,CAwBE,OAAO,CAAP,EAAU;AACR,WAAK,MAAL,CAAY,KAAZ,CAAkB,yBAA0B,CAAe,CAAC,OAA5D;AACA,WAAK,cAAL,CAAoB,wBAApB,CAA6C,KAA7C;AACA,YAAM,gBAAgB,CAAC,sBAAjB,CAAyC,CAAe,CAAC,QAAhB,EAAzC,CAAN;AACH;AACJ,GA9BD;AAgCA;;;;;;AAMG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,WAAf,EAAoC,SAApC,EAAuD,qBAAvD,EAAmG;;AAC/F;;;AAGG;;;AACH,QAAM,OAAO,GAAG,MAAM,CAAC,UAAP,GAAoB,MAAM,CAAC,UAA3B,GAAwC,MAAM,CAAC,OAA/D;AACA,QAAM,MAAM,GAAG,MAAM,CAAC,SAAP,GAAmB,MAAM,CAAC,SAA1B,GAAsC,MAAM,CAAC,OAA5D;AACA;;;AAGG;;AACH,QAAM,QAAQ,GAAG,MAAM,CAAC,UAAP,IAAqB,QAAQ,CAAC,eAAT,CAAyB,WAA9C,IAA6D,QAAQ,CAAC,IAAT,CAAc,WAA5F;AACA,QAAM,SAAS,GAAG,MAAM,CAAC,WAAP,IAAsB,QAAQ,CAAC,eAAT,CAAyB,YAA/C,IAA+D,QAAQ,CAAC,IAAT,CAAc,YAA/F;AAEA,QAAI,KAAK,GAAG,CAAA,EAAA,GAAA,qBAAqB,CAAC,SAAtB,MAA+B,IAA/B,IAA+B,EAAA,KAAA,KAAA,CAA/B,GAA+B,KAAA,CAA/B,GAA+B,EAAA,CAAE,KAA7C;AACA,QAAI,MAAM,GAAG,CAAA,EAAA,GAAA,qBAAqB,CAAC,SAAtB,MAA+B,IAA/B,IAA+B,EAAA,KAAA,KAAA,CAA/B,GAA+B,KAAA,CAA/B,GAA+B,EAAA,CAAE,MAA9C;AACA,QAAI,GAAG,GAAG,CAAA,EAAA,GAAA,qBAAqB,CAAC,aAAtB,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,KAAA,CAAnC,GAAmC,EAAA,CAAE,GAA/C;AACA,QAAI,IAAI,GAAG,CAAA,EAAA,GAAA,qBAAqB,CAAC,aAAtB,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,KAAA,CAAnC,GAAmC,EAAA,CAAE,IAAhD;;AAEA,QAAI,CAAC,KAAD,IAAU,KAAK,GAAG,CAAlB,IAAuB,KAAK,GAAG,QAAnC,EAA6C;AACzC,WAAK,MAAL,CAAY,OAAZ,CAAoB,0EAApB;AACA,MAAA,KAAK,GAAG,gBAAgB,CAAC,WAAzB;AACH;;AAED,QAAI,CAAC,MAAD,IAAW,MAAM,GAAG,CAApB,IAAyB,MAAM,GAAG,SAAtC,EAAiD;AAC7C,WAAK,MAAL,CAAY,OAAZ,CAAoB,4EAApB;AACA,MAAA,MAAM,GAAG,gBAAgB,CAAC,YAA1B;AACH;;AAED,QAAI,CAAC,GAAD,IAAQ,GAAG,GAAG,CAAd,IAAmB,GAAG,GAAG,SAA7B,EAAwC;AACpC,WAAK,MAAL,CAAY,OAAZ,CAAoB,+EAApB;AACA,MAAA,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAc,SAAS,GAAG,CAAb,GAAmB,gBAAgB,CAAC,YAAjB,GAAgC,CAApD,GAA0D,MAAtE,CAAN;AACH;;AAED,QAAI,CAAC,IAAD,IAAS,IAAI,GAAG,CAAhB,IAAqB,IAAI,GAAG,QAAhC,EAA0C;AACtC,WAAK,MAAL,CAAY,OAAZ,CAAoB,iFAApB;AACA,MAAA,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAc,QAAQ,GAAG,CAAZ,GAAkB,gBAAgB,CAAC,WAAjB,GAA+B,CAAlD,GAAwD,OAApE,CAAP;AACH;;AAED,WAAO,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,SAAzB,EAAoC,WAAS,KAAT,GAAc,WAAd,GAA0B,MAA1B,GAAyC,QAAzC,GAAyC,GAAzC,GAA4C,SAA5C,GAAsD,IAAtD,GAA0D,kBAA9F,CAAP;AACH,GAxCD;AA0CA;;AAEG;;;AACH,EAAA,WAAY,CAAA,SAAZ,CAAY,YAAZ,GAAA,UAAa,CAAb,EAAqB;AACjB,SAAK,cAAL,CAAoB,6BAApB,CAAkD,eAAe,CAAC,KAAlE;;AACA,QAAI,KAAK,aAAT,EAAwB;AACpB,WAAK,aAAL,CAAmB,KAAnB;AACH,KAJgB,C;;;AAMjB,IAAA,CAAC,CAAC,cAAF;AACH,GAPD;AASA;;;AAGG;;;AACH,EAAA,WAAU,CAAA,SAAV,CAAU,UAAV,GAAA,UAAW,WAAX,EAA+B;AAC3B,QAAI,WAAJ,EAAiB;;AAEb,MAAA,WAAW,CAAC,KAAZ;AACH,KAJ0B,C;;;AAM3B,IAAA,MAAM,CAAC,mBAAP,CAA2B,cAA3B,EAA2C,KAAK,YAAhD,EAN2B,C;;AAS3B,SAAK,cAAL,CAAoB,wBAApB,CAA6C,KAA7C;AACH,GAVD;AAYA;;;;AAIG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,MAAlB,EAAyC,SAAzC,EAA0D;AACtD,WAAU,gBAAgB,CAAC,iBAAjB,GAAsC,GAAtC,GAAsC,KAAK,MAAL,CAAY,IAAZ,CAAiB,QAAvD,GAA+D,GAA/D,GAAmE,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAnE,GAAmF,GAAnF,GAAuF,SAAvF,GAAoG,GAApG,GAAoG,KAAK,aAAnH;AACH,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,WAAuB,CAAA,SAAvB,CAAuB,uBAAvB,GAAA,UAAwB,OAAxB,EAAwD;AACpD,QAAM,aAAa,GAAG,OAAO,CAAC,OAAR,IAAmB,OAAO,CAAC,OAAR,CAAgB,aAAzD;AACA,WAAU,gBAAgB,CAAC,iBAAjB,GAAsC,GAAtC,GAAsC,KAAK,MAAL,CAAY,IAAZ,CAAiB,QAAvD,GAAmE,GAAnE,GAAmE,aAAnE,GAAgF,GAAhF,GAAoF,KAAK,aAAnG;AACH,GAHD;;AAIJ,SAAC,WAAD;AAhgBA,CAAA,CAAiC,yBAAjC,CAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, ThrottlingUtils, CommonEndSessionRequest, UrlString, AuthError, OIDC_DEFAULT_SCOPES, Constants, ProtocolUtils, ServerAuthorizationCodeResponse, PerformanceEvents, StringUtils, IPerformanceClient, Logger, ICrypto } from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { EventType } from \"../event/EventType\";\r\nimport { InteractionType, ApiId, BrowserConstants } from \"../utils/BrowserConstants\";\r\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\r\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { InteractionHandler, InteractionParams } from \"../interaction_handler/InteractionHandler\";\r\nimport { PopupWindowAttributes } from \"../request/PopupWindowAttributes\";\r\n\r\nexport type PopupParams = InteractionParams & {\r\n    popup?: Window|null;\r\n    popupName: string;\r\n    popupWindowAttributes: PopupWindowAttributes\r\n};\r\n\r\nexport class PopupClient extends StandardInteractionClient {\r\n    private currentWindow: Window | undefined;\r\n    protected nativeStorage: BrowserCacheManager;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\r\n        // Properly sets this reference for the unload event.\r\n        this.unloadWindow = this.unloadWindow.bind(this);\r\n        this.nativeStorage = nativeStorageImpl;\r\n    }\r\n\r\n    /**\r\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n     * @param request\r\n     */\r\n    acquireToken(request: PopupRequest): Promise<AuthenticationResult> {\r\n        try {\r\n            const popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\r\n            const popupWindowAttributes = request.popupWindowAttributes || {};\r\n\r\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\r\n            if (this.config.system.asyncPopups) {\r\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\r\n                // Passes on popup position and dimensions if in request\r\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\r\n            } else {\r\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\r\n                this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\r\n                const popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\r\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\r\n            }\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n     * @param logoutRequest\r\n     */\r\n    logout(logoutRequest?: EndSessionPopupRequest): Promise<void> {\r\n        try {\r\n            this.logger.verbose(\"logoutPopup called\");\r\n            const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\r\n\r\n            const popupName = this.generateLogoutPopupName(validLogoutRequest);\r\n            const authority = logoutRequest && logoutRequest.authority;\r\n            const mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\r\n            const popupWindowAttributes = logoutRequest?.popupWindowAttributes || {};\r\n\r\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\r\n            if (this.config.system.asyncPopups) {\r\n                this.logger.verbose(\"asyncPopups set to true\");\r\n                // Passes on popup position and dimensions if in request\r\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\r\n            } else {\r\n                // asyncPopups flag is set to false. Opens popup before logging out.\r\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\r\n                const popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\r\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\r\n            }\r\n        } catch (e) {\r\n            // Since this function is synchronous we need to reject\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n     * @param validRequest\r\n     * @param popupName\r\n     * @param popup\r\n     * @param popupWindowAttributes\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    protected async acquireTokenPopupAsync(request: PopupRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, popup?: Window|null): Promise<AuthenticationResult> {\r\n        this.logger.verbose(\"acquireTokenPopupAsync called\");\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n        const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Popup);\r\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\r\n\r\n        try {\r\n            // Create auth code request and generate PKCE params\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\r\n\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\r\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            const isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\r\n            // Start measurement for server calls with native brokering enabled\r\n            let fetchNativeAccountIdMeasurement;\r\n            if (isNativeBroker) {\r\n                fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\r\n            }\r\n\r\n            // Create acquire token url.\r\n            const navigateUrl = await authClient.getAuthCodeUrl({\r\n                ...validRequest,\r\n                nativeBroker: isNativeBroker\r\n            });\r\n\r\n            // Create popup interaction handler.\r\n            const interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\r\n\r\n            // Show the UI once the url has been created. Get the window handle for the popup.\r\n            const popupParameters: PopupParams = {\r\n                popup,\r\n                popupName,\r\n                popupWindowAttributes\r\n            };\r\n            const popupWindow: Window = this.initiateAuthRequest(navigateUrl, popupParameters);\r\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\r\n\r\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\r\n            const hash = await this.monitorPopupForHash(popupWindow);\r\n            // Deserialize hash fragment response parameters.\r\n            const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\r\n            const state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Popup, validRequest.correlationId);\r\n            // Remove throttle if it exists\r\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\r\n\r\n            if (serverParams.accountId) {\r\n                this.logger.verbose(\"Account id found in hash, calling WAM for token\");\r\n                // end measurement for server call with native brokering enabled\r\n                if (fetchNativeAccountIdMeasurement) {\r\n                    fetchNativeAccountIdMeasurement.endMeasurement({\r\n                        success: true,\r\n                        isNativeBroker: true\r\n                    });\r\n                }\r\n\r\n                if (!this.nativeMessageHandler) {\r\n                    throw BrowserAuthError.createNativeConnectionNotEstablishedError();\r\n                }\r\n                const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\r\n                const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\r\n                return nativeInteractionClient.acquireToken({\r\n                    ...validRequest,\r\n                    state: userRequestState,\r\n                    prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\r\n                }).finally(() => {\r\n                    this.browserStorage.cleanRequestByState(state);\r\n                });\r\n            }\r\n\r\n            // Handle response from hash string.\r\n            const result = await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\r\n\r\n            return result;\r\n        } catch (e) {\r\n            if (popup) {\r\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\r\n                popup.close();\r\n            }\r\n\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByState(validRequest.state);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param validRequest\r\n     * @param popupName\r\n     * @param requestAuthority\r\n     * @param popup\r\n     * @param mainWindowRedirectUri\r\n     * @param popupWindowAttributes\r\n     */\r\n    protected async logoutPopupAsync(validRequest: CommonEndSessionRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, requestAuthority?: string, popup?: Window|null, mainWindowRedirectUri?: string): Promise<void> {\r\n        this.logger.verbose(\"logoutPopupAsync called\");\r\n        this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\r\n\r\n        try {\r\n            // Clear cache on logout\r\n            await this.clearCacheOnLogout(validRequest.account);\r\n\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validRequest.correlationId);\r\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, requestAuthority);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create logout string and navigate user window to logout.\r\n            const logoutUri: string = authClient.getLogoutUri(validRequest);\r\n\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\r\n\r\n            // Open the popup window to requestUrl.\r\n            const popupWindow = this.openPopup(logoutUri, {popupName, popupWindowAttributes, popup});\r\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\r\n\r\n            await this.waitForLogoutPopup(popupWindow);\r\n\r\n            if (mainWindowRedirectUri) {\r\n                const navigationOptions: NavigationOptions = {\r\n                    apiId: ApiId.logoutPopup,\r\n                    timeout: this.config.system.redirectNavigationTimeout,\r\n                    noHistory: false\r\n                };\r\n                const absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\r\n\r\n                this.logger.verbose(\"Redirecting main window to url specified in the request\");\r\n                this.logger.verbosePii(`Redirecting main window to: ${absoluteUrl}`);\r\n                this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\r\n            } else {\r\n                this.logger.verbose(\"No main window navigation requested\");\r\n            }\r\n        } catch (e) {\r\n            if (popup) {\r\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\r\n                popup.close();\r\n            }\r\n\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n\r\n            this.browserStorage.setInteractionInProgress(false);\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e);\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n\r\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\r\n    }\r\n\r\n    /**\r\n     * Opens a popup window with given request Url.\r\n     * @param requestUrl\r\n     */\r\n    initiateAuthRequest(requestUrl: string, params: PopupParams): Window {\r\n        // Check that request url is not empty.\r\n        if (!StringUtils.isEmpty(requestUrl)) {\r\n            this.logger.infoPii(`Navigate to: ${requestUrl}`);\r\n            // Open the popup window to requestUrl.\r\n            return this.openPopup(requestUrl, params);\r\n        } else {\r\n            // Throw error if request URL is empty.\r\n            this.logger.error(\"Navigate url is empty\");\r\n            throw BrowserAuthError.createEmptyNavigationUriError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Monitors a window until it loads a url with the same origin.\r\n     * @param popupWindow - window that is being monitored\r\n     * @param timeout - timeout for processing hash once popup is redirected back to application\r\n     */\r\n    monitorPopupForHash(popupWindow: Window): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            /*\r\n             * Polling for popups needs to be tick-based,\r\n             * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).\r\n             */\r\n            const maxTicks = this.config.system.windowHashTimeout / this.config.system.pollIntervalMilliseconds;\r\n            let ticks = 0;\r\n\r\n            this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\r\n\r\n            const intervalId = setInterval(() => {\r\n                // Window is closed\r\n                if (popupWindow.closed) {\r\n                    this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\r\n                    this.cleanPopup();\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createUserCancelledError());\r\n                    return;\r\n                }\r\n\r\n                let href: string = Constants.EMPTY_STRING;\r\n                let hash: string = Constants.EMPTY_STRING;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = popupWindow.location.href;\r\n                    hash = popupWindow.location.hash;\r\n                } catch (e) {}\r\n\r\n                // Don't process blank pages or cross domain\r\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n\r\n                this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\r\n\r\n                /*\r\n                 * Only run clock when we are on same domain for popups\r\n                 * as popup operations can take a long time.\r\n                 */\r\n                ticks++;\r\n\r\n                if (hash) {\r\n                    this.logger.verbose(\"PopupHandler.monitorPopupForHash - found hash in url\");\r\n                    clearInterval(intervalId);\r\n                    this.cleanPopup(popupWindow);\r\n\r\n                    if (UrlString.hashContainsKnownProperties(hash)) {\r\n                        this.logger.verbose(\"PopupHandler.monitorPopupForHash - hash contains known properties, returning.\");\r\n                        resolve(hash);\r\n                    } else {\r\n                        this.logger.error(\"PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.\");\r\n                        this.logger.errorPii(`PopupHandler.monitorPopupForHash - hash found: ${hash}`);\r\n                        reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\r\n                    }\r\n                } else if (ticks > maxTicks) {\r\n                    this.logger.error(\"PopupHandler.monitorPopupForHash - unable to find hash in url, timing out\");\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createMonitorPopupTimeoutError());\r\n                }\r\n            }, this.config.system.pollIntervalMilliseconds);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Waits for user interaction in logout popup window\r\n     * @param popupWindow\r\n     * @returns\r\n     */\r\n    waitForLogoutPopup(popupWindow: Window): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            this.logger.verbose(\"PopupHandler.waitForLogoutPopup - polling started\");\r\n\r\n            const intervalId = setInterval(() => {\r\n                // Window is closed\r\n                if (popupWindow.closed) {\r\n                    this.logger.error(\"PopupHandler.waitForLogoutPopup - window closed\");\r\n                    this.cleanPopup();\r\n                    clearInterval(intervalId);\r\n                    resolve();\r\n                }\r\n\r\n                let href: string = Constants.EMPTY_STRING;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = popupWindow.location.href;\r\n                } catch (e) {}\r\n\r\n                // Don't process blank pages or cross domain\r\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n\r\n                this.logger.verbose(\"PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.\");\r\n\r\n                clearInterval(intervalId);\r\n                this.cleanPopup(popupWindow);\r\n                resolve();\r\n            }, this.config.system.pollIntervalMilliseconds);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @param popupWindowAttributes\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    openPopup(urlNavigate: string, popupParams: PopupParams): Window {\r\n        try {\r\n            let popupWindow;\r\n            // Popup window passed in, setting url to navigate to\r\n            if (popupParams.popup) {\r\n                popupWindow = popupParams.popup;\r\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\r\n                popupWindow.location.assign(urlNavigate);\r\n            } else if (typeof popupParams.popup === \"undefined\") {\r\n                // Popup will be undefined if it was not passed in\r\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\r\n                popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);\r\n            }\r\n\r\n            // Popup will be null if popups are blocked\r\n            if (!popupWindow) {\r\n                throw BrowserAuthError.createEmptyWindowCreatedError();\r\n            }\r\n            if (popupWindow.focus) {\r\n                popupWindow.focus();\r\n            }\r\n            this.currentWindow = popupWindow;\r\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\r\n\r\n            return popupWindow;\r\n        } catch (e) {\r\n            this.logger.error(\"error opening popup \" + (e as AuthError).message);\r\n            this.browserStorage.setInteractionInProgress(false);\r\n            throw BrowserAuthError.createPopupWindowError((e as AuthError).toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to set popup window dimensions and position\r\n     * @param urlNavigate\r\n     * @param popupName\r\n     * @param popupWindowAttributes\r\n     * @returns\r\n     */\r\n    openSizedPopup(urlNavigate: string, popupName: string, popupWindowAttributes: PopupWindowAttributes): Window|null {\r\n        /**\r\n         * adding winLeft and winTop to account for dual monitor\r\n         * using screenLeft and screenTop for IE8 and earlier\r\n         */\r\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\r\n        /**\r\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n         * using document.documentElement.clientWidth for IE8 and earlier\r\n         */\r\n        const winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n        const winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n\r\n        let width = popupWindowAttributes.popupSize?.width;\r\n        let height = popupWindowAttributes.popupSize?.height;\r\n        let top = popupWindowAttributes.popupPosition?.top;\r\n        let left = popupWindowAttributes.popupPosition?.left;\r\n\r\n        if (!width || width < 0 || width > winWidth) {\r\n            this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\r\n            width = BrowserConstants.POPUP_WIDTH;\r\n        }\r\n\r\n        if (!height || height < 0 || height > winHeight) {\r\n            this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\r\n            height = BrowserConstants.POPUP_HEIGHT;\r\n        }\r\n\r\n        if (!top || top < 0 || top > winHeight) {\r\n            this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\r\n            top = Math.max(0, ((winHeight / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\r\n        }\r\n\r\n        if (!left || left < 0 || left > winWidth) {\r\n            this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\r\n            left = Math.max(0, ((winWidth / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\r\n        }\r\n\r\n        return window.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);\r\n    }\r\n\r\n    /**\r\n     * Event callback to unload main window.\r\n     */\r\n    unloadWindow(e: Event): void {\r\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\r\n        if (this.currentWindow) {\r\n            this.currentWindow.close();\r\n        }\r\n        // Guarantees browser unload will happen, so no other errors will be thrown.\r\n        e.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Closes popup, removes any state vars created during popup calls.\r\n     * @param popupWindow\r\n     */\r\n    cleanPopup(popupWindow?: Window): void {\r\n        if (popupWindow) {\r\n            // Close window.\r\n            popupWindow.close();\r\n        }\r\n        // Remove window unload function\r\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\r\n\r\n        // Interaction is completed - remove interaction status.\r\n        this.browserStorage.setInteractionInProgress(false);\r\n    }\r\n\r\n    /**\r\n     * Generates the name for the popup based on the client id and request\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    generatePopupName(scopes: Array<string>, authority: string): string {\r\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${scopes.join(\"-\")}.${authority}.${this.correlationId}`;\r\n    }\r\n\r\n    /**\r\n     * Generates the name for the popup based on the client id and request for logouts\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    generateLogoutPopupName(request: CommonEndSessionRequest): string {\r\n        const homeAccountId = request.account && request.account.homeAccountId;\r\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}