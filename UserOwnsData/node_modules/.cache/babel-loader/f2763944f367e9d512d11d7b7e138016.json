{"ast":null,"code":"var _jsxFileName = \"/Users/darshitjasani/Documents/Code/GitHub/PowerBI-Developer-Samples/React-TS/Embed for your organization/UserOwnsData/src/App.tsx\";\n// ----------------------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// ----------------------------------------------------------------------------\nimport { InteractionType, EventType } from \"@azure/msal-browser\";\nimport { MsalContext } from \"@azure/msal-react\";\nimport React from \"react\";\nimport { service, factories, models } from \"powerbi-client\";\nimport \"./App.css\";\nimport * as config from \"./Config\";\nconst powerbi = new service.Service(factories.hpmFactory, factories.wpmpFactory, factories.routerFactory);\nlet accessToken = \"\";\nlet embedUrl = \"\";\nlet reportContainer;\nlet reportRef;\nlet loading; // eslint-disable-next-line @typescript-eslint/no-empty-interface\n\n;\n;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accessToken: \"\",\n      embedUrl: \"\",\n      error: []\n    };\n    reportRef = React.createRef(); // Report container\n\n    loading = /*#__PURE__*/React.createElement(\"div\", {\n      id: \"reportContainer\",\n      ref: reportRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, \"Loading the report...\");\n  } // React function\n\n\n  render() {\n    if (this.state.error.length) {\n      // Cleaning the report container contents and rendering the error message in multiple lines\n      reportContainer.textContent = \"\";\n      this.state.error.forEach(line => {\n        reportContainer.appendChild(document.createTextNode(line));\n        reportContainer.appendChild(document.createElement(\"br\"));\n      });\n    } else if (this.state.accessToken !== \"\" && this.state.embedUrl !== \"\") {\n      const embedConfiguration = {\n        type: \"report\",\n        tokenType: models.TokenType.Aad,\n        accessToken,\n        embedUrl,\n        id: process.env.reportId\n        /*\n        // Enable this setting to remove gray shoulders from embedded report\n        settings: {\n            background: models.BackgroundType.Transparent\n        }\n        */\n\n      };\n      const report = powerbi.embed(reportContainer, embedConfiguration);\n      const hehe = process.env.workspaceId;\n      console.log(hehe); // Clear any other loaded handler events\n\n      report.off(\"loaded\"); // Triggers when a content schema is successfully loaded\n\n      report.on(\"loaded\", function () {\n        console.log(\"Report load successful\");\n      }); // Clear any other rendered handler events\n\n      report.off(\"rendered\"); // Triggers when a content is successfully embedded in UI\n\n      report.on(\"rendered\", function () {\n        console.log(\"Report render successful\");\n      }); // Clear any other error handler event\n\n      report.off(\"error\"); // Below patch of code is for handling errors that occur during embedding\n\n      report.on(\"error\", function (event) {\n        const errorMsg = event.detail; // Use errorMsg variable to log error in any destination of choice\n\n        console.error(errorMsg);\n      });\n    }\n\n    return loading;\n  } // React function\n\n\n  componentDidMount() {\n    if (reportRef !== null) {\n      reportContainer = reportRef[\"current\"];\n    } // User input - null check\n\n\n    if (process.env.workspaceId === \"\" || process.env.reportId === \"\") {\n      this.setState({\n        error: [\"Please assign values to workspace Id and report Id in Config.ts file\"]\n      });\n      return;\n    }\n\n    this.authenticate();\n  } // React function\n\n\n  componentDidUpdate() {\n    this.authenticate();\n  } // React function\n\n\n  componentWillUnmount() {\n    powerbi.reset(reportContainer);\n  } // Authenticating to get the access token\n\n\n  authenticate() {\n    const msalInstance = this.context.instance;\n    const msalAccounts = this.context.accounts;\n    const msalInProgress = this.context.inProgress;\n    const isAuthenticated = this.context.accounts.length > 0;\n\n    if (this.state.error.length > 0) {\n      return;\n    }\n\n    const eventCallback = msalInstance.addEventCallback(message => {\n      if (message.eventType === EventType.LOGIN_SUCCESS && !accessToken) {\n        var _payload$account, _payload$account2;\n\n        const payload = message.payload;\n        const name = ((_payload$account = payload.account) === null || _payload$account === void 0 ? void 0 : _payload$account.name) ? (_payload$account2 = payload.account) === null || _payload$account2 === void 0 ? void 0 : _payload$account2.name : \"\";\n        accessToken = payload.accessToken;\n        this.setUsername(name);\n        this.tryRefreshUserPermissions();\n      }\n    });\n    const loginRequest = {\n      scopes: config.scopeBase,\n      account: msalAccounts[0]\n    };\n\n    if (!isAuthenticated && msalInProgress === InteractionType.None) {\n      msalInstance.loginRedirect(loginRequest);\n    } else if (isAuthenticated && accessToken && !embedUrl) {\n      this.getembedUrl();\n      msalInstance.removeEventCallback(eventCallback);\n    } else if (isAuthenticated && !accessToken && !embedUrl && msalInProgress === InteractionType.None) {\n      this.setUsername(msalAccounts[0].name); // get access token silently from cached id-token\n\n      msalInstance.acquireTokenSilent(loginRequest).then(response => {\n        accessToken = response.accessToken;\n        this.getembedUrl();\n      }).catch(error => {\n        // Refresh access token silently from cached id-token\n        // Makes the call to handleredirectcallback\n        if (error.errorCode === \"consent_required\" || error.errorCode === \"interaction_required\" || error.errorCode === \"login_required\") {\n          msalInstance.acquireTokenRedirect(loginRequest);\n        } else if (error.errorCode === '429') {\n          this.setState({\n            error: [\"Our Service Token Server (STS) is overloaded, please try again in sometime\"]\n          });\n        } else {\n          this.setState({\n            error: [\"There was some problem fetching the access token\" + error.toString()]\n          });\n        }\n      });\n    }\n  } // Power BI REST API call to refresh User Permissions in Power BI\n  // Refreshes user permissions and makes sure the user permissions are fully updated\n  // https://docs.microsoft.com/rest/api/power-bi/users/refreshuserpermissions\n\n\n  tryRefreshUserPermissions() {\n    fetch(process.env.powerBiApiUrl + \"v1.0/myorg/RefreshUserPermissions\", {\n      headers: {\n        \"Authorization\": \"Bearer \" + accessToken\n      },\n      method: \"POST\"\n    }).then(function (response) {\n      if (response.ok) {\n        console.log(\"User permissions refreshed successfully.\");\n      } else {\n        // Too many requests in one hour will cause the API to fail\n        if (response.status === 429) {\n          console.error(\"Permissions refresh will be available in up to an hour.\");\n        } else {\n          console.error(response);\n        }\n      }\n    }).catch(function (error) {\n      console.error(\"Failure in making API call.\" + error);\n    });\n  } // Power BI REST API call to get the embed URL of the report\n\n\n  getembedUrl() {\n    const thisObj = this;\n    fetch(process.env.powerBiApiUrl + \"v1.0/myorg/groups/\" + process.env.workspaceId + \"/reports/\" + process.env.reportId, {\n      headers: {\n        \"Authorization\": \"Bearer \" + accessToken\n      },\n      method: \"GET\"\n    }).then(function (response) {\n      const errorMessage = [];\n      errorMessage.push(\"Error occurred while fetching the embed URL of the report\");\n      errorMessage.push(\"Request Id: \" + response.headers.get(\"requestId\"));\n      response.json().then(function (body) {\n        // Successful response\n        if (response.ok) {\n          embedUrl = body[\"embedUrl\"];\n          thisObj.setState({\n            accessToken: accessToken,\n            embedUrl: embedUrl\n          });\n        } // If error message is available\n        else {\n            errorMessage.push(\"Error \" + response.status + \": \" + body.error.code);\n            thisObj.setState({\n              error: errorMessage\n            });\n          }\n      }).catch(function () {\n        errorMessage.push(\"Error \" + response.status + \":  An error has occurred\");\n        thisObj.setState({\n          error: errorMessage\n        });\n      });\n    }).catch(function (error) {\n      // Error in making the API call\n      thisObj.setState({\n        error: error\n      });\n    });\n  } // Show username in the UI\n\n\n  setUsername(username) {\n    const welcome = document.getElementById(\"welcome\"); // if (welcome !== null)\n    //     welcome.innerText = \"Welcome, \" + username;\n  }\n\n}\n\nApp.contextType = MsalContext;\nexport default App;","map":{"version":3,"sources":["/Users/darshitjasani/Documents/Code/GitHub/PowerBI-Developer-Samples/React-TS/Embed for your organization/UserOwnsData/src/App.tsx"],"names":["InteractionType","EventType","MsalContext","React","service","factories","models","config","powerbi","Service","hpmFactory","wpmpFactory","routerFactory","accessToken","embedUrl","reportContainer","reportRef","loading","App","Component","constructor","props","state","error","createRef","render","length","textContent","forEach","line","appendChild","document","createTextNode","createElement","embedConfiguration","type","tokenType","TokenType","Aad","id","process","env","reportId","report","embed","hehe","workspaceId","console","log","off","on","event","errorMsg","detail","componentDidMount","setState","authenticate","componentDidUpdate","componentWillUnmount","reset","msalInstance","context","instance","msalAccounts","accounts","msalInProgress","inProgress","isAuthenticated","eventCallback","addEventCallback","message","eventType","LOGIN_SUCCESS","payload","name","account","setUsername","tryRefreshUserPermissions","loginRequest","scopes","scopeBase","None","loginRedirect","getembedUrl","removeEventCallback","acquireTokenSilent","then","response","catch","errorCode","acquireTokenRedirect","toString","fetch","powerBiApiUrl","headers","method","ok","status","thisObj","errorMessage","push","get","json","body","code","username","welcome","getElementById","contextType"],"mappings":"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","sourcesContent":["// ----------------------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// ----------------------------------------------------------------------------\n\nimport { AuthenticationResult, InteractionType, EventMessage, EventType, AuthError } from \"@azure/msal-browser\";\nimport { MsalContext } from \"@azure/msal-react\";\nimport React from \"react\";\nimport { service, factories, models, IEmbedConfiguration } from \"powerbi-client\";\nimport \"./App.css\";\nimport * as config from \"./Config\";\n\nconst powerbi = new service.Service(factories.hpmFactory, factories.wpmpFactory, factories.routerFactory);\n\nlet accessToken = \"\";\nlet embedUrl = \"\";\nlet reportContainer: HTMLElement;\nlet reportRef: React.Ref<HTMLDivElement>;\nlet loading: JSX.Element;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface AppProps { };\ninterface AppState { accessToken: string; embedUrl: string; error: string[] };\n\nclass App extends React.Component<AppProps, AppState> {\n    static contextType = MsalContext;\n\n    constructor(props: AppProps) {\n        super(props);\n\n        this.state = { accessToken: \"\", embedUrl: \"\", error: [] };\n\n        reportRef = React.createRef();\n\n        // Report container\n        loading = (\n            <div\n                id=\"reportContainer\"\n                ref={reportRef} >\n                Loading the report...\n            </div>\n        );\n    }\n\n    // React function\n    render(): JSX.Element {\n\n        if (this.state.error.length) {\n\n            // Cleaning the report container contents and rendering the error message in multiple lines\n            reportContainer.textContent = \"\";\n            this.state.error.forEach(line => {\n                reportContainer.appendChild(document.createTextNode(line));\n                reportContainer.appendChild(document.createElement(\"br\"));\n            });\n        }\n        else if (this.state.accessToken !== \"\" && this.state.embedUrl !== \"\") {\n\n            const embedConfiguration: IEmbedConfiguration = {\n                type: \"report\",\n                tokenType: models.TokenType.Aad,\n                accessToken,\n                embedUrl,\n                id: process.env.reportId,\n                /*\n                // Enable this setting to remove gray shoulders from embedded report\n                settings: {\n                    background: models.BackgroundType.Transparent\n                }\n                */\n            };\n\n            const report = powerbi.embed(reportContainer, embedConfiguration);\n            const hehe = process.env.workspaceId;\n            console.log(hehe);\n\n            // Clear any other loaded handler events\n            report.off(\"loaded\");\n\n            // Triggers when a content schema is successfully loaded\n            report.on(\"loaded\", function () {\n                console.log(\"Report load successful\");\n            });\n\n            // Clear any other rendered handler events\n            report.off(\"rendered\");\n\n            // Triggers when a content is successfully embedded in UI\n            report.on(\"rendered\", function () {\n                console.log(\"Report render successful\");\n            });\n\n            // Clear any other error handler event\n            report.off(\"error\");\n\n            // Below patch of code is for handling errors that occur during embedding\n            report.on(\"error\", function (event) {\n                const errorMsg = event.detail;\n\n                // Use errorMsg variable to log error in any destination of choice\n                console.error(errorMsg);\n            });\n        }\n\n        return loading;\n    }\n\n    // React function\n    componentDidMount(): void {\n        if (reportRef !== null) {\n            reportContainer = reportRef[\"current\"];\n        }\n\n        // User input - null check\n        if (process.env.workspaceId === \"\" || process.env.reportId === \"\") {\n            this.setState({ error: [\"Please assign values to workspace Id and report Id in Config.ts file\"] });\n            return;\n        }\n\n        this.authenticate();\n    }\n\n    // React function\n    componentDidUpdate(): void {\n        this.authenticate();\n    }\n\n    // React function\n    componentWillUnmount(): void {\n        powerbi.reset(reportContainer);\n    }\n\n    // Authenticating to get the access token\n    authenticate(): void {\n        const msalInstance = this.context.instance;\n        const msalAccounts = this.context.accounts;\n        const msalInProgress = this.context.inProgress;\n        const isAuthenticated = this.context.accounts.length > 0;\n\n        if (this.state.error.length > 0) {\n            return;\n        }\n\n        const eventCallback = msalInstance.addEventCallback((message: EventMessage) => {\n            if (message.eventType === EventType.LOGIN_SUCCESS && !accessToken) {\n                const payload = message.payload as AuthenticationResult;\n                const name: string = payload.account?.name ? payload.account?.name: \"\";\n\n                accessToken = payload.accessToken;\n                this.setUsername(name);\n                this.tryRefreshUserPermissions();\n            }\n        });\n\n        const loginRequest = {\n            scopes: config.scopeBase,\n            account: msalAccounts[0]\n        };\n\n        if (!isAuthenticated && msalInProgress === InteractionType.None) {\n            msalInstance.loginRedirect(loginRequest);\n        }\n        else if (isAuthenticated && accessToken && !embedUrl) {\n            this.getembedUrl();\n            msalInstance.removeEventCallback(eventCallback);\n        }\n        else if (isAuthenticated && !accessToken && !embedUrl && msalInProgress === InteractionType.None) {\n            this.setUsername(msalAccounts[0].name);\n\n            // get access token silently from cached id-token\n            msalInstance.acquireTokenSilent(loginRequest).then((response: AuthenticationResult) => {\n                accessToken = response.accessToken;\n                this.getembedUrl();\n            }).catch((error: AuthError) => {\n                // Refresh access token silently from cached id-token\n                // Makes the call to handleredirectcallback\n                if (error.errorCode === \"consent_required\" || error.errorCode === \"interaction_required\" || error.errorCode === \"login_required\") {\n                    msalInstance.acquireTokenRedirect(loginRequest);\n                }\n                else if (error.errorCode === '429') {\n                    this.setState({ error: [\"Our Service Token Server (STS) is overloaded, please try again in sometime\"] });\n                }\n                else {\n                    this.setState({ error: [\"There was some problem fetching the access token\" + error.toString()] });\n                }\n            });\n        }\n    }\n\n    // Power BI REST API call to refresh User Permissions in Power BI\n    // Refreshes user permissions and makes sure the user permissions are fully updated\n    // https://docs.microsoft.com/rest/api/power-bi/users/refreshuserpermissions\n    tryRefreshUserPermissions(): void {\n        fetch(process.env.powerBiApiUrl + \"v1.0/myorg/RefreshUserPermissions\", {\n            headers: {\n                \"Authorization\": \"Bearer \" + accessToken\n            },\n            method: \"POST\"\n        })\n        .then(function (response) {\n            if (response.ok) {\n                console.log(\"User permissions refreshed successfully.\");\n            } else {\n                // Too many requests in one hour will cause the API to fail\n                if (response.status === 429) {\n                    console.error(\"Permissions refresh will be available in up to an hour.\");\n                } else {\n                    console.error(response);\n                }\n            }\n        })\n        .catch(function (error) {\n            console.error(\"Failure in making API call.\" + error);\n        });\n    }\n\n    // Power BI REST API call to get the embed URL of the report\n    getembedUrl(): void {\n        const thisObj: this = this;\n\n        fetch(process.env.powerBiApiUrl + \"v1.0/myorg/groups/\" + process.env.workspaceId + \"/reports/\" + process.env.reportId, {\n            headers: {\n                \"Authorization\": \"Bearer \" + accessToken\n            },\n            method: \"GET\"\n        })\n            .then(function (response) {\n                const errorMessage: string[] = [];\n                errorMessage.push(\"Error occurred while fetching the embed URL of the report\")\n                errorMessage.push(\"Request Id: \" + response.headers.get(\"requestId\"));\n\n                response.json()\n                    .then(function (body) {\n                        // Successful response\n                        if (response.ok) {\n                            embedUrl = body[\"embedUrl\"];\n                            thisObj.setState({ accessToken: accessToken, embedUrl: embedUrl });\n                        }\n                        // If error message is available\n                        else {\n                            errorMessage.push(\"Error \" + response.status + \": \" + body.error.code);\n\n                            thisObj.setState({ error: errorMessage });\n                        }\n\n                    })\n                    .catch(function () {\n                        errorMessage.push(\"Error \" + response.status + \":  An error has occurred\");\n\n                        thisObj.setState({ error: errorMessage });\n                    });\n            })\n            .catch(function (error) {\n\n                // Error in making the API call\n                thisObj.setState({ error: error });\n            })\n    }\n\n    // Show username in the UI\n    setUsername(username: string): void {\n        const welcome = document.getElementById(\"welcome\");\n        // if (welcome !== null)\n        //     welcome.innerText = \"Welcome, \" + username;\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}