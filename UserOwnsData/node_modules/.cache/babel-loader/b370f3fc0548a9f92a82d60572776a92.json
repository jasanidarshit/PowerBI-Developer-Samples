{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError, PerformanceEvents, Constants } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\nimport { HybridSpaAuthorizationCodeClient } from './HybridSpaAuthorizationCodeClient.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentAuthCodeClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentAuthCodeClient, _super);\n\n  function SilentAuthCodeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n\n    _this.apiId = apiId;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n   * @param request\r\n   */\n\n\n  SilentAuthCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, serverTelemetryManager, authCodeRequest, clientConfig, authClient, silentHandler, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.trace(\"SilentAuthCodeClient.acquireToken called\"); // Auth code payload is required\n\n            if (!request.code) {\n              throw BrowserAuthError.createAuthCodeRequiredError();\n            } // Create silent request\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Silent)];\n\n          case 1:\n            silentRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            authCodeRequest = __assign(__assign({}, silentRequest), {\n              code: request.code\n            }); // Initialize the client\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, request.correlationId);\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, silentRequest.authority)];\n\n          case 3:\n            clientConfig = _a.sent();\n            authClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient); // Handle auth code parameters from request\n\n            return [2\n            /*return*/\n            , silentHandler.handleCodeResponseFromServer({\n              code: request.code,\n              msgraph_host: request.msGraphHost,\n              cloud_graph_host_name: request.cloudGraphHostName,\n              cloud_instance_host_name: request.cloudInstanceHostName\n            }, silentRequest.state, authClient.authority, this.networkClient, false)];\n\n          case 4:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentAuthCodeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n\n  return SilentAuthCodeClient;\n}(StandardInteractionClient);\n\nexport { SilentAuthCodeClient };","map":{"version":3,"sources":["../../src/interaction_client/SilentAuthCodeClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, ICrypto, Logger, CommonAuthorizationCodeRequest, AuthError, Constants, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\r\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\r\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\r\nimport { HybridSpaAuthorizationCodeClient } from \"./HybridSpaAuthorizationCodeClient\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\n\r\nexport class SilentAuthCodeClient extends StandardInteractionClient {\r\n    private apiId: ApiId;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, performanceClient: IPerformanceClient, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\r\n        this.apiId = apiId;\r\n    }\r\n\r\n    /**\r\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n     * @param request\r\n     */\r\n    async acquireToken(request: AuthorizationCodeRequest): Promise<AuthenticationResult> {\r\n        this.logger.trace(\"SilentAuthCodeClient.acquireToken called\");\r\n\r\n        // Auth code payload is required\r\n        if (!request.code) {\r\n            throw BrowserAuthError.createAuthCodeRequiredError();\r\n\r\n        }\r\n\r\n        // Create silent request\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest(request, InteractionType.Silent);\r\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\r\n\r\n        try {\r\n\r\n            // Create auth code request (PKCE not needed)\r\n            const authCodeRequest: CommonAuthorizationCodeRequest = {\r\n                ...silentRequest,\r\n                code: request.code\r\n            };\r\n\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, request.correlationId);\r\n            const clientConfig = await this.getClientConfiguration(serverTelemetryManager, silentRequest.authority);\r\n            const authClient: HybridSpaAuthorizationCodeClient = new HybridSpaAuthorizationCodeClient(clientConfig);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create silent handler\r\n            const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);\r\n\r\n            // Handle auth code parameters from request\r\n            return silentHandler.handleCodeResponseFromServer(\r\n                {\r\n                    code: request.code,\r\n                    msgraph_host: request.msGraphHost,\r\n                    cloud_graph_host_name: request.cloudGraphHostName,\r\n                    cloud_instance_host_name: request.cloudInstanceHostName\r\n                },\r\n                silentRequest.state,\r\n                authClient.authority,\r\n                this.networkClient,\r\n                false\r\n            );\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByState(silentRequest.state);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}