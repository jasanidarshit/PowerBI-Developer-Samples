{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BrowserPerformanceMeasurement =\n/** @class */\nfunction () {\n  function BrowserPerformanceMeasurement(name, correlationId) {\n    this.correlationId = correlationId;\n    this.measureName = BrowserPerformanceMeasurement.makeMeasureName(name, correlationId);\n    this.startMark = BrowserPerformanceMeasurement.makeStartMark(name, correlationId);\n    this.endMark = BrowserPerformanceMeasurement.makeEndMark(name, correlationId);\n  }\n\n  BrowserPerformanceMeasurement.makeMeasureName = function (name, correlationId) {\n    return \"msal.measure.\" + name + \".\" + correlationId;\n  };\n\n  BrowserPerformanceMeasurement.makeStartMark = function (name, correlationId) {\n    return \"msal.start.\" + name + \".\" + correlationId;\n  };\n\n  BrowserPerformanceMeasurement.makeEndMark = function (name, correlationId) {\n    return \"msal.end.\" + name + \".\" + correlationId;\n  };\n\n  BrowserPerformanceMeasurement.supportsBrowserPerformance = function () {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.mark === \"function\" && typeof window.performance.measure === \"function\" && typeof window.performance.clearMarks === \"function\" && typeof window.performance.clearMeasures === \"function\" && typeof window.performance.getEntriesByName === \"function\";\n  };\n  /**\r\n   * Flush browser marks and measurements.\r\n   * @param {string} correlationId\r\n   * @param {SubMeasurement} measurements\r\n   */\n\n\n  BrowserPerformanceMeasurement.flushMeasurements = function (correlationId, measurements) {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        measurements.forEach(function (measurement) {\n          var measureName = BrowserPerformanceMeasurement.makeMeasureName(measurement.name, correlationId);\n          var entriesForMeasurement = window.performance.getEntriesByName(measureName, \"measure\");\n\n          if (entriesForMeasurement.length > 0) {\n            window.performance.clearMeasures(measureName);\n            window.performance.clearMarks(BrowserPerformanceMeasurement.makeStartMark(measureName, correlationId));\n            window.performance.clearMarks(BrowserPerformanceMeasurement.makeEndMark(measureName, correlationId));\n          }\n        });\n      } catch (e) {// Silently catch and return null\n      }\n    }\n  };\n\n  BrowserPerformanceMeasurement.prototype.startMeasurement = function () {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.startMark);\n      } catch (e) {// Silently catch\n      }\n    }\n  };\n\n  BrowserPerformanceMeasurement.prototype.endMeasurement = function () {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.endMark);\n        window.performance.measure(this.measureName, this.startMark, this.endMark);\n      } catch (e) {// Silently catch\n      }\n    }\n  };\n\n  BrowserPerformanceMeasurement.prototype.flushMeasurement = function () {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        var entriesForMeasurement = window.performance.getEntriesByName(this.measureName, \"measure\");\n\n        if (entriesForMeasurement.length > 0) {\n          var durationMs = entriesForMeasurement[0].duration;\n          window.performance.clearMeasures(this.measureName);\n          window.performance.clearMarks(this.startMark);\n          window.performance.clearMarks(this.endMark);\n          return durationMs;\n        }\n      } catch (e) {// Silently catch and return null\n      }\n    }\n\n    return null;\n  };\n\n  return BrowserPerformanceMeasurement;\n}();\n\nexport { BrowserPerformanceMeasurement };","map":{"version":3,"sources":["../../src/telemetry/BrowserPerformanceMeasurement.ts"],"names":[],"mappings":";;AAAA;;;AAGG;;AAIH,IAAA,6BAAA;AAAA;AAAA,YAAA;AAMI,WAAY,6BAAZ,CAAY,IAAZ,EAA0B,aAA1B,EAA+C;AAC3C,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,WAAL,GAAmB,6BAA6B,CAAC,eAA9B,CAA8C,IAA9C,EAAoD,aAApD,CAAnB;AACA,SAAK,SAAL,GAAiB,6BAA6B,CAAC,aAA9B,CAA4C,IAA5C,EAAkD,aAAlD,CAAjB;AACA,SAAK,OAAL,GAAe,6BAA6B,CAAC,WAA9B,CAA0C,IAA1C,EAAgD,aAAhD,CAAf;AACH;;AAEc,EAAA,6BAAA,CAAA,eAAA,GAAf,UAA+B,IAA/B,EAA6C,aAA7C,EAAkE;AAC9D,WAAO,kBAAgB,IAAhB,GAAwB,GAAxB,GAAwB,aAA/B;AACH,GAFc;;AAIA,EAAA,6BAAA,CAAA,aAAA,GAAf,UAA6B,IAA7B,EAA2C,aAA3C,EAAgE;AAC5D,WAAO,gBAAc,IAAd,GAAsB,GAAtB,GAAsB,aAA7B;AACH,GAFc;;AAIA,EAAA,6BAAA,CAAA,WAAA,GAAf,UAA2B,IAA3B,EAAyC,aAAzC,EAA8D;AAC1D,WAAO,cAAY,IAAZ,GAAoB,GAApB,GAAoB,aAA3B;AACH,GAFc;;AAIR,EAAA,6BAAA,CAAA,0BAAA,GAAP,YAAA;AACI,WAAO,OAAO,MAAP,KAAkB,WAAlB,IACH,OAAO,MAAM,CAAC,WAAd,KAA8B,WAD3B,IAEH,OAAO,MAAM,CAAC,WAAP,CAAmB,IAA1B,KAAmC,UAFhC,IAGH,OAAO,MAAM,CAAC,WAAP,CAAmB,OAA1B,KAAsC,UAHnC,IAIH,OAAO,MAAM,CAAC,WAAP,CAAmB,UAA1B,KAAyC,UAJtC,IAKH,OAAO,MAAM,CAAC,WAAP,CAAmB,aAA1B,KAA4C,UALzC,IAMH,OAAO,MAAM,CAAC,WAAP,CAAmB,gBAA1B,KAA+C,UANnD;AAOH,GARM;AAUP;;;;AAIG;;;AACW,EAAA,6BAAA,CAAA,iBAAA,GAAd,UAAgC,aAAhC,EAAuD,YAAvD,EAAqF;AACjF,QAAI,6BAA6B,CAAC,0BAA9B,EAAJ,EAAgE;AAC5D,UAAI;AACA,QAAA,YAAY,CAAC,OAAb,CAAqB,UAAC,WAAD,EAAY;AAC7B,cAAM,WAAW,GAAG,6BAA6B,CAAC,eAA9B,CAA8C,WAAW,CAAC,IAA1D,EAAgE,aAAhE,CAApB;AACA,cAAM,qBAAqB,GAAG,MAAM,CAAC,WAAP,CAAmB,gBAAnB,CAAoC,WAApC,EAAiD,SAAjD,CAA9B;;AACA,cAAI,qBAAqB,CAAC,MAAtB,GAA+B,CAAnC,EAAsC;AAClC,YAAA,MAAM,CAAC,WAAP,CAAmB,aAAnB,CAAiC,WAAjC;AACA,YAAA,MAAM,CAAC,WAAP,CAAmB,UAAnB,CAA8B,6BAA6B,CAAC,aAA9B,CAA4C,WAA5C,EAAyD,aAAzD,CAA9B;AACA,YAAA,MAAM,CAAC,WAAP,CAAmB,UAAnB,CAA8B,6BAA6B,CAAC,WAA9B,CAA0C,WAA1C,EAAuD,aAAvD,CAA9B;AACH;AACJ,SARD;AASH,OAVD,CAUE,OAAO,CAAP,EAAU,C;AAEX;AACJ;AACJ,GAhBa;;AAkBd,EAAA,6BAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;AACI,QAAI,6BAA6B,CAAC,0BAA9B,EAAJ,EAAgE;AAC5D,UAAI;AACA,QAAA,MAAM,CAAC,WAAP,CAAmB,IAAnB,CAAwB,KAAK,SAA7B;AACH,OAFD,CAEE,OAAO,CAAP,EAAU,C;AAEX;AACJ;AACJ,GARD;;AAUA,EAAA,6BAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACI,QAAI,6BAA6B,CAAC,0BAA9B,EAAJ,EAAgE;AAC5D,UAAI;AACA,QAAA,MAAM,CAAC,WAAP,CAAmB,IAAnB,CAAwB,KAAK,OAA7B;AACA,QAAA,MAAM,CAAC,WAAP,CAAmB,OAAnB,CAA2B,KAAK,WAAhC,EAA6C,KAAK,SAAlD,EAA6D,KAAK,OAAlE;AACH,OAHD,CAGE,OAAO,CAAP,EAAU,C;AAEX;AACJ;AACJ,GATD;;AAWA,EAAA,6BAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;AACI,QAAI,6BAA6B,CAAC,0BAA9B,EAAJ,EAAgE;AAC5D,UAAI;AACA,YAAM,qBAAqB,GAAG,MAAM,CAAC,WAAP,CAAmB,gBAAnB,CAAoC,KAAK,WAAzC,EAAsD,SAAtD,CAA9B;;AACA,YAAI,qBAAqB,CAAC,MAAtB,GAA+B,CAAnC,EAAsC;AAClC,cAAM,UAAU,GAAG,qBAAqB,CAAC,CAAD,CAArB,CAAyB,QAA5C;AACA,UAAA,MAAM,CAAC,WAAP,CAAmB,aAAnB,CAAiC,KAAK,WAAtC;AACA,UAAA,MAAM,CAAC,WAAP,CAAmB,UAAnB,CAA8B,KAAK,SAAnC;AACA,UAAA,MAAM,CAAC,WAAP,CAAmB,UAAnB,CAA8B,KAAK,OAAnC;AACA,iBAAO,UAAP;AACH;AACJ,OATD,CASE,OAAO,CAAP,EAAU,C;AAEX;AACJ;;AACD,WAAO,IAAP;AACH,GAhBD;;AAiBJ,SAAC,6BAAD;AAAC,CAhGD,EAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { IPerformanceMeasurement, SubMeasurement } from \"@azure/msal-common\";\r\n\r\nexport class BrowserPerformanceMeasurement implements IPerformanceMeasurement {\r\n    private readonly measureName: string;\r\n    private readonly correlationId: string;\r\n    private readonly startMark: string;\r\n    private readonly endMark: string;\r\n\r\n    constructor(name: string, correlationId: string) {\r\n        this.correlationId = correlationId;\r\n        this.measureName = BrowserPerformanceMeasurement.makeMeasureName(name, correlationId);\r\n        this.startMark = BrowserPerformanceMeasurement.makeStartMark(name, correlationId);\r\n        this.endMark = BrowserPerformanceMeasurement.makeEndMark(name, correlationId);\r\n    }\r\n\r\n    private static makeMeasureName(name: string, correlationId: string) {\r\n        return `msal.measure.${name}.${correlationId}`;\r\n    }\r\n\r\n    private static makeStartMark(name: string, correlationId: string) {\r\n        return `msal.start.${name}.${correlationId}`;\r\n    }\r\n\r\n    private static makeEndMark(name: string, correlationId: string) {\r\n        return `msal.end.${name}.${correlationId}`;\r\n    }\r\n\r\n    static supportsBrowserPerformance(): boolean {\r\n        return typeof window !== \"undefined\" &&\r\n            typeof window.performance !== \"undefined\" &&\r\n            typeof window.performance.mark === \"function\" &&\r\n            typeof window.performance.measure === \"function\" &&\r\n            typeof window.performance.clearMarks === \"function\" &&\r\n            typeof window.performance.clearMeasures === \"function\" &&\r\n            typeof window.performance.getEntriesByName === \"function\";\r\n    }\r\n\r\n    /**\r\n     * Flush browser marks and measurements.\r\n     * @param {string} correlationId\r\n     * @param {SubMeasurement} measurements\r\n     */\r\n    public static flushMeasurements(correlationId: string, measurements: SubMeasurement[]): void {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                measurements.forEach((measurement) => {\r\n                    const measureName = BrowserPerformanceMeasurement.makeMeasureName(measurement.name, correlationId);\r\n                    const entriesForMeasurement = window.performance.getEntriesByName(measureName, \"measure\");\r\n                    if (entriesForMeasurement.length > 0) {\r\n                        window.performance.clearMeasures(measureName);\r\n                        window.performance.clearMarks(BrowserPerformanceMeasurement.makeStartMark(measureName, correlationId));\r\n                        window.performance.clearMarks(BrowserPerformanceMeasurement.makeEndMark(measureName, correlationId));\r\n                    }\r\n                });\r\n            } catch (e) {\r\n                // Silently catch and return null\r\n            }\r\n        }\r\n    }\r\n\r\n    startMeasurement(): void {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                window.performance.mark(this.startMark);\r\n            } catch (e) {\r\n                // Silently catch\r\n            }\r\n        }\r\n    }\r\n\r\n    endMeasurement():void {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                window.performance.mark(this.endMark);\r\n                window.performance.measure(this.measureName, this.startMark, this.endMark);\r\n            } catch (e) {\r\n                // Silently catch\r\n            }\r\n        }\r\n    }\r\n\r\n    flushMeasurement(): number | null {\r\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\r\n            try {\r\n                const entriesForMeasurement = window.performance.getEntriesByName(this.measureName, \"measure\");\r\n                if (entriesForMeasurement.length > 0) {\r\n                    const durationMs = entriesForMeasurement[0].duration;\r\n                    window.performance.clearMeasures(this.measureName);\r\n                    window.performance.clearMarks(this.startMark);\r\n                    window.performance.clearMarks(this.endMark);\r\n                    return durationMs;\r\n                }\r\n            } catch (e) {\r\n                // Silently catch and return null\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}