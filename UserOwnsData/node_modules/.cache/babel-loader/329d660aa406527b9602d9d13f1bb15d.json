{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { AuthError, PerformanceEvents, SilentFlowClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentCacheClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentCacheClient, _super);\n\n  function SilentCacheClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Returns unexpired tokens from the cache, if available\r\n   * @param silentRequest\r\n   */\n\n\n  SilentCacheClient.prototype.acquireToken = function (silentRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, serverTelemetryManager, silentAuthClient, cachedToken, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n            return [4\n            /*yield*/\n            , this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n\n          case 1:\n            silentAuthClient = _a.sent();\n            this.logger.verbose(\"Silent auth client created\");\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , silentAuthClient.acquireCachedToken(silentRequest)];\n\n          case 3:\n            cachedToken = _a.sent();\n            acquireTokenMeasurement.endMeasurement({\n              success: true,\n              fromCache: true\n            });\n            return [2\n            /*return*/\n            , cachedToken];\n\n          case 4:\n            error_1 = _a.sent();\n\n            if (error_1 instanceof BrowserAuthError && error_1.errorCode === BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code) {\n              this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n            }\n\n            acquireTokenMeasurement.endMeasurement({\n              errorCode: error_1 instanceof AuthError && error_1.errorCode || undefined,\n              subErrorCode: error_1 instanceof AuthError && error_1.subError || undefined,\n              success: false\n            });\n            throw error_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentCacheClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Creates an Silent Flow Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n\n\n  SilentCacheClient.prototype.createSilentFlowClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Create auth module.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];\n\n          case 1:\n            clientConfig = _a.sent();\n            return [2\n            /*return*/\n            , new SilentFlowClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n\n  SilentCacheClient.prototype.initializeSilentRequest = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, this.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\n            _a = [__assign({}, request)];\n            return [4\n            /*yield*/\n            , this.initializeBaseRequest(request, account)];\n\n          case 1:\n            return [2\n            /*return*/\n            , __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_b.sent()])), {\n              account: account,\n              forceRefresh: request.forceRefresh || false\n            }])];\n        }\n      });\n    });\n  };\n\n  return SilentCacheClient;\n}(StandardInteractionClient);\n\nexport { SilentCacheClient };","map":{"version":3,"sources":["../../src/interaction_client/SilentCacheClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { CommonSilentFlowRequest, AuthenticationResult, SilentFlowClient, ServerTelemetryManager, AccountInfo, AzureCloudOptions, PerformanceEvents, AuthError } from \"@azure/msal-common\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { ApiId } from \"../utils/BrowserConstants\";\r\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\r\n\r\nexport class SilentCacheClient extends StandardInteractionClient {\r\n    /**\r\n     * Returns unexpired tokens from the cache, if available\r\n     * @param silentRequest\r\n     */\r\n    async acquireToken(silentRequest: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\r\n        // Telemetry manager only used to increment cacheHits here\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\r\n\r\n        const silentAuthClient = await this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\r\n        this.logger.verbose(\"Silent auth client created\");\r\n\r\n        try {\r\n            const cachedToken = await silentAuthClient.acquireCachedToken(silentRequest);\r\n\r\n            acquireTokenMeasurement.endMeasurement({\r\n                success: true,\r\n                fromCache: true\r\n            });\r\n            return cachedToken;\r\n        } catch (error) {\r\n            if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code) {\r\n                this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\r\n            }\r\n            acquireTokenMeasurement.endMeasurement({\r\n                errorCode: error instanceof AuthError && error.errorCode || undefined,\r\n                subErrorCode: error instanceof AuthError && error.subError || undefined,\r\n                success: false\r\n            });\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\r\n    }\r\n\r\n    /**\r\n     * Creates an Silent Flow Client with the given authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param authorityUrl\r\n     */\r\n    protected async createSilentFlowClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<SilentFlowClient> {\r\n        // Create auth module.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\r\n        return new SilentFlowClient(clientConfig, this.performanceClient);\r\n    }\r\n\r\n    async initializeSilentRequest(request: SilentRequest, account: AccountInfo): Promise<CommonSilentFlowRequest> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, this.correlationId);\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\r\n        return {\r\n            ...request,\r\n            ...await this.initializeBaseRequest(request, account),\r\n            account: account,\r\n            forceRefresh: request.forceRefresh || false\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}