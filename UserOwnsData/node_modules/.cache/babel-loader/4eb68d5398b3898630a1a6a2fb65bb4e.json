{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { AuthenticationScheme, GrantType, HeaderNames, Errors } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '../error/InteractionRequiredAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 refresh token client\r\n */\n\nvar RefreshTokenClient =\n/** @class */\nfunction (_super) {\n  __extends(RefreshTokenClient, _super);\n\n  function RefreshTokenClient(configuration, performanceClient) {\n    return _super.call(this, configuration, performanceClient) || this;\n  }\n\n  RefreshTokenClient.prototype.acquireToken = function (request) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, httpVerToken, requestId, responseHandler;\n\n      var _this = this;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n            atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n            this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\n            reqTimestamp = TimeUtils.nowSeconds();\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            response = _h.sent();\n            httpVerToken = (_d = response.headers) === null || _d === void 0 ? void 0 : _d[HeaderNames.X_MS_HTTP_VERSION];\n            atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n              refreshTokenSize: ((_e = response.body.refresh_token) === null || _e === void 0 ? void 0 : _e.length) || 0\n            });\n\n            if (httpVerToken) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n                httpVerToken: httpVerToken\n              });\n            }\n\n            requestId = (_f = response.headers) === null || _f === void 0 ? void 0 : _f[HeaderNames.X_MS_REQUEST_ID];\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            (_g = this.performanceClient) === null || _g === void 0 ? void 0 : _g.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\n            return [2\n            /*return*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId).then(function (result) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              _this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\n\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\n      return __generator(this, function (_e) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n          throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n\n        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId); // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n\n        if (!request.account) {\n          throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment); // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n\n        if (isFOCI) {\n          try {\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n            return [2\n            /*return*/\n            , this.acquireTokenWithCachedRefreshToken(request, true)];\n          } catch (e) {\n            noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n            clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR; // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n\n            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n              (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n              return [2\n              /*return*/\n              , this.acquireTokenWithCachedRefreshToken(request, false)]; // throw in all other cases\n            } else {\n              throw e;\n            }\n          }\n        } // fall back to application refresh token acquisition\n\n\n        (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        return [2\n        /*return*/\n        , this.acquireTokenWithCachedRefreshToken(request, false)];\n      });\n    });\n  };\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, refreshToken, refreshTokenRequest;\n      return __generator(this, function (_d) {\n        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\n        refreshToken = this.cacheManager.getRefreshToken(request.account, foci);\n\n        if (!refreshToken) {\n          atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.discardMeasurement();\n          throw InteractionRequiredAuthError.createNoTokensFoundError();\n        } // attach cached RT size to the current measurement\n\n\n        atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n          success: true\n        });\n        refreshTokenRequest = __assign(__assign({}, request), {\n          refreshToken: refreshToken.secret,\n          authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n          ccsCredential: {\n            credential: request.account.homeAccountId,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          }\n        });\n        (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        return [2\n        /*return*/\n        , this.acquireToken(refreshTokenRequest)];\n      });\n    });\n  };\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, queryParametersString, endpoint, requestBody, headers, thumbprint;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            acquireTokenMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            return [4\n            /*yield*/\n            , this.createTokenRequestBody(request)];\n\n          case 1:\n            requestBody = _d.sent();\n            headers = this.createTokenRequestHeaders(request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [2\n            /*return*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint).then(function (result) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, acquireTokenMeasurement, parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, clientInfo;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n            correlationId = request.correlationId;\n            acquireTokenMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            parameterBuilder.addScopes(request.scopes);\n            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n            parameterBuilder.addClientInfo();\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n\n            parameterBuilder.addCorrelationId(correlationId);\n            parameterBuilder.addRefreshToken(request.refreshToken);\n\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            reqCnfData = _d.sent(); // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                  success: false\n                });\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n\n            _d.label = 3;\n\n          case 3:\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n              switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n\n                  break;\n\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                  break;\n              }\n            }\n\n            acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n              success: true\n            });\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n\n  return RefreshTokenClient;\n}(BaseClient);\n\nexport { RefreshTokenClient };","map":{"version":3,"sources":["../../src/client/RefreshTokenClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { GrantType, AuthenticationScheme, Errors, HeaderNames } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { ServerError } from \"../error/ServerError\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { CcsCredentialType } from \"../account/CcsCredential\";\r\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\r\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from \"../error/InteractionRequiredAuthError\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\n/**\r\n * OAuth2.0 refresh token client\r\n */\r\nexport class RefreshTokenClient extends BaseClient {\r\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\r\n        super(configuration, performanceClient);\r\n\r\n    }\r\n    public async acquireToken(request: CommonRefreshTokenRequest): Promise<AuthenticationResult> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\r\n\r\n        const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\r\n        this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\r\n        const response = await this.executeTokenRequest(request, this.authority);\r\n        const httpVerToken = response.headers?.[HeaderNames.X_MS_HTTP_VERSION];\r\n        atsMeasurement?.addStaticFields({\r\n            refreshTokenSize: response.body.refresh_token?.length || 0,\r\n        });\r\n        if(httpVerToken)\r\n        {\r\n            atsMeasurement?.addStaticFields({\r\n                httpVerToken,\r\n            });\r\n        }\r\n\r\n        // Retrieve requestId from response headers\r\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n        responseHandler.validateTokenResponse(response.body);\r\n\r\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\r\n        return responseHandler.handleServerTokenResponse(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request,\r\n            undefined,\r\n            undefined,\r\n            true,\r\n            request.forceCache,\r\n            requestId\r\n        ).then((result: AuthenticationResult) => {\r\n            atsMeasurement?.endMeasurement({\r\n                success: true\r\n            });\r\n            return result;\r\n        })\r\n            .catch((error) => {\r\n                this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\r\n                atsMeasurement?.endMeasurement({\r\n                    errorCode: error.errorCode,\r\n                    subErrorCode: error.subError,\r\n                    success: false\r\n                });\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */\r\n    public async acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        // Cannot renew token if no request object is given.\r\n        if (!request) {\r\n            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n        }\r\n\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\r\n\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw ClientAuthError.createNoAccountInSilentRequestError();\r\n        }\r\n\r\n        // try checking if FOCI is enabled for the given application\r\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\r\n\r\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\r\n        if (isFOCI) {\r\n            try {\r\n                this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n                return this.acquireTokenWithCachedRefreshToken(request, true);\r\n            } catch (e) {\r\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\r\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\r\n\r\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\r\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\r\n                    this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n                    return this.acquireTokenWithCachedRefreshToken(request, false);\r\n                    // throw in all other cases\r\n                } else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        // fall back to application refresh token acquisition\r\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n        return this.acquireTokenWithCachedRefreshToken(request, false);\r\n\r\n    }\r\n\r\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */\r\n    private async acquireTokenWithCachedRefreshToken(request: CommonSilentFlowRequest, foci: boolean) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n\r\n        // fetches family RT or application RT based on FOCI value\r\n\r\n        const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n        this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\r\n        const refreshToken = this.cacheManager.getRefreshToken(request.account, foci);\r\n\r\n        if (!refreshToken) {\r\n            atsMeasurement?.discardMeasurement();\r\n            throw InteractionRequiredAuthError.createNoTokensFoundError();\r\n        }\r\n        // attach cached RT size to the current measurement\r\n        atsMeasurement?.endMeasurement({\r\n            success: true\r\n        });\r\n\r\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\r\n            ...request,\r\n            refreshToken: refreshToken.secret,\r\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\r\n            ccsCredential: {\r\n                credential: request.account.homeAccountId,\r\n                type: CcsCredentialType.HOME_ACCOUNT_ID\r\n            }\r\n        };\r\n\r\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\r\n        return this.acquireToken(refreshTokenRequest);\r\n    }\r\n\r\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonRefreshTokenRequest, authority: Authority)\r\n        : Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\r\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\r\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\r\n        \r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n        \r\n        const requestBody = await this.createTokenRequestBody(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders(request.ccsCredential);\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n\r\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)\r\n            .then((result) => {\r\n                acquireTokenMeasurement?.endMeasurement({\r\n                    success: true\r\n                });\r\n                return result;\r\n            })\r\n            .catch((error) => {\r\n                acquireTokenMeasurement?.endMeasurement({\r\n                    success: false\r\n                });\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */\r\n    private async createTokenRequestBody(request: CommonRefreshTokenRequest): Promise<string> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\r\n\r\n        const correlationId = request.correlationId;\r\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\r\n\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        parameterBuilder.addRefreshToken(request.refreshToken);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\r\n            this.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\r\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\r\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\r\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n            if (request.sshJwk) {\r\n                parameterBuilder.addSshJwk(request.sshJwk);\r\n            } else {\r\n                acquireTokenMeasurement?.endMeasurement({\r\n                    success: false\r\n                });\r\n                throw ClientConfigurationError.createMissingSshJwkError();\r\n            }\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\r\n            switch (request.ccsCredential.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\r\n                    break;\r\n            }\r\n        }\r\n        acquireTokenMeasurement?.endMeasurement({\r\n            success: true\r\n        });\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}