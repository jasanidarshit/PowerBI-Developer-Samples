{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar ModernBrowserCrypto =\n/** @class */\nfunction () {\n  function ModernBrowserCrypto() {}\n\n  ModernBrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\n    return window.crypto.getRandomValues(dataBuffer);\n  };\n\n  ModernBrowserCrypto.prototype.generateKey = function (algorithm, extractable, keyUsages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , window.crypto.subtle.generateKey(algorithm, extractable, keyUsages)];\n      });\n    });\n  };\n\n  ModernBrowserCrypto.prototype.exportKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key)];\n      });\n    });\n  };\n\n  ModernBrowserCrypto.prototype.importKey = function (keyData, algorithm, extractable, keyUsages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , window.crypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages)];\n      });\n    });\n  };\n\n  ModernBrowserCrypto.prototype.sign = function (algorithm, key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , window.crypto.subtle.sign(algorithm, key, data)];\n      });\n    });\n  };\n\n  ModernBrowserCrypto.prototype.digest = function (algorithm, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , window.crypto.subtle.digest(algorithm, data)];\n      });\n    });\n  };\n\n  return ModernBrowserCrypto;\n}();\n\nexport { ModernBrowserCrypto };","map":{"version":3,"sources":["../../src/crypto/ModernBrowserCrypto.ts"],"names":[],"mappings":";;;;;AAAA;;;AAGG;;AAKH,IAAA,mBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,mBAAA,GAAA,CAwBC;;AAvBG,EAAA,mBAAe,CAAA,SAAf,CAAe,eAAf,GAAA,UAAgB,UAAhB,EAAsC;AAClC,WAAO,MAAM,CAAC,MAAP,CAAc,eAAd,CAA8B,UAA9B,CAAP;AACH,GAFD;;AAIM,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAN,UAAkB,SAAlB,EAAoD,WAApD,EAA0E,SAA1E,EAA+F;;;AAC3F,eAAA,CAAA;AAAA;AAAA,UAAO,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,WAArB,CAAiC,SAAjC,EAA4C,WAA5C,EAAyD,SAAzD,CAAP,CAAA;;;AACH,GAFK;;AAIA,EAAA,mBAAS,CAAA,SAAT,CAAS,SAAT,GAAN,UAAgB,GAAhB,EAA8B;;;AAC1B,eAAA,CAAA;AAAA;AAAA,UAAO,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,SAArB,CAA+B,cAA/B,EAA+C,GAA/C,CAAP,CAAA;;;AACH,GAFK;;AAIA,EAAA,mBAAS,CAAA,SAAT,CAAS,SAAT,GAAN,UAAgB,OAAhB,EAAqC,SAArC,EAAuE,WAAvE,EAA6F,SAA7F,EAAkH;;;AAC9G,eAAA,CAAA;AAAA;AAAA,UAAO,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,SAArB,CAA+B,cAA/B,EAA+C,OAA/C,EAAwD,SAAxD,EAAmE,WAAnE,EAAgF,SAAhF,CAAP,CAAA;;;AACH,GAFK;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,IAAA,GAAN,UAAW,SAAX,EAA2C,GAA3C,EAA2D,IAA3D,EAA4E;;;AACxE,eAAA,CAAA;AAAA;AAAA,UAAO,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,IAArB,CAA0B,SAA1B,EAAqC,GAArC,EAA0C,IAA1C,CAAP,CAAA;;;AACH,GAFK;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,MAAA,GAAN,UAAa,SAAb,EAA6C,IAA7C,EAA6D;;;AACzD,eAAA,CAAA;AAAA;AAAA,UAAO,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,MAArB,CAA4B,SAA5B,EAAuC,IAAvC,CAAP,CAAA;;;AACH,GAFK;;AAGV,SAAC,mBAAD;AAAC,CAxBD,EAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\r\nimport { ISubtleCrypto } from \"./ISubtleCrypto\";\r\n\r\nexport class ModernBrowserCrypto implements ISubtleCrypto {\r\n    getRandomValues(dataBuffer: Uint8Array): Uint8Array {\r\n        return window.crypto.getRandomValues(dataBuffer);\r\n    }\r\n\r\n    async generateKey(algorithm: RsaHashedKeyGenParams, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKeyPair> {\r\n        return window.crypto.subtle.generateKey(algorithm, extractable, keyUsages) as Promise<CryptoKeyPair>;\r\n    }\r\n\r\n    async exportKey(key: CryptoKey): Promise<JsonWebKey> {\r\n        return window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key) as Promise<JsonWebKey>;\r\n    }\r\n\r\n    async importKey(keyData: JsonWebKey, algorithm: RsaHashedImportParams, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey> {\r\n        return window.crypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages) as Promise<CryptoKey>;\r\n    }\r\n\r\n    async sign(algorithm: AlgorithmIdentifier, key: CryptoKey, data: ArrayBuffer): Promise<ArrayBuffer> {\r\n        return window.crypto.subtle.sign(algorithm, key, data) as Promise<ArrayBuffer>;\r\n    }\r\n\r\n    async digest(algorithm: AlgorithmIdentifier, data: Uint8Array): Promise<ArrayBuffer> {\r\n        return window.crypto.subtle.digest(algorithm, data) as Promise<ArrayBuffer>;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}