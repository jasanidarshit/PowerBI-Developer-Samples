{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { AuthError } from '@azure/msal-common';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\n\nvar BrowserConfigurationAuthErrorMessage = {\n  redirectUriNotSet: {\n    code: \"redirect_uri_empty\",\n    desc: \"A redirect URI is required for all calls, and none has been set.\"\n  },\n  postLogoutUriNotSet: {\n    code: \"post_logout_uri_empty\",\n    desc: \"A post logout redirect has not been set.\"\n  },\n  storageNotSupportedError: {\n    code: \"storage_not_supported\",\n    desc: \"Given storage configuration option was not supported.\"\n  },\n  noRedirectCallbacksSet: {\n    code: \"no_redirect_callbacks\",\n    desc: \"No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. \" + \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\n  },\n  invalidCallbackObject: {\n    code: \"invalid_callback_object\",\n    desc: \"The object passed for the callback was invalid. \" + \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\n  },\n  stubPcaInstanceCalled: {\n    code: \"stubbed_public_client_application_called\",\n    desc: \"Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors\"\n  },\n  inMemRedirectUnavailable: {\n    code: \"in_mem_redirect_unavailable\",\n    desc: \"Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true.\"\n  },\n  entropyNotProvided: {\n    code: \"entropy_not_provided\",\n    desc: \"The available browser crypto interface requires entropy set via system.cryptoOptions.entropy configuration option.\"\n  }\n};\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\n\nvar BrowserConfigurationAuthError =\n/** @class */\nfunction (_super) {\n  __extends(BrowserConfigurationAuthError, _super);\n\n  function BrowserConfigurationAuthError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n\n    _this.name = \"BrowserConfigurationAuthError\";\n    Object.setPrototypeOf(_this, BrowserConfigurationAuthError.prototype);\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when the redirect uri is empty (not set by caller)\r\n   */\n\n\n  BrowserConfigurationAuthError.createRedirectUriEmptyError = function () {\n    return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.redirectUriNotSet.code, BrowserConfigurationAuthErrorMessage.redirectUriNotSet.desc);\n  };\n  /**\r\n   * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\r\n   */\n\n\n  BrowserConfigurationAuthError.createPostLogoutRedirectUriEmptyError = function () {\n    return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.code, BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.desc);\n  };\n  /**\r\n   * Creates error thrown when given storage location is not supported.\r\n   * @param givenStorageLocation\r\n   */\n\n\n  BrowserConfigurationAuthError.createStorageNotSupportedError = function (givenStorageLocation) {\n    return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.storageNotSupportedError.code, BrowserConfigurationAuthErrorMessage.storageNotSupportedError.desc + \" Given Location: \" + givenStorageLocation);\n  };\n  /**\r\n   * Creates error thrown when redirect callbacks are not set before calling loginRedirect() or acquireTokenRedirect().\r\n   */\n\n\n  BrowserConfigurationAuthError.createRedirectCallbacksNotSetError = function () {\n    return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.code, BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.desc);\n  };\n  /**\r\n   * Creates error thrown when the stub instance of PublicClientApplication is called.\r\n   */\n\n\n  BrowserConfigurationAuthError.createStubPcaInstanceCalledError = function () {\n    return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.code, BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.desc);\n  };\n  /*\r\n   * Create an error thrown when in-memory storage is used and storeAuthStateInCookie=false.\r\n   */\n\n\n  BrowserConfigurationAuthError.createInMemoryRedirectUnavailableError = function () {\n    return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.code, BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.desc);\n  };\n  /**\r\n   * Creates an error thrown when a crypto interface that requires entropy is initialized without entropy\r\n   */\n\n\n  BrowserConfigurationAuthError.createEntropyNotProvided = function () {\n    return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.entropyNotProvided.code, BrowserConfigurationAuthErrorMessage.entropyNotProvided.desc);\n  };\n\n  return BrowserConfigurationAuthError;\n}(AuthError);\n\nexport { BrowserConfigurationAuthError, BrowserConfigurationAuthErrorMessage };","map":{"version":3,"sources":["../../src/error/BrowserConfigurationAuthError.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthError } from \"@azure/msal-common\";\r\n\r\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nexport const BrowserConfigurationAuthErrorMessage = {\r\n    redirectUriNotSet: {\r\n        code: \"redirect_uri_empty\",\r\n        desc: \"A redirect URI is required for all calls, and none has been set.\"\r\n    },\r\n    postLogoutUriNotSet: {\r\n        code: \"post_logout_uri_empty\",\r\n        desc: \"A post logout redirect has not been set.\"\r\n    },\r\n    storageNotSupportedError: {\r\n        code: \"storage_not_supported\",\r\n        desc: \"Given storage configuration option was not supported.\"\r\n    },\r\n    noRedirectCallbacksSet: {\r\n        code: \"no_redirect_callbacks\",\r\n        desc: \"No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. \" +\r\n            \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\r\n    },\r\n    invalidCallbackObject: {\r\n        code: \"invalid_callback_object\",\r\n        desc: \"The object passed for the callback was invalid. \" +\r\n          \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\r\n    },\r\n    stubPcaInstanceCalled: {\r\n        code: \"stubbed_public_client_application_called\",\r\n        desc: \"Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors\"\r\n    },\r\n    inMemRedirectUnavailable: {\r\n        code: \"in_mem_redirect_unavailable\",\r\n        desc: \"Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true.\"\r\n    },\r\n    entropyNotProvided: {\r\n        code: \"entropy_not_provided\",\r\n        desc: \"The available browser crypto interface requires entropy set via system.cryptoOptions.entropy configuration option.\"\r\n    }\r\n};\r\n\r\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\r\nexport class BrowserConfigurationAuthError extends AuthError {\r\n\r\n    constructor(errorCode: string, errorMessage?: string) {\r\n        super(errorCode, errorMessage);\r\n        this.name = \"BrowserConfigurationAuthError\";\r\n\r\n        Object.setPrototypeOf(this, BrowserConfigurationAuthError.prototype);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\r\n     */\r\n    static createRedirectUriEmptyError(): BrowserConfigurationAuthError {\r\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.redirectUriNotSet.code,\r\n            BrowserConfigurationAuthErrorMessage.redirectUriNotSet.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\r\n     */\r\n    static createPostLogoutRedirectUriEmptyError(): BrowserConfigurationAuthError {\r\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.code,\r\n            BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates error thrown when given storage location is not supported.\r\n     * @param givenStorageLocation \r\n     */\r\n    static createStorageNotSupportedError(givenStorageLocation: string): BrowserConfigurationAuthError {\r\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.storageNotSupportedError.code, `${BrowserConfigurationAuthErrorMessage.storageNotSupportedError.desc} Given Location: ${givenStorageLocation}`);\r\n    }\r\n\r\n    /**\r\n     * Creates error thrown when redirect callbacks are not set before calling loginRedirect() or acquireTokenRedirect().\r\n     */\r\n    static createRedirectCallbacksNotSetError(): BrowserConfigurationAuthError {\r\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.code, \r\n            BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates error thrown when the stub instance of PublicClientApplication is called.\r\n     */\r\n    static createStubPcaInstanceCalledError(): BrowserConfigurationAuthError {\r\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.code,\r\n            BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.desc);\r\n    }\r\n\r\n    /*\r\n     * Create an error thrown when in-memory storage is used and storeAuthStateInCookie=false.\r\n     */\r\n    static createInMemoryRedirectUnavailableError(): BrowserConfigurationAuthError {\r\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.code, BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.desc);\r\n    }\r\n    \r\n    /**\r\n     * Creates an error thrown when a crypto interface that requires entropy is initialized without entropy\r\n     */\r\n    static createEntropyNotProvided(): BrowserConfigurationAuthError {\r\n        return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.entropyNotProvided.code, BrowserConfigurationAuthErrorMessage.entropyNotProvided.desc);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}