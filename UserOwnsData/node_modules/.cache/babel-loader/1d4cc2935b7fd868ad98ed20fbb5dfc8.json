{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, AuthError, PerformanceEvents, Constants, ThrottlingUtils, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { TemporaryCacheKeys, ApiId, InteractionType } from '../utils/BrowserConstants.js';\nimport { RedirectHandler } from '../interaction_handler/RedirectHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RedirectClient =\n/** @class */\nfunction (_super) {\n  __extends(RedirectClient, _super);\n\n  function RedirectClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Redirects the page to the /authorize endpoint of the IDP\r\n   * @param request\r\n   */\n\n\n  RedirectClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validRequest, serverTelemetryManager, handleBackButton, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Redirect)];\n\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n\n            handleBackButton = function (event) {\n              // Clear temporary cache if the back button is clicked during the redirect flow.\n              if (event.persisted) {\n                _this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\n\n                _this.browserStorage.cleanRequestByState(validRequest.state);\n\n                _this.eventHandler.emitEvent(EventType.RESTORE_FROM_BFCACHE, InteractionType.Redirect);\n              }\n            };\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 7,, 8]); // Create auth code request and generate PKCE params\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(validRequest)];\n\n          case 3:\n            authCodeRequest = _a.sent(); // Initialize the client\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), {\n              nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\n            }))];\n\n          case 5:\n            navigateUrl = _a.sent();\n            redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(\"Redirect start page: \" + redirectStartPage); // Clear temporary cache if the back button is clicked during the redirect flow.\n\n            window.addEventListener(\"pageshow\", handleBackButton);\n            return [4\n            /*yield*/\n            , interactionHandler.initiateAuthRequest(navigateUrl, {\n              navigationClient: this.navigationClient,\n              redirectTimeout: this.config.system.redirectNavigationTimeout,\n              redirectStartPage: redirectStartPage,\n              onRedirectNavigate: request.onRedirectNavigate\n            })];\n\n          case 6:\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 7:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Checks if navigateToLoginRequestUrl is set, and:\r\n   * - if true, performs logic to cache and navigate\r\n   * - if false, handles hash string and parses response\r\n   * @param hash\r\n   */\n\n\n  RedirectClient.prototype.handleRedirectPromise = function (hash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, responseHash, state, serverParams, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n              this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n              return [2\n              /*return*/\n              , null];\n            }\n\n            responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n\n            if (!responseHash) {\n              // Not a recognized server response hash or hash not associated with a redirect request\n              this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            state = void 0;\n\n            try {\n              serverParams = UrlString.getDeserializedHash(responseHash);\n              state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\n              this.logger.verbose(\"State extracted from hash\");\n            } catch (e) {\n              this.logger.info(\"handleRedirectPromise was unable to extract state due to: \" + e);\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\n            loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n            currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n            if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3\n            /*break*/\n            , 3]; // We are on the page we need to navigate to - handle hash\n\n            this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n            return [4\n            /*yield*/\n            , this.handleHash(responseHash, state, serverTelemetryManager)];\n\n          case 2:\n            handleHashResult = _a.sent();\n\n            if (loginRequestUrl.indexOf(\"#\") > -1) {\n              // Replace current hash with non-msal hash, if present\n              BrowserUtils.replaceHash(loginRequestUrl);\n            }\n\n            return [2\n            /*return*/\n            , handleHashResult];\n\n          case 3:\n            if (!!this.config.auth.navigateToLoginRequestUrl) return [3\n            /*break*/\n            , 4];\n            this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n            return [2\n            /*return*/\n            , this.handleHash(responseHash, state, serverTelemetryManager)];\n\n          case 4:\n            if (!(!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [3\n            /*break*/\n            , 9];\n            /*\r\n             * Returned from authority using redirect - need to perform navigation before processing response\r\n             * Cache the hash to be retrieved after the next redirect\r\n             */\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n            navigationOptions = {\n              apiId: ApiId.handleRedirectPromise,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: true\n            };\n            processHashOnRedirect = true;\n            if (!(!loginRequestUrl || loginRequestUrl === \"null\")) return [3\n            /*break*/\n            , 6];\n            homepage = BrowserUtils.getHomepage(); // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n            this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateInternal(homepage, navigationOptions)];\n\n          case 5:\n            processHashOnRedirect = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            // Navigate to page that initiated the redirect request\n            this.logger.verbose(\"Navigating to loginRequestUrl: \" + loginRequestUrl);\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];\n\n          case 7:\n            processHashOnRedirect = _a.sent();\n            _a.label = 8;\n\n          case 8:\n            // If navigateInternal implementation returns false, handle the hash now\n            if (!processHashOnRedirect) {\n              return [2\n              /*return*/\n              , this.handleHash(responseHash, state, serverTelemetryManager)];\n            }\n\n            _a.label = 9;\n\n          case 9:\n            return [2\n            /*return*/\n            , null];\n\n          case 10:\n            e_2 = _a.sent();\n\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n            throw e_2;\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets the response hash for a redirect request\r\n   * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n   * @param hash\r\n   */\n\n\n  RedirectClient.prototype.getRedirectResponseHash = function (hash) {\n    this.logger.verbose(\"getRedirectResponseHash called\"); // Get current location hash from window or cache.\n\n    var isResponseHash = UrlString.hashContainsKnownProperties(hash);\n\n    if (isResponseHash) {\n      BrowserUtils.clearHash(window);\n      this.logger.verbose(\"Hash contains known properties, returning response hash\");\n      return hash;\n    }\n\n    var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n    return cachedHash;\n  };\n  /**\r\n   * Checks if hash exists and handles in window.\r\n   * @param hash\r\n   * @param state\r\n   */\n\n\n  RedirectClient.prototype.handleHash = function (hash, state, serverTelemetryManager) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedRequest, serverParams, nativeInteractionClient, userRequestState, currentAuthority, authClient, interactionHandler;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n            this.logger.verbose(\"handleHash called, retrieved cached request\");\n            serverParams = UrlString.getDeserializedHash(hash);\n\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, cachedRequest.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\n              return [2\n              /*return*/\n              , nativeInteractionClient.acquireToken(__assign(__assign({}, cachedRequest), {\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state);\n              })];\n            }\n\n            currentAuthority = this.browserStorage.getCachedAuthority(state);\n\n            if (!currentAuthority) {\n              throw BrowserAuthError.createNoCachedAuthorityError();\n            }\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, cachedRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];\n\n          case 1:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto, this.performanceClient);\n            return [4\n            /*yield*/\n            , interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param logoutRequest\r\n   */\n\n\n  RedirectClient.prototype.logout = function (logoutRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutRedirect called\");\n            validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest); // Clear cache on logout\n\n            return [4\n            /*yield*/\n            , this.clearCacheOnLogout(validLogoutRequest.account)];\n\n          case 2:\n            // Clear cache on logout\n            _a.sent();\n\n            navigationOptions = {\n              apiId: ApiId.logout,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: false\n            };\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validLogoutRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validLogoutRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\")) return [3\n            /*break*/\n            , 7];\n            navigate = logoutRequest.onRedirectNavigate(logoutUri);\n            if (!(navigate !== false)) return [3\n            /*break*/\n            , 5];\n            this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\"); // Ensure interaction is in progress\n\n            if (!this.browserStorage.getInteractionInProgress()) {\n              this.browserStorage.setInteractionInProgress(true);\n            }\n\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 5:\n            // Ensure interaction is not in progress\n            this.browserStorage.setInteractionInProgress(false);\n            this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n            _a.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            // Ensure interaction is in progress\n            if (!this.browserStorage.getInteractionInProgress()) {\n              this.browserStorage.setInteractionInProgress(true);\n            }\n\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n\n          case 8:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 9:\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            e_3 = _a.sent();\n\n            if (e_3 instanceof AuthError) {\n              e_3.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            throw e_3;\n\n          case 11:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to get the redirectStartPage either from request or use current window\r\n   * @param requestStartPage\r\n   */\n\n\n  RedirectClient.prototype.getRedirectStartPage = function (requestStartPage) {\n    var redirectStartPage = requestStartPage || window.location.href;\n    return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n  };\n\n  return RedirectClient;\n}(StandardInteractionClient);\n\nexport { RedirectClient };","map":{"version":3,"sources":["../../src/interaction_client/RedirectClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, UrlString, AuthError, ServerTelemetryManager, Constants, ProtocolUtils, ServerAuthorizationCodeResponse, ThrottlingUtils, ICrypto, Logger, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { ApiId, InteractionType, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\nimport { RedirectHandler } from \"../interaction_handler/RedirectHandler\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\r\nimport { EventType } from \"../event/EventType\";\r\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\n\r\nexport class RedirectClient extends StandardInteractionClient {\r\n    protected nativeStorage: BrowserCacheManager;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\r\n        this.nativeStorage = nativeStorageImpl;\r\n    }\r\n\r\n    /**\r\n     * Redirects the page to the /authorize endpoint of the IDP\r\n     * @param request\r\n     */\r\n    async acquireToken(request: RedirectRequest): Promise<void> {\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n        const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Redirect);\r\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\r\n\r\n        const handleBackButton = (event: PageTransitionEvent) => {\r\n            // Clear temporary cache if the back button is clicked during the redirect flow.\r\n            if (event.persisted) {\r\n                this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\r\n                this.browserStorage.cleanRequestByState(validRequest.state);\r\n                this.eventHandler.emitEvent(EventType.RESTORE_FROM_BFCACHE, InteractionType.Redirect);\r\n            }\r\n        };\r\n\r\n        try {\r\n            // Create auth code request and generate PKCE params\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\r\n\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\r\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create redirect interaction handler.\r\n            const interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);\r\n\r\n            // Create acquire token url.\r\n            const navigateUrl = await authClient.getAuthCodeUrl({\r\n                ...validRequest,\r\n                nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\r\n            });\r\n\r\n            const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\r\n            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\r\n\r\n            // Clear temporary cache if the back button is clicked during the redirect flow.\r\n            window.addEventListener(\"pageshow\", handleBackButton);\r\n\r\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\r\n            return await interactionHandler.initiateAuthRequest(navigateUrl, {\r\n                navigationClient: this.navigationClient,\r\n                redirectTimeout: this.config.system.redirectNavigationTimeout,\r\n                redirectStartPage: redirectStartPage,\r\n                onRedirectNavigate: request.onRedirectNavigate\r\n            });\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                e.setCorrelationId(this.correlationId);\r\n            }\r\n            window.removeEventListener(\"pageshow\", handleBackButton);\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByState(validRequest.state);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if navigateToLoginRequestUrl is set, and:\r\n     * - if true, performs logic to cache and navigate\r\n     * - if false, handles hash string and parses response\r\n     * @param hash\r\n     */\r\n    async handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null> {\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\r\n        try {\r\n            if (!this.browserStorage.isInteractionInProgress(true)) {\r\n                this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\r\n                return null;\r\n            }\r\n\r\n            const responseHash = this.getRedirectResponseHash(hash || window.location.hash);\r\n            if (!responseHash) {\r\n                // Not a recognized server response hash or hash not associated with a redirect request\r\n                this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\r\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n                return null;\r\n            }\r\n\r\n            let state: string;\r\n            try {\r\n                // Deserialize hash fragment response parameters.\r\n                const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(responseHash);\r\n                state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\r\n                this.logger.verbose(\"State extracted from hash\");\r\n            } catch (e) {\r\n                this.logger.info(`handleRedirectPromise was unable to extract state due to: ${e}`);\r\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n                return null;\r\n            }\r\n\r\n            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\r\n            const loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\r\n            const loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\r\n            const currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\r\n\r\n            if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {\r\n                // We are on the page we need to navigate to - handle hash\r\n                this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\r\n                const handleHashResult = await this.handleHash(responseHash, state, serverTelemetryManager);\r\n\r\n                if (loginRequestUrl.indexOf(\"#\") > -1) {\r\n                    // Replace current hash with non-msal hash, if present\r\n                    BrowserUtils.replaceHash(loginRequestUrl);\r\n                }\r\n\r\n                return handleHashResult;\r\n            } else if (!this.config.auth.navigateToLoginRequestUrl) {\r\n                this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\r\n                return this.handleHash(responseHash, state, serverTelemetryManager);\r\n            } else if (!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe) {\r\n                /*\r\n                 * Returned from authority using redirect - need to perform navigation before processing response\r\n                 * Cache the hash to be retrieved after the next redirect\r\n                 */\r\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\r\n                const navigationOptions: NavigationOptions = {\r\n                    apiId: ApiId.handleRedirectPromise,\r\n                    timeout: this.config.system.redirectNavigationTimeout,\r\n                    noHistory: true\r\n                };\r\n\r\n                /**\r\n                 * Default behavior is to redirect to the start page and not process the hash now.\r\n                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\r\n                 */\r\n                let processHashOnRedirect: boolean = true;\r\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\r\n                    // Redirect to home page if login request url is null (real null or the string null)\r\n                    const homepage = BrowserUtils.getHomepage();\r\n                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\r\n                    this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\r\n                    this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\r\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);\r\n                } else {\r\n                    // Navigate to page that initiated the redirect request\r\n                    this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);\r\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);\r\n                }\r\n\r\n                // If navigateInternal implementation returns false, handle the hash now\r\n                if (!processHashOnRedirect) {\r\n                    return this.handleHash(responseHash, state, serverTelemetryManager);\r\n                }\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the response hash for a redirect request\r\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n     * @param hash\r\n     */\r\n    protected getRedirectResponseHash(hash: string): string | null {\r\n        this.logger.verbose(\"getRedirectResponseHash called\");\r\n        // Get current location hash from window or cache.\r\n        const isResponseHash: boolean = UrlString.hashContainsKnownProperties(hash);\r\n\r\n        if (isResponseHash) {\r\n            BrowserUtils.clearHash(window);\r\n            this.logger.verbose(\"Hash contains known properties, returning response hash\");\r\n            return hash;\r\n        }\r\n\r\n        const cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\r\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\r\n\r\n        this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\r\n        return cachedHash;\r\n    }\r\n\r\n    /**\r\n     * Checks if hash exists and handles in window.\r\n     * @param hash\r\n     * @param state\r\n     */\r\n    protected async handleHash(hash: string, state: string, serverTelemetryManager: ServerTelemetryManager): Promise<AuthenticationResult> {\r\n        const cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\r\n        this.logger.verbose(\"handleHash called, retrieved cached request\");\r\n\r\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\r\n\r\n        if (serverParams.accountId) {\r\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\r\n            if (!this.nativeMessageHandler) {\r\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\r\n            }\r\n            const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, cachedRequest.correlationId);\r\n            const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\r\n            return nativeInteractionClient.acquireToken({\r\n                ...cachedRequest,\r\n                state: userRequestState,\r\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\r\n            }).finally(() => {\r\n                this.browserStorage.cleanRequestByState(state);\r\n            });\r\n        }\r\n\r\n        // Hash contains known properties - handle and return in callback\r\n        const currentAuthority = this.browserStorage.getCachedAuthority(state);\r\n        if (!currentAuthority) {\r\n            throw BrowserAuthError.createNoCachedAuthorityError();\r\n        }\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, cachedRequest.correlationId);\r\n        const authClient = await this.createAuthCodeClient(serverTelemetryManager, currentAuthority);\r\n        this.logger.verbose(\"Auth code client created\");\r\n        ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\r\n        const interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto, this.performanceClient);\r\n        return await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\r\n    }\r\n\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */\r\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\r\n        this.logger.verbose(\"logoutRedirect called\");\r\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\r\n\r\n        try {\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\r\n\r\n            // Clear cache on logout\r\n            await this.clearCacheOnLogout(validLogoutRequest.account);\r\n\r\n            const navigationOptions: NavigationOptions = {\r\n                apiId: ApiId.logout,\r\n                timeout: this.config.system.redirectNavigationTimeout,\r\n                noHistory: false\r\n            };\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validLogoutRequest.correlationId);\r\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create logout string and navigate user window to logout.\r\n            const logoutUri: string = authClient.getLogoutUri(validLogoutRequest);\r\n\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\r\n            // Check if onRedirectNavigate is implemented, and invoke it if so\r\n            if (logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\") {\r\n                const navigate = logoutRequest.onRedirectNavigate(logoutUri);\r\n\r\n                if (navigate !== false) {\r\n                    this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\r\n                    // Ensure interaction is in progress\r\n                    if (!this.browserStorage.getInteractionInProgress()) {\r\n                        this.browserStorage.setInteractionInProgress(true);\r\n                    }\r\n                    await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\r\n                    return;\r\n                } else {\r\n                    // Ensure interaction is not in progress\r\n                    this.browserStorage.setInteractionInProgress(false);\r\n                    this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\r\n                }\r\n            } else {\r\n                // Ensure interaction is in progress\r\n                if (!this.browserStorage.getInteractionInProgress()) {\r\n                    this.browserStorage.setInteractionInProgress(true);\r\n                }\r\n                await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\r\n                return;\r\n            }\r\n        } catch(e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e);\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\r\n            throw e;\r\n        }\r\n\r\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\r\n    }\r\n\r\n    /**\r\n     * Use to get the redirectStartPage either from request or use current window\r\n     * @param requestStartPage\r\n     */\r\n    protected getRedirectStartPage(requestStartPage?: string): string {\r\n        const redirectStartPage = requestStartPage || window.location.href;\r\n        return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}