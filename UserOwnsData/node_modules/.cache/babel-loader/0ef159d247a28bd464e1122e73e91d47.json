{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { DB_NAME, DB_VERSION, DB_TABLE_NAME } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\n\nvar DatabaseStorage =\n/** @class */\nfunction () {\n  function DatabaseStorage() {\n    this.dbName = DB_NAME;\n    this.version = DB_VERSION;\n    this.tableName = DB_TABLE_NAME;\n    this.dbOpen = false;\n  }\n  /**\r\n   * Opens IndexedDB instance.\r\n   */\n\n\n  DatabaseStorage.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var openDB = window.indexedDB.open(_this.dbName, _this.version);\n          openDB.addEventListener(\"upgradeneeded\", function (e) {\n            var event = e;\n            event.target.result.createObjectStore(_this.tableName);\n          });\n          openDB.addEventListener(\"success\", function (e) {\n            var event = e;\n            _this.db = event.target.result;\n            _this.dbOpen = true;\n            resolve();\n          });\n          openDB.addEventListener(\"error\", function () {\n            return reject(BrowserAuthError.createDatabaseUnavailableError());\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Closes the connection to IndexedDB database when all pending transactions\r\n   * complete.\r\n   */\n\n\n  DatabaseStorage.prototype.closeConnection = function () {\n    var db = this.db;\n\n    if (db && this.dbOpen) {\n      db.close();\n      this.dbOpen = false;\n    }\n  };\n  /**\r\n   * Opens database if it's not already open\r\n   */\n\n\n  DatabaseStorage.prototype.validateDbIsOpen = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.dbOpen) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.open()];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves item from IndexedDB instance.\r\n   * @param key\r\n   */\n\n\n  DatabaseStorage.prototype.getItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGet = objectStore.get(key);\n              dbGet.addEventListener(\"success\", function (e) {\n                var event = e;\n\n                _this.closeConnection();\n\n                resolve(event.target.result);\n              });\n              dbGet.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Adds item to IndexedDB under given key\r\n   * @param key\r\n   * @param payload\r\n   */\n\n\n  DatabaseStorage.prototype.setItem = function (key, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbPut = objectStore.put(payload, key);\n              dbPut.addEventListener(\"success\", function () {\n                _this.closeConnection();\n\n                resolve();\n              });\n              dbPut.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes item from IndexedDB under given key\r\n   * @param key\r\n   */\n\n\n  DatabaseStorage.prototype.removeItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbDelete = objectStore.delete(key);\n              dbDelete.addEventListener(\"success\", function () {\n                _this.closeConnection();\n\n                resolve();\n              });\n              dbDelete.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get all the keys from the storage object as an iterable array of strings.\r\n   */\n\n\n  DatabaseStorage.prototype.getKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGetKeys = objectStore.getAllKeys();\n              dbGetKeys.addEventListener(\"success\", function (e) {\n                var event = e;\n\n                _this.closeConnection();\n\n                resolve(event.target.result);\n              });\n              dbGetKeys.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * Checks whether there is an object under the search key in the object store\r\n   */\n\n\n  DatabaseStorage.prototype.containsKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbContainsKey = objectStore.count(key);\n              dbContainsKey.addEventListener(\"success\", function (e) {\n                var event = e;\n\n                _this.closeConnection();\n\n                resolve(event.target.result === 1);\n              });\n              dbContainsKey.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\r\n   * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\r\n   * with IndexedDB database versions.\r\n   */\n\n\n  DatabaseStorage.prototype.deleteDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // Check if database being deleted exists\n        if (this.db && this.dbOpen) {\n          this.closeConnection();\n        }\n\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n          deleteDbRequest.addEventListener(\"success\", function () {\n            return resolve(true);\n          });\n          deleteDbRequest.addEventListener(\"blocked\", function () {\n            return resolve(true);\n          });\n          deleteDbRequest.addEventListener(\"error\", function () {\n            return reject(false);\n          });\n        })];\n      });\n    });\n  };\n\n  return DatabaseStorage;\n}();\n\nexport { DatabaseStorage };","map":{"version":3,"sources":["../../src/cache/DatabaseStorage.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { DB_NAME, DB_TABLE_NAME, DB_VERSION } from \"../utils/BrowserConstants\";\r\nimport { IAsyncStorage } from \"./IAsyncMemoryStorage\";\r\n\r\ninterface IDBOpenDBRequestEvent extends Event {\r\n    target: IDBOpenDBRequest & EventTarget;\r\n}\r\n\r\ninterface IDBOpenOnUpgradeNeededEvent extends IDBVersionChangeEvent {\r\n    target: IDBOpenDBRequest & EventTarget;\r\n}\r\n\r\ninterface IDBRequestEvent extends Event {\r\n    target: IDBRequest & EventTarget;\r\n}\r\n\r\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\r\nexport class DatabaseStorage<T> implements IAsyncStorage<T> {\r\n    private db: IDBDatabase|undefined;\r\n    private dbName: string;\r\n    private tableName: string;\r\n    private version: number;\r\n    private dbOpen: boolean;\r\n\r\n    constructor() {\r\n        this.dbName = DB_NAME;\r\n        this.version = DB_VERSION;\r\n        this.tableName = DB_TABLE_NAME;\r\n        this.dbOpen = false;\r\n    }\r\n\r\n    /**\r\n     * Opens IndexedDB instance.\r\n     */\r\n    async open(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const openDB = window.indexedDB.open(this.dbName, this.version);\r\n            openDB.addEventListener(\"upgradeneeded\", (e: IDBVersionChangeEvent) => {\r\n                const event = e as IDBOpenOnUpgradeNeededEvent;\r\n                event.target.result.createObjectStore(this.tableName);\r\n            });\r\n            openDB.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBOpenDBRequestEvent;\r\n                this.db = event.target.result;\r\n                this.dbOpen = true;\r\n                resolve();\r\n            });\r\n            openDB.addEventListener(\"error\",  () => reject(BrowserAuthError.createDatabaseUnavailableError()));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the connection to IndexedDB database when all pending transactions\r\n     * complete.\r\n     */\r\n    closeConnection(): void {\r\n        const db = this.db;\r\n        if (db && this.dbOpen) {\r\n            db.close();\r\n            this.dbOpen = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Opens database if it's not already open\r\n     */\r\n    private async validateDbIsOpen(): Promise<void> {\r\n        if (!this.dbOpen) {\r\n            return await this.open();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves item from IndexedDB instance.\r\n     * @param key \r\n     */\r\n    async getItem(key: string): Promise<T | null> {\r\n        await this.validateDbIsOpen();\r\n        return new Promise<T>((resolve, reject) => {\r\n            // TODO: Add timeouts?\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n            const dbGet = objectStore.get(key);\r\n            \r\n            dbGet.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBRequestEvent;\r\n                this.closeConnection();\r\n                resolve(event.target.result);\r\n            });\r\n\r\n            dbGet.addEventListener(\"error\", (e: Event) => {\r\n                this.closeConnection();\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds item to IndexedDB under given key\r\n     * @param key \r\n     * @param payload \r\n     */\r\n    async setItem(key: string, payload: T): Promise<void> {\r\n        await this.validateDbIsOpen();\r\n        return new Promise<void>((resolve: Function, reject: Function) => {\r\n            // TODO: Add timeouts?\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\r\n\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n\r\n            const dbPut = objectStore.put(payload, key);\r\n\r\n            dbPut.addEventListener(\"success\", () => {\r\n                this.closeConnection();\r\n                resolve();\r\n            });\r\n\r\n            dbPut.addEventListener(\"error\", (e) => {\r\n                this.closeConnection();\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes item from IndexedDB under given key\r\n     * @param key\r\n     */\r\n    async removeItem(key: string): Promise<void> {\r\n        await this.validateDbIsOpen();\r\n        return new Promise<void>((resolve: Function, reject: Function) => {\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n\r\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n            const dbDelete = objectStore.delete(key);\r\n\r\n            dbDelete.addEventListener(\"success\", () => {\r\n                this.closeConnection();\r\n                resolve();\r\n            });\r\n\r\n            dbDelete.addEventListener(\"error\", (e) => {\r\n                this.closeConnection();\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get all the keys from the storage object as an iterable array of strings.\r\n     */\r\n    async getKeys(): Promise<string[]> {\r\n        await this.validateDbIsOpen();\r\n        return new Promise<string[]>((resolve: Function, reject: Function) => {\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n\r\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n            const dbGetKeys = objectStore.getAllKeys();\r\n\r\n            dbGetKeys.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBRequestEvent;\r\n                this.closeConnection();\r\n                resolve(event.target.result);\r\n            });\r\n\r\n            dbGetKeys.addEventListener(\"error\",  (e: Event) => {\r\n                this.closeConnection();\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Checks whether there is an object under the search key in the object store\r\n     */\r\n    async containsKey(key: string): Promise<boolean> {\r\n        await this.validateDbIsOpen();\r\n\r\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n\r\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n            const dbContainsKey = objectStore.count(key);\r\n\r\n            dbContainsKey.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBRequestEvent;\r\n                this.closeConnection();\r\n                resolve(event.target.result === 1);\r\n            });\r\n\r\n            dbContainsKey.addEventListener(\"error\", (e: Event) => {\r\n                this.closeConnection();\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\r\n     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\r\n     * with IndexedDB database versions.\r\n     */\r\n    async deleteDatabase(): Promise<boolean> {\r\n        // Check if database being deleted exists\r\n\r\n        if (this.db && this.dbOpen) {\r\n            this.closeConnection();\r\n        }\r\n\r\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\r\n            const deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\r\n            deleteDbRequest.addEventListener(\"success\", () => resolve(true));\r\n            deleteDbRequest.addEventListener(\"blocked\", () => resolve(true));\r\n            deleteDbRequest.addEventListener(\"error\", () => reject(false));\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}