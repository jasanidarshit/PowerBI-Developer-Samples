{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator, __spread, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, ServerTelemetryManager, AccountEntity, AuthenticationScheme, ClientConfigurationError, StringUtils, PerformanceEvents, AuthorityFactory } from '@azure/msal-common';\nimport { version } from '../packageMetadata.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BaseInteractionClient =\n/** @class */\nfunction () {\n  function BaseInteractionClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) {\n    this.config = config;\n    this.browserStorage = storageImpl;\n    this.browserCrypto = browserCrypto;\n    this.networkClient = this.config.system.networkClient;\n    this.eventHandler = eventHandler;\n    this.navigationClient = navigationClient;\n    this.nativeMessageHandler = nativeMessageHandler;\n    this.correlationId = correlationId || this.browserCrypto.createNewGuid();\n    this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n    this.performanceClient = performanceClient;\n  }\n\n  BaseInteractionClient.prototype.clearCacheOnLogout = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!account) return [3\n            /*break*/\n            , 5];\n\n            if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n              this.logger.verbose(\"Setting active account to null\");\n              this.browserStorage.setActiveAccount(null);\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account))];\n\n          case 2:\n            _a.sent();\n\n            this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            _a.sent();\n\n            this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [3\n            /*break*/\n            , 9];\n\n          case 5:\n            _a.trys.push([5, 8,, 9]);\n\n            this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId); // Clear all accounts and tokens\n\n            return [4\n            /*yield*/\n            , this.browserStorage.clear()];\n\n          case 6:\n            // Clear all accounts and tokens\n            _a.sent(); // Clear any stray keys from IndexedDB\n\n\n            return [4\n            /*yield*/\n            , this.browserCrypto.clearKeystore()];\n\n          case 7:\n            // Clear any stray keys from IndexedDB\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            _a.sent();\n\n            this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n            return [3\n            /*break*/\n            , 9];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Initializer function for all request APIs\r\n   * @param request\r\n   */\n\n\n  BaseInteractionClient.prototype.initializeBaseRequest = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authority, scopes, validatedRequest, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n            this.logger.verbose(\"Initializing BaseAuthRequest\");\n            authority = request.authority || this.config.auth.authority;\n            if (!account) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.validateRequestAuthority(authority, account)];\n\n          case 1:\n            _b.sent();\n\n            _b.label = 2;\n\n          case 2:\n            scopes = __spread(request && request.scopes || []);\n            validatedRequest = __assign(__assign({}, request), {\n              correlationId: this.correlationId,\n              authority: authority,\n              scopes: scopes\n            }); // Set authenticationScheme to BEARER if not explicitly set in the request\n\n            if (!validatedRequest.authenticationScheme) {\n              validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n              this.logger.verbose(\"Authentication Scheme wasn't explicitly set in request, defaulting to \\\"Bearer\\\" request\");\n            } else {\n              if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\n                if (!request.sshJwk) {\n                  throw ClientConfigurationError.createMissingSshJwkError();\n                }\n\n                if (!request.sshKid) {\n                  throw ClientConfigurationError.createMissingSshKidError();\n                }\n              }\n\n              this.logger.verbose(\"Authentication Scheme set to \\\"\" + validatedRequest.authenticationScheme + \"\\\" as configured in Auth request\");\n            }\n\n            if (!(this.config.cache.claimsBasedCachingEnabled && request.claims && !StringUtils.isEmptyObj(request.claims))) return [3\n            /*break*/\n            , 4];\n            _a = validatedRequest;\n            return [4\n            /*yield*/\n            , this.browserCrypto.hashString(request.claims)];\n\n          case 3:\n            _a.requestedClaimsHash = _b.sent();\n            _b.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            , validatedRequest];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * Use to get the redirect uri configured in MSAL or null.\r\n   * @param requestRedirectUri\r\n   * @returns Redirect URL\r\n   *\r\n   */\n\n\n  BaseInteractionClient.prototype.getRedirectUri = function (requestRedirectUri) {\n    this.logger.verbose(\"getRedirectUri called\");\n    var redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();\n    return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\n  };\n  /*\r\n   * If authority provided in the request does not match environment/authority specified\r\n   * in the account or MSAL config, we throw an error.\r\n   */\n\n\n  BaseInteractionClient.prototype.validateRequestAuthority = function (authority, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var discoveredAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getDiscoveredAuthority(authority)];\n\n          case 1:\n            discoveredAuthority = _a.sent();\n\n            if (!discoveredAuthority.isAlias(account.environment)) {\n              throw ClientConfigurationError.createAuthorityMismatchError();\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * @param apiId\r\n   * @param correlationId\r\n   * @param forceRefresh\r\n   */\n\n\n  BaseInteractionClient.prototype.initializeServerTelemetryManager = function (apiId, forceRefresh) {\n    this.logger.verbose(\"initializeServerTelemetryManager called\");\n    var telemetryPayload = {\n      clientId: this.config.auth.clientId,\n      correlationId: this.correlationId,\n      apiId: apiId,\n      forceRefresh: forceRefresh || false,\n      wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n      wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n    };\n    return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n  };\n  /**\r\n   * Used to get a discovered version of the default authority.\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n\n\n  BaseInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authorityOptions;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"getDiscoveredAuthority called\");\n            authorityOptions = {\n              protocolMode: this.config.auth.protocolMode,\n              knownAuthorities: this.config.auth.knownAuthorities,\n              cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n              authorityMetadata: this.config.auth.authorityMetadata\n            };\n            if (!requestAuthority) return [3\n            /*break*/\n            , 2];\n            this.logger.verbose(\"Creating discovered authority with request authority\");\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            this.logger.verbose(\"Creating discovered authority with configured authority\");\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return BaseInteractionClient;\n}();\n\nexport { BaseInteractionClient };","map":{"version":3,"sources":["../../src/interaction_client/BaseInteractionClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto, INetworkModule, Logger, AuthenticationResult, AccountInfo, AccountEntity, BaseAuthRequest, AuthenticationScheme, UrlString, ServerTelemetryManager, ServerTelemetryRequest, ClientConfigurationError, StringUtils, Authority, AuthorityOptions, AuthorityFactory, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\nimport { version } from \"../packageMetadata\";\r\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\n\r\nexport abstract class BaseInteractionClient {\r\n\r\n    protected config: BrowserConfiguration;\r\n    protected browserStorage: BrowserCacheManager;\r\n    protected browserCrypto: ICrypto;\r\n    protected networkClient: INetworkModule;\r\n    protected logger: Logger;\r\n    protected eventHandler: EventHandler;\r\n    protected navigationClient: INavigationClient;\r\n    protected nativeMessageHandler: NativeMessageHandler | undefined;\r\n    protected correlationId: string;\r\n    protected performanceClient: IPerformanceClient;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, performanceClient: IPerformanceClient, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        this.config = config;\r\n        this.browserStorage = storageImpl;\r\n        this.browserCrypto = browserCrypto;\r\n        this.networkClient = this.config.system.networkClient;\r\n        this.eventHandler = eventHandler;\r\n        this.navigationClient = navigationClient;\r\n        this.nativeMessageHandler = nativeMessageHandler;\r\n        this.correlationId = correlationId || this.browserCrypto.createNewGuid();\r\n        this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    abstract acquireToken(request: RedirectRequest|PopupRequest|SsoSilentRequest): Promise<AuthenticationResult|void>;\r\n\r\n    abstract logout(request: EndSessionRequest): Promise<void>;\r\n\r\n    protected async clearCacheOnLogout(account?: AccountInfo| null): Promise<void> {\r\n        if (account) {\r\n            if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\r\n                this.logger.verbose(\"Setting active account to null\");\r\n                this.browserStorage.setActiveAccount(null);\r\n            }\r\n            // Clear given account.\r\n            try {\r\n                await this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account));\r\n                this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\r\n            } catch (error) {\r\n                this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\r\n            }\r\n        } else {\r\n            try {\r\n                this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId);\r\n                // Clear all accounts and tokens\r\n                await this.browserStorage.clear();\r\n                // Clear any stray keys from IndexedDB\r\n                await this.browserCrypto.clearKeystore();\r\n            } catch(e) {\r\n                this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializer function for all request APIs\r\n     * @param request\r\n     */\r\n    protected async initializeBaseRequest(request: Partial<BaseAuthRequest>, account?: AccountInfo): Promise<BaseAuthRequest> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest, request.correlationId);\r\n        this.logger.verbose(\"Initializing BaseAuthRequest\");\r\n        const authority = request.authority || this.config.auth.authority;\r\n\r\n        if (account) {\r\n            await this.validateRequestAuthority(authority, account);\r\n        }\r\n\r\n        const scopes = [...((request && request.scopes) || [])];\r\n\r\n        const validatedRequest: BaseAuthRequest = {\r\n            ...request,\r\n            correlationId: this.correlationId,\r\n            authority,\r\n            scopes\r\n        };\r\n\r\n        // Set authenticationScheme to BEARER if not explicitly set in the request\r\n        if (!validatedRequest.authenticationScheme) {\r\n            validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\r\n            this.logger.verbose(\"Authentication Scheme wasn't explicitly set in request, defaulting to \\\"Bearer\\\" request\");\r\n        } else {\r\n            if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\r\n                if (!request.sshJwk) {\r\n                    throw ClientConfigurationError.createMissingSshJwkError();\r\n                }\r\n                if(!request.sshKid) {\r\n                    throw ClientConfigurationError.createMissingSshKidError();\r\n                }\r\n            }\r\n            this.logger.verbose(`Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`);\r\n        }\r\n\r\n        // Set requested claims hash if claims were requested and claims-based caching is enabled\r\n        if (this.config.cache.claimsBasedCachingEnabled && request.claims && !StringUtils.isEmptyObj(request.claims)) {\r\n            validatedRequest.requestedClaimsHash = await this.browserCrypto.hashString(request.claims);\r\n        }\r\n\r\n        return validatedRequest;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Use to get the redirect uri configured in MSAL or null.\r\n     * @param requestRedirectUri\r\n     * @returns Redirect URL\r\n     *\r\n     */\r\n    getRedirectUri(requestRedirectUri?: string): string {\r\n        this.logger.verbose(\"getRedirectUri called\");\r\n        const redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();\r\n        return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\r\n    }\r\n\r\n    /*\r\n     * If authority provided in the request does not match environment/authority specified \r\n     * in the account or MSAL config, we throw an error.\r\n     */\r\n    async validateRequestAuthority(authority: string, account: AccountInfo): Promise<void> {\r\n        const discoveredAuthority = await this.getDiscoveredAuthority(authority);\r\n        \r\n        if(!discoveredAuthority.isAlias(account.environment)) {\r\n            throw ClientConfigurationError.createAuthorityMismatchError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param apiId\r\n     * @param correlationId\r\n     * @param forceRefresh\r\n     */\r\n    protected initializeServerTelemetryManager(apiId: number, forceRefresh?: boolean): ServerTelemetryManager {\r\n        this.logger.verbose(\"initializeServerTelemetryManager called\");\r\n        const telemetryPayload: ServerTelemetryRequest = {\r\n            clientId: this.config.auth.clientId,\r\n            correlationId: this.correlationId,\r\n            apiId: apiId,\r\n            forceRefresh: forceRefresh || false,\r\n            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\r\n            wrapperVer: this.browserStorage.getWrapperMetadata()[1]\r\n        };\r\n\r\n        return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\r\n    }\r\n\r\n    /**\r\n     * Used to get a discovered version of the default authority.\r\n     * @param requestAuthority\r\n     * @param requestCorrelationId\r\n     */\r\n    protected async getDiscoveredAuthority(requestAuthority?: string): Promise<Authority> {\r\n        this.logger.verbose(\"getDiscoveredAuthority called\");\r\n        const authorityOptions: AuthorityOptions = {\r\n            protocolMode: this.config.auth.protocolMode,\r\n            knownAuthorities: this.config.auth.knownAuthorities,\r\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n            authorityMetadata: this.config.auth.authorityMetadata\r\n        };\r\n\r\n        if (requestAuthority) {\r\n            this.logger.verbose(\"Creating discovered authority with request authority\");\r\n            return await AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger);\r\n        }\r\n\r\n        this.logger.verbose(\"Creating discovered authority with configured authority\");\r\n        return await AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}