{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, Constants } from '../utils/Constants.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { UrlString } from '../url/UrlString.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 Device code client\r\n */\n\nvar DeviceCodeClient =\n/** @class */\nfunction (_super) {\n  __extends(DeviceCodeClient, _super);\n\n  function DeviceCodeClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Gets device code from device code endpoint, calls back to with device code response, and\r\n   * polls token endpoint to exchange device code for tokens\r\n   * @param request\r\n   */\n\n\n  DeviceCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deviceCodeResponse, reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getDeviceCode(request)];\n\n          case 1:\n            deviceCodeResponse = _a.sent();\n            request.deviceCodeCallback(deviceCodeResponse);\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\n\n          case 2:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates device code request and executes http GET\r\n   * @param request\r\n   */\n\n\n  DeviceCodeClient.prototype.getDeviceCode = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, queryString, headers, thumbprint;\n      return __generator(this, function (_a) {\n        queryParametersString = this.createExtraQueryParameters(request);\n        endpoint = UrlString.appendQueryString(this.authority.deviceCodeEndpoint, queryParametersString);\n        queryString = this.createQueryString(request);\n        headers = this.createTokenRequestHeaders();\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: request.authority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        return [2\n        /*return*/\n        , this.executePostRequestToDeviceCodeEndpoint(endpoint, queryString, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the device code request\r\n   * @param request\r\n   */\n\n\n  DeviceCodeClient.prototype.createExtraQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Executes POST request to device code endpoint\r\n   * @param deviceCodeEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   */\n\n\n  DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\n              body: queryString,\n              headers: headers\n            })];\n\n          case 1:\n            _a = _b.sent().body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\n            return [2\n            /*return*/\n            , {\n              userCode: userCode,\n              deviceCode: deviceCode,\n              verificationUri: verificationUri,\n              expiresIn: expiresIn,\n              interval: interval,\n              message: message\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create device code endpoint query parameters and returns string\r\n   */\n\n\n  DeviceCodeClient.prototype.createQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n\n    if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Breaks the polling with specific conditions.\r\n   * @param request CommonDeviceCodeRequest\r\n   * @param deviceCodeResponse DeviceCodeResponse\r\n   */\n\n\n  DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\n    if (userSpecifiedCancelFlag) {\n      this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\n      throw ClientAuthError.createDeviceCodeCancelledError();\n    } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\n      this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\n      throw ClientAuthError.createUserTimeoutReachedError();\n    } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\n      if (userSpecifiedTimeout) {\n        this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\n      }\n\n      this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\n      throw ClientAuthError.createDeviceCodeExpiredError();\n    }\n\n    return true;\n  };\n  /**\r\n   * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n   * response\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n\n\n  DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(this.authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\n            headers = this.createTokenRequestHeaders();\n            userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\n            deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\n            pollingIntervalMilli = deviceCodeResponse.interval * 1000;\n            _a.label = 1;\n\n          case 1:\n            if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3\n            /*break*/\n            , 8];\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n\n          case 2:\n            response = _a.sent();\n            if (!(response.body && response.body.error)) return [3\n            /*break*/\n            , 6];\n            if (!(response.body.error === Constants.AUTHORIZATION_PENDING)) return [3\n            /*break*/\n            , 4];\n            this.logger.info(\"Authorization pending. Continue polling.\");\n            return [4\n            /*yield*/\n            , TimeUtils.delay(pollingIntervalMilli)];\n\n          case 3:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            // for any other error, throw\n            this.logger.info(\"Unexpected error in polling from the server\");\n            throw ServerError.createPostRequestFailed(response.body.error);\n\n          case 5:\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\n            return [2\n            /*return*/\n            , response.body];\n\n          case 7:\n            return [3\n            /*break*/\n            , 1];\n\n          case 8:\n            /*\r\n             * The above code should've thrown by this point, but to satisfy TypeScript,\r\n             * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n             */\n            this.logger.error(\"Polling stopped for unknown reasons.\");\n            throw ClientAuthError.createDeviceCodeUnknownError();\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query parameters and converts to string.\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n\n\n  DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\n    var requestParameters = new RequestParameterBuilder();\n    requestParameters.addScopes(request.scopes);\n    requestParameters.addClientId(this.config.authOptions.clientId);\n    requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\n    requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    requestParameters.addCorrelationId(correlationId);\n    requestParameters.addClientInfo();\n    requestParameters.addLibraryInfo(this.config.libraryInfo);\n    requestParameters.addApplicationTelemetry(this.config.telemetry.application);\n    requestParameters.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      requestParameters.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return requestParameters.createQueryString();\n  };\n\n  return DeviceCodeClient;\n}(BaseClient);\n\nexport { DeviceCodeClient };","map":{"version":3,"sources":["../../src/client/DeviceCodeClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { DeviceCodeResponse, ServerDeviceCodeResponse } from \"../response/DeviceCodeResponse\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { CommonDeviceCodeRequest } from \"../request/CommonDeviceCodeRequest\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { Constants, GrantType } from \"../utils/Constants\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { ServerError } from \"../error/ServerError\";\r\nimport { UrlString } from \"../url/UrlString\";\r\n\r\n/**\r\n * OAuth2.0 Device code client\r\n */\r\nexport class DeviceCodeClient extends BaseClient {\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Gets device code from device code endpoint, calls back to with device code response, and\r\n     * polls token endpoint to exchange device code for tokens\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonDeviceCodeRequest): Promise<AuthenticationResult | null> {\r\n        const deviceCodeResponse: DeviceCodeResponse = await this.getDeviceCode(request);\r\n        request.deviceCodeCallback(deviceCodeResponse);\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response: ServerAuthorizationTokenResponse = await this.acquireTokenWithDeviceCode(\r\n            request,\r\n            deviceCodeResponse);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response);\r\n        return await responseHandler.handleServerTokenResponse(\r\n            response,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates device code request and executes http GET\r\n     * @param request\r\n     */\r\n    private async getDeviceCode(request: CommonDeviceCodeRequest): Promise<DeviceCodeResponse> {\r\n        const queryParametersString = this.createExtraQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(this.authority.deviceCodeEndpoint, queryParametersString);\r\n        const queryString = this.createQueryString(request);\r\n        const headers = this.createTokenRequestHeaders();\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n\r\n        return this.executePostRequestToDeviceCodeEndpoint(endpoint, queryString, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Creates query string for the device code request\r\n     * @param request\r\n     */\r\n    createExtraQueryParameters(request: CommonDeviceCodeRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Executes POST request to device code endpoint\r\n     * @param deviceCodeEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     */\r\n    private async executePostRequestToDeviceCodeEndpoint(\r\n        deviceCodeEndpoint: string,\r\n        queryString: string,\r\n        headers: Record<string, string>,\r\n        thumbprint: RequestThumbprint): Promise<DeviceCodeResponse> {\r\n\r\n        const {\r\n            body: {\r\n                user_code: userCode,\r\n                device_code: deviceCode,\r\n                verification_uri: verificationUri,\r\n                expires_in: expiresIn,\r\n                interval,\r\n                message\r\n            }\r\n        } = await this.networkManager.sendPostRequest<ServerDeviceCodeResponse>(\r\n            thumbprint,\r\n            deviceCodeEndpoint,\r\n            {\r\n                body: queryString,\r\n                headers: headers\r\n            });\r\n\r\n        return {\r\n            userCode,\r\n            deviceCode,\r\n            verificationUri,\r\n            expiresIn,\r\n            interval,\r\n            message\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Create device code endpoint query parameters and returns string\r\n     */\r\n    private createQueryString(request: CommonDeviceCodeRequest): string {\r\n\r\n        const parameterBuilder: RequestParameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Breaks the polling with specific conditions.\r\n     * @param request CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse DeviceCodeResponse\r\n     */\r\n    private continuePolling(\r\n        deviceCodeExpirationTime: number,\r\n        userSpecifiedTimeout?: number,\r\n        userSpecifiedCancelFlag?: boolean,\r\n    ): boolean {\r\n        if (userSpecifiedCancelFlag) {\r\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\r\n            throw ClientAuthError.createDeviceCodeCancelledError();\r\n        } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\r\n            this.logger.error(`User defined timeout for device code polling reached. The timeout was set for ${userSpecifiedTimeout}`);\r\n            throw ClientAuthError.createUserTimeoutReachedError();\r\n        } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\r\n            if (userSpecifiedTimeout) {\r\n                this.logger.verbose(`User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for ${userSpecifiedTimeout}`);\r\n            }\r\n            this.logger.error(`Device code expired. Expiration time of device code was ${deviceCodeExpirationTime}`);\r\n            throw ClientAuthError.createDeviceCodeExpiredError();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n     * response\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    private async acquireTokenWithDeviceCode(\r\n        request: CommonDeviceCodeRequest,\r\n        deviceCodeResponse: DeviceCodeResponse): Promise<ServerAuthorizationTokenResponse> {\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(this.authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\r\n\r\n        const userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\r\n        const deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\r\n        const pollingIntervalMilli = deviceCodeResponse.interval * 1000;\r\n\r\n        /*\r\n         * Poll token endpoint while (device code is not expired AND operation has not been cancelled by\r\n         * setting CancellationToken.cancel = true). POST request is sent at interval set by pollingIntervalMilli\r\n         */\r\n        while (this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) {\r\n            const thumbprint: RequestThumbprint = {\r\n                clientId: this.config.authOptions.clientId,\r\n                authority: request.authority,\r\n                scopes: request.scopes,\r\n                claims: request.claims,\r\n                authenticationScheme: request.authenticationScheme,\r\n                resourceRequestMethod: request.resourceRequestMethod,\r\n                resourceRequestUri: request.resourceRequestUri,\r\n                shrClaims: request.shrClaims,\r\n                sshKid: request.sshKid\r\n            };\r\n            const response = await this.executePostToTokenEndpoint(\r\n                endpoint,\r\n                requestBody,\r\n                headers,\r\n                thumbprint);\r\n\r\n            if (response.body && response.body.error) {\r\n                // user authorization is pending. Sleep for polling interval and try again\r\n                if(response.body.error === Constants.AUTHORIZATION_PENDING) {\r\n                    this.logger.info(\"Authorization pending. Continue polling.\");\r\n                    await TimeUtils.delay(pollingIntervalMilli);\r\n                } else {\r\n                    // for any other error, throw\r\n                    this.logger.info(\"Unexpected error in polling from the server\");\r\n                    throw ServerError.createPostRequestFailed(response.body.error);\r\n                }\r\n            } else {\r\n                this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\r\n                return response.body;\r\n            }\r\n        }\r\n\r\n        /*\r\n         * The above code should've thrown by this point, but to satisfy TypeScript,\r\n         * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n         */\r\n        this.logger.error(\"Polling stopped for unknown reasons.\");\r\n        throw ClientAuthError.createDeviceCodeUnknownError();\r\n    }\r\n\r\n    /**\r\n     * Creates query parameters and converts to string.\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    private createTokenRequestBody(request: CommonDeviceCodeRequest, deviceCodeResponse: DeviceCodeResponse): string {\r\n\r\n        const requestParameters: RequestParameterBuilder = new RequestParameterBuilder();\r\n\r\n        requestParameters.addScopes(request.scopes);\r\n        requestParameters.addClientId(this.config.authOptions.clientId);\r\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\r\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        requestParameters.addCorrelationId(correlationId);\r\n        requestParameters.addClientInfo();\r\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\r\n        requestParameters.addApplicationTelemetry(this.config.telemetry.application);\r\n        requestParameters.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return requestParameters.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}