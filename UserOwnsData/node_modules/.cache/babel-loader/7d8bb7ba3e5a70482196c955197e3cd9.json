{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { CredentialType, CacheType, Separators, Constants, AuthenticationScheme } from '../../utils/Constants.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\r\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\r\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\r\n * }\r\n */\n\nvar CredentialEntity =\n/** @class */\nfunction () {\n  function CredentialEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n\n\n  CredentialEntity.prototype.generateAccountId = function () {\n    return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\n  };\n  /**\r\n   * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n   */\n\n\n  CredentialEntity.prototype.generateCredentialId = function () {\n    return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n\n\n  CredentialEntity.prototype.generateTarget = function () {\n    return CredentialEntity.generateTargetForCacheKey(this.target);\n  };\n  /**\r\n   * generates credential key\r\n   */\n\n\n  CredentialEntity.prototype.generateCredentialKey = function () {\n    return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType, this.requestedClaimsHash);\n  };\n  /**\r\n   * returns the type of the cache (in this case credential)\r\n   */\n\n\n  CredentialEntity.prototype.generateType = function () {\n    switch (this.credentialType) {\n      case CredentialType.ID_TOKEN:\n        return CacheType.ID_TOKEN;\n\n      case CredentialType.ACCESS_TOKEN:\n      case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n        return CacheType.ACCESS_TOKEN;\n\n      case CredentialType.REFRESH_TOKEN:\n        return CacheType.REFRESH_TOKEN;\n\n      default:\n        {\n          throw ClientAuthError.createUnexpectedCredentialTypeError();\n        }\n    }\n  };\n  /**\r\n   * generates credential key\r\n   * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\r\n   */\n\n\n  CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType, requestedClaimsHash) {\n    var credentialKey = [this.generateAccountIdForCacheKey(homeAccountId, environment), this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId), this.generateTargetForCacheKey(target), this.generateClaimsHashForCacheKey(requestedClaimsHash), this.generateSchemeForCacheKey(tokenType)];\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * generates Account Id for keys\r\n   * @param homeAccountId\r\n   * @param environment\r\n   */\n\n\n  CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {\n    var accountId = [homeAccountId, environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generates Credential Id for keys\r\n   * @param credentialType\r\n   * @param realm\r\n   * @param clientId\r\n   * @param familyId\r\n   */\n\n\n  CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {\n    var clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN ? familyId || clientId : clientId;\n    var credentialId = [credentialType, clientOrFamilyId, realm || Constants.EMPTY_STRING];\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n\n\n  CredentialEntity.generateTargetForCacheKey = function (scopes) {\n    return (scopes || Constants.EMPTY_STRING).toLowerCase();\n  };\n  /**\r\n   * Generate requested claims key component as per schema: <requestedClaims>\r\n   */\n\n\n  CredentialEntity.generateClaimsHashForCacheKey = function (requestedClaimsHash) {\n    return (requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\n  };\n  /**\r\n   * Generate scheme key componenet as per schema: <scheme>\r\n   */\n\n\n  CredentialEntity.generateSchemeForCacheKey = function (tokenType) {\n    /*\r\n     * PoP Tokens and SSH certs include scheme in cache key\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n    return tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? tokenType.toLowerCase() : Constants.EMPTY_STRING;\n  };\n\n  return CredentialEntity;\n}();\n\nexport { CredentialEntity };","map":{"version":3,"sources":["../../../src/cache/entities/CredentialEntity.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Separators, CredentialType, CacheType, Constants, AuthenticationScheme } from \"../../utils/Constants\";\r\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\r\n\r\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\r\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\r\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\r\n * }\r\n */\r\nexport class CredentialEntity {\r\n    homeAccountId: string;\r\n    environment: string;\r\n    credentialType: CredentialType;\r\n    clientId: string;\r\n    secret: string;\r\n    familyId?: string;\r\n    realm?: string;\r\n    target?: string;\r\n    userAssertionHash?: string;\r\n    tokenType?: AuthenticationScheme;\r\n    keyId?: string;\r\n    requestedClaimsHash?: string;\r\n\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    generateAccountId(): string {\r\n        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\r\n    }\r\n\r\n    /**\r\n     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n     */\r\n    generateCredentialId(): string {\r\n        return CredentialEntity.generateCredentialIdForCacheKey(\r\n            this.credentialType,\r\n            this.clientId,\r\n            this.realm,\r\n            this.familyId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    generateTarget(): string {\r\n        return CredentialEntity.generateTargetForCacheKey(this.target);\r\n    }\r\n\r\n    /**\r\n     * generates credential key\r\n     */\r\n    generateCredentialKey(): string {\r\n        return CredentialEntity.generateCredentialCacheKey(\r\n            this.homeAccountId,\r\n            this.environment,\r\n            this.credentialType,\r\n            this.clientId,\r\n            this.realm,\r\n            this.target,\r\n            this.familyId,\r\n            this.tokenType,\r\n            this.requestedClaimsHash,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * returns the type of the cache (in this case credential)\r\n     */\r\n    generateType(): number {\r\n        switch (this.credentialType) {\r\n            case CredentialType.ID_TOKEN:\r\n                return CacheType.ID_TOKEN;\r\n            case CredentialType.ACCESS_TOKEN:\r\n            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\r\n                return CacheType.ACCESS_TOKEN;\r\n            case CredentialType.REFRESH_TOKEN:\r\n                return CacheType.REFRESH_TOKEN;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedCredentialTypeError();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * generates credential key\r\n     * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\r\n     */\r\n    static generateCredentialCacheKey(\r\n        homeAccountId: string,\r\n        environment: string,\r\n        credentialType: CredentialType,\r\n        clientId: string,\r\n        realm?: string,\r\n        target?: string,\r\n        familyId?: string,\r\n        tokenType?: AuthenticationScheme,\r\n        requestedClaimsHash?: string\r\n    ): string {\r\n        const credentialKey = [\r\n            this.generateAccountIdForCacheKey(homeAccountId, environment),\r\n            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),\r\n            this.generateTargetForCacheKey(target),\r\n            this.generateClaimsHashForCacheKey(requestedClaimsHash),\r\n            this.generateSchemeForCacheKey(tokenType)\r\n        ];\r\n\r\n        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * generates Account Id for keys\r\n     * @param homeAccountId\r\n     * @param environment\r\n     */\r\n    private static generateAccountIdForCacheKey(\r\n        homeAccountId: string,\r\n        environment: string\r\n    ): string {\r\n        const accountId: Array<string> = [homeAccountId, environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generates Credential Id for keys\r\n     * @param credentialType\r\n     * @param realm\r\n     * @param clientId\r\n     * @param familyId\r\n     */\r\n    private static generateCredentialIdForCacheKey(\r\n        credentialType: CredentialType,\r\n        clientId: string,\r\n        realm?: string,\r\n        familyId?: string\r\n    ): string {\r\n        const clientOrFamilyId =\r\n            credentialType === CredentialType.REFRESH_TOKEN\r\n                ? familyId || clientId\r\n                : clientId;\r\n        const credentialId: Array<string> = [\r\n            credentialType,\r\n            clientOrFamilyId,\r\n            realm || Constants.EMPTY_STRING,\r\n        ];\r\n\r\n        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    private static generateTargetForCacheKey(scopes?: string): string {\r\n        return (scopes || Constants.EMPTY_STRING).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate requested claims key component as per schema: <requestedClaims>\r\n     */\r\n    private static generateClaimsHashForCacheKey(requestedClaimsHash?: string): string {\r\n        return(requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate scheme key componenet as per schema: <scheme>\r\n     */\r\n    private static generateSchemeForCacheKey(tokenType?: string): string {\r\n        /*\r\n         * PoP Tokens and SSH certs include scheme in cache key\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        return (tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? tokenType.toLowerCase() : Constants.EMPTY_STRING;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}