{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { RefreshTokenClient } from './RefreshTokenClient.js';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { CacheOutcome } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentFlowClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentFlowClient, _super);\n\n  function SilentFlowClient(configuration, performanceClient) {\n    return _super.call(this, configuration, performanceClient) || this;\n  }\n  /**\r\n   * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n   * the given token and returns the renewed token\r\n   * @param request\r\n   */\n\n\n  SilentFlowClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1, refreshTokenClient;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.acquireCachedToken(request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n              refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\n              return [2\n              /*return*/\n              , refreshTokenClient.acquireTokenByRefreshToken(request)];\n            } else {\n              throw e_1;\n            }\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves token from cache or throws an error if it must be refreshed.\r\n   * @param request\r\n   */\n\n\n  SilentFlowClient.prototype.acquireCachedToken = function (request) {\n    var _a, _b, _c, _d, _e;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var environment, cacheRecord;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            // Cannot renew token if no request object is given.\n            if (!request) {\n              throw ClientConfigurationError.createEmptyTokenRequestError();\n            }\n\n            if (request.forceRefresh) {\n              // Must refresh due to present force_refresh flag.\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (!this.config.cacheOptions.claimsBasedCachingEnabled && !StringUtils.isEmptyObj(request.claims)) {\n              // Must refresh due to presence of claims in request preventing cache lookup\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CLAIMS_REQUESTED_CACHE_SKIPPED);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because claims-based caching is disabled and claims were requested.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n\n\n            if (!request.account) {\n              throw ClientAuthError.createNoAccountInSilentRequestError();\n            }\n\n            environment = request.authority || this.authority.getPreferredCache();\n            cacheRecord = this.cacheManager.readCacheRecord(request.account, request, environment);\n\n            if (!cacheRecord.accessToken) {\n              // Must refresh due to non-existent access_token.\n              (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) || TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Must refresh due to expired access_token.\n              (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n              // Must refresh due to the refresh_in value.\n              (_e = this.serverTelemetryManager) === null || _e === void 0 ? void 0 : _e.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n\n            if (this.config.serverTelemetryManager) {\n              this.config.serverTelemetryManager.incrementCacheHits();\n            }\n\n            return [4\n            /*yield*/\n            , this.generateResultFromCacheRecord(cacheRecord, request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _f.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to build response object from the CacheRecord\r\n   * @param cacheRecord\r\n   */\n\n\n  SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var idTokenObj, authTime;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (cacheRecord.idToken) {\n              idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\n            } // token max_age check\n\n\n            if (request.maxAge || request.maxAge === 0) {\n              authTime = idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.auth_time;\n\n              if (!authTime) {\n                throw ClientAuthError.createAuthTimeNotFoundError();\n              }\n\n              AuthToken.checkMaxAge(authTime, request.maxAge);\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return SilentFlowClient;\n}(BaseClient);\n\nexport { SilentFlowClient };","map":{"version":3,"sources":["../../src/client/SilentFlowClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { RefreshTokenClient } from \"./RefreshTokenClient\";\r\nimport { ClientAuthError, ClientAuthErrorMessage } from \"../error/ClientAuthError\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\r\nimport { CacheOutcome } from \"../utils/Constants\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\n\r\nexport class SilentFlowClient extends BaseClient {\r\n    \r\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\r\n        super(configuration,performanceClient);\r\n    }\r\n    \r\n    /**\r\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n     * the given token and returns the renewed token\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        try {\r\n            return await this.acquireCachedToken(request);\r\n        } catch (e) {\r\n            if (e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\r\n                const refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\r\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */\r\n    async acquireCachedToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        // Cannot renew token if no request object is given.\r\n        if (!request) {\r\n            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n        }\r\n\r\n        if (request.forceRefresh) {\r\n            // Must refresh due to present force_refresh flag.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\r\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        } else if (!this.config.cacheOptions.claimsBasedCachingEnabled && !StringUtils.isEmptyObj(request.claims)) {\r\n            // Must refresh due to presence of claims in request preventing cache lookup\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CLAIMS_REQUESTED_CACHE_SKIPPED);\r\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because claims-based caching is disabled and claims were requested.\");\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        }\r\n\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw ClientAuthError.createNoAccountInSilentRequestError();\r\n        }\r\n\r\n        const environment = request.authority || this.authority.getPreferredCache();\r\n\r\n        const cacheRecord = this.cacheManager.readCacheRecord(request.account, request, environment);\r\n\r\n        if (!cacheRecord.accessToken) {\r\n            // Must refresh due to non-existent access_token.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        } else if (\r\n            TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||\r\n            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)\r\n        ) {\r\n            // Must refresh due to expired access_token.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n            this.logger.info(`SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within ${this.config.systemOptions.tokenRenewalOffsetSeconds} seconds.`);\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\r\n            // Must refresh due to the refresh_in value.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\r\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        }\r\n\r\n        if (this.config.serverTelemetryManager) {\r\n            this.config.serverTelemetryManager.incrementCacheHits();\r\n        }\r\n\r\n        return await this.generateResultFromCacheRecord(cacheRecord, request);\r\n    }\r\n\r\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */\r\n    private async generateResultFromCacheRecord(cacheRecord: CacheRecord, request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        let idTokenObj: AuthToken | undefined;\r\n        if (cacheRecord.idToken) {\r\n            idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\r\n        }\r\n\r\n        // token max_age check\r\n        if (request.maxAge || (request.maxAge === 0)) {\r\n            const authTime = idTokenObj?.claims.auth_time;\r\n            if (!authTime) {\r\n                throw ClientAuthError.createAuthTimeNotFoundError();\r\n            }\r\n\r\n            AuthToken.checkMaxAge(authTime, request.maxAge);\r\n        }\r\n\r\n        return await ResponseHandler.generateAuthenticationResult(\r\n            this.cryptoUtils,\r\n            this.authority,\r\n            cacheRecord,\r\n            true,\r\n            request,\r\n            idTokenObj\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}