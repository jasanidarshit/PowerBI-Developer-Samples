{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { ModernBrowserCrypto } from './ModernBrowserCrypto.js';\nimport { MsrBrowserCrypto } from './MsrBrowserCrypto.js';\nimport { MsBrowserCrypto } from './MsBrowserCrypto.js';\nimport { BrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\n// RSA KeyGen Algorithm\n\nvar PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\"; // SHA-256 hashing algorithm\n\nvar S256_HASH_ALG = \"SHA-256\"; // MOD length for PoP tokens\n\nvar MODULUS_LENGTH = 2048; // Public Exponent\n\nvar PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\n\nvar BrowserCrypto =\n/** @class */\nfunction () {\n  function BrowserCrypto(logger, cryptoOptions) {\n    var _a, _b;\n\n    this.logger = logger;\n    this.cryptoOptions = cryptoOptions;\n\n    if (this.hasBrowserCrypto()) {\n      // Use standard modern web crypto if available\n      this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n      this.subtleCrypto = new ModernBrowserCrypto();\n    } else if (this.hasIECrypto()) {\n      // For IE11, use msCrypto interface\n      this.logger.verbose(\"BrowserCrypto: MS crypto interface available\");\n      this.subtleCrypto = new MsBrowserCrypto();\n    } else if (this.hasMsrCrypto() && ((_a = this.cryptoOptions) === null || _a === void 0 ? void 0 : _a.useMsrCrypto)) {\n      // For other browsers, use MSR Crypto if found\n      this.logger.verbose(\"BrowserCrypto: MSR crypto interface available\");\n      this.subtleCrypto = new MsrBrowserCrypto();\n    } else {\n      if (this.hasMsrCrypto()) {\n        this.logger.info(\"BrowserCrypto: MSR Crypto interface available but system.cryptoOptions.useMsrCrypto not enabled\");\n      }\n\n      this.logger.error(\"BrowserCrypto: No crypto interfaces available.\");\n      throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto, msCrypto, or msrCrypto interfaces not available.\");\n    } // Mainly needed for MSR Crypto: https://github.com/microsoft/MSR-JavaScript-Crypto#random-number-generator-prng\n\n\n    if (this.subtleCrypto.initPrng) {\n      this.logger.verbose(\"BrowserCrypto: Interface requires entropy\");\n\n      if (!((_b = this.cryptoOptions) === null || _b === void 0 ? void 0 : _b.entropy)) {\n        this.logger.error(\"BrowserCrypto: Interface requires entropy but none provided.\");\n        throw BrowserConfigurationAuthError.createEntropyNotProvided();\n      }\n\n      this.logger.verbose(\"BrowserCrypto: Entropy provided\");\n      this.subtleCrypto.initPrng(this.cryptoOptions.entropy);\n    }\n\n    this.keygenAlgorithmOptions = {\n      name: PKCS1_V15_KEYGEN_ALG,\n      hash: S256_HASH_ALG,\n      modulusLength: MODULUS_LENGTH,\n      publicExponent: PUBLIC_EXPONENT\n    };\n  }\n  /**\r\n   * Check whether IE crypto or other browser cryptography is available.\r\n   */\n\n\n  BrowserCrypto.prototype.hasIECrypto = function () {\n    return \"msCrypto\" in window;\n  };\n  /**\r\n   * Check whether browser crypto is available.\r\n   */\n\n\n  BrowserCrypto.prototype.hasBrowserCrypto = function () {\n    return \"crypto\" in window;\n  };\n  /**\r\n   * Check whether MSR crypto polyfill is available\r\n   */\n\n\n  BrowserCrypto.prototype.hasMsrCrypto = function () {\n    return \"msrCrypto\" in window;\n  };\n  /**\r\n   * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n   * @param dataString\r\n   */\n\n\n  BrowserCrypto.prototype.sha256Digest = function (dataString) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        data = BrowserStringUtils.stringToUtf8Arr(dataString); // MSR Crypto wants object with name property, instead of string\n\n        return [2\n        /*return*/\n        , this.subtleCrypto.digest({\n          name: S256_HASH_ALG\n        }, data)];\n      });\n    });\n  };\n  /**\r\n   * Populates buffer with cryptographically random values.\r\n   * @param dataBuffer\r\n   */\n\n\n  BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\n    return this.subtleCrypto.getRandomValues(dataBuffer);\n  };\n  /**\r\n   * Generates a keypair based on current keygen algorithm config.\r\n   * @param extractable\r\n   * @param usages\r\n   */\n\n\n  BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Export key as Json Web Key (JWK)\r\n   * @param key\r\n   * @param format\r\n   */\n\n\n  BrowserCrypto.prototype.exportJwk = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.subtleCrypto.exportKey(key)];\n      });\n    });\n  };\n  /**\r\n   * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n   * @param key\r\n   * @param format\r\n   * @param extractable\r\n   * @param usages\r\n   */\n\n\n  BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Signs given data with given key\r\n   * @param key\r\n   * @param data\r\n   */\n\n\n  BrowserCrypto.prototype.sign = function (key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data)];\n      });\n    });\n  };\n\n  return BrowserCrypto;\n}();\n\nexport { BrowserCrypto };","map":{"version":3,"sources":["../../src/crypto/BrowserCrypto.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { ISubtleCrypto } from \"./ISubtleCrypto\";\r\nimport { ModernBrowserCrypto } from \"./ModernBrowserCrypto\";\r\nimport { MsrBrowserCrypto } from \"./MsrBrowserCrypto\";\r\nimport { MsBrowserCrypto } from \"./MsBrowserCrypto\";\r\nimport { Logger } from \"@azure/msal-common\";\r\nimport { BrowserConfigurationAuthError } from \"../error/BrowserConfigurationAuthError\";\r\nimport { CryptoOptions } from \"../config/Configuration\";\r\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\r\n// RSA KeyGen Algorithm\r\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\r\n// SHA-256 hashing algorithm\r\nconst S256_HASH_ALG = \"SHA-256\";\r\n// MOD length for PoP tokens\r\nconst MODULUS_LENGTH = 2048;\r\n// Public Exponent\r\nconst PUBLIC_EXPONENT: Uint8Array = new Uint8Array([0x01, 0x00, 0x01]);\r\n\r\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\r\nexport class BrowserCrypto {\r\n\r\n    private keygenAlgorithmOptions: RsaHashedKeyGenParams;\r\n    private subtleCrypto: ISubtleCrypto;\r\n    private logger: Logger;\r\n    private cryptoOptions?: CryptoOptions;\r\n\r\n    constructor(logger: Logger, cryptoOptions?: CryptoOptions) {\r\n        this.logger = logger;\r\n        this.cryptoOptions = cryptoOptions;\r\n\r\n        if (this.hasBrowserCrypto()) {\r\n            // Use standard modern web crypto if available\r\n            this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\r\n            this.subtleCrypto = new ModernBrowserCrypto();\r\n        } else if (this.hasIECrypto()) {\r\n            // For IE11, use msCrypto interface\r\n            this.logger.verbose(\"BrowserCrypto: MS crypto interface available\");\r\n            this.subtleCrypto = new MsBrowserCrypto();\r\n        } else if (this.hasMsrCrypto() && this.cryptoOptions?.useMsrCrypto) {\r\n            // For other browsers, use MSR Crypto if found\r\n            this.logger.verbose(\"BrowserCrypto: MSR crypto interface available\");\r\n            this.subtleCrypto = new MsrBrowserCrypto();\r\n        } else {\r\n            if (this.hasMsrCrypto()) {\r\n                this.logger.info(\"BrowserCrypto: MSR Crypto interface available but system.cryptoOptions.useMsrCrypto not enabled\");\r\n            }\r\n            this.logger.error(\"BrowserCrypto: No crypto interfaces available.\");\r\n            throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto, msCrypto, or msrCrypto interfaces not available.\");\r\n        }\r\n\r\n        // Mainly needed for MSR Crypto: https://github.com/microsoft/MSR-JavaScript-Crypto#random-number-generator-prng\r\n        if (this.subtleCrypto.initPrng) {\r\n            this.logger.verbose(\"BrowserCrypto: Interface requires entropy\");\r\n\r\n            if (!this.cryptoOptions?.entropy) {\r\n                this.logger.error(\"BrowserCrypto: Interface requires entropy but none provided.\");\r\n                throw BrowserConfigurationAuthError.createEntropyNotProvided();\r\n            }\r\n\r\n            this.logger.verbose(\"BrowserCrypto: Entropy provided\");\r\n            this.subtleCrypto.initPrng(this.cryptoOptions.entropy);\r\n        }\r\n\r\n        this.keygenAlgorithmOptions = {\r\n            name: PKCS1_V15_KEYGEN_ALG,\r\n            hash: S256_HASH_ALG,\r\n            modulusLength: MODULUS_LENGTH,\r\n            publicExponent: PUBLIC_EXPONENT\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Check whether IE crypto or other browser cryptography is available.\r\n     */\r\n    private hasIECrypto(): boolean {\r\n        return \"msCrypto\" in window;\r\n    }\r\n\r\n    /**\r\n     * Check whether browser crypto is available.\r\n     */\r\n    private hasBrowserCrypto(): boolean {\r\n        return \"crypto\" in window;\r\n    }\r\n\r\n    /**\r\n     * Check whether MSR crypto polyfill is available\r\n     */\r\n    private hasMsrCrypto(): boolean {\r\n        return \"msrCrypto\" in window;\r\n    }\r\n\r\n    /**\r\n     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n     * @param dataString \r\n     */\r\n    async sha256Digest(dataString: string): Promise<ArrayBuffer> {\r\n        const data = BrowserStringUtils.stringToUtf8Arr(dataString);\r\n        // MSR Crypto wants object with name property, instead of string\r\n        return this.subtleCrypto.digest({ name: S256_HASH_ALG }, data);\r\n    }\r\n\r\n    /**\r\n     * Populates buffer with cryptographically random values.\r\n     * @param dataBuffer \r\n     */\r\n    getRandomValues(dataBuffer: Uint8Array): Uint8Array {\r\n        return this.subtleCrypto.getRandomValues(dataBuffer);\r\n    }\r\n\r\n    /**\r\n     * Generates a keypair based on current keygen algorithm config.\r\n     * @param extractable \r\n     * @param usages \r\n     */\r\n    async generateKeyPair(extractable: boolean, usages: Array<KeyUsage>): Promise<CryptoKeyPair> {\r\n        return this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages);\r\n    }\r\n\r\n    /**\r\n     * Export key as Json Web Key (JWK)\r\n     * @param key \r\n     * @param format \r\n     */\r\n    async exportJwk(key: CryptoKey): Promise<JsonWebKey> {\r\n        return this.subtleCrypto.exportKey(key);\r\n    }\r\n\r\n    /**\r\n     * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n     * @param key \r\n     * @param format \r\n     * @param extractable \r\n     * @param usages \r\n     */\r\n    async importJwk(key: JsonWebKey, extractable: boolean, usages: Array<KeyUsage>): Promise<CryptoKey> {\r\n        return this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages);\r\n    }\r\n\r\n    /**\r\n     * Signs given data with given key\r\n     * @param key \r\n     * @param data \r\n     */\r\n    async sign(key: CryptoKey, data: ArrayBuffer): Promise<ArrayBuffer> {\r\n        return this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}