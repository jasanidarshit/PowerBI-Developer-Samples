{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError, PerformanceEvents, Constants, StringUtils, PromptValue, UrlString, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentIframeClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentIframeClient, _super);\n\n  function SilentIframeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n\n    _this.apiId = apiId;\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\r\n   * @param request\r\n   */\n\n\n  SilentIframeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, silentRequest, serverTelemetryManager, authClient, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n            this.logger.verbose(\"acquireTokenByIframe called\");\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId); // Check that we have some SSO data\n\n            if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\n              this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n            } // Check that prompt is set to none or no_session, throw error if it is set to anything else.\n\n\n            if (request.prompt && request.prompt !== PromptValue.NONE && request.prompt !== PromptValue.NO_SESSION) {\n              acquireTokenMeasurement.endMeasurement({\n                success: false\n              });\n              throw BrowserAuthError.createSilentPromptValueError(request.prompt);\n            } // Create silent request\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(__assign(__assign({}, request), {\n              prompt: request.prompt || PromptValue.NONE\n            }), InteractionType.Silent)];\n\n          case 1:\n            silentRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 5,, 6]); // Initialize the client\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentIframeClientTokenHelper, request.correlationId);\n            return [4\n            /*yield*/\n            , this.silentTokenHelper(authClient, silentRequest).then(function (result) {\n              acquireTokenMeasurement.endMeasurement({\n                success: true,\n                fromCache: false,\n                requestId: result.requestId\n              });\n              return result;\n            })];\n\n          case 4:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 5:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            acquireTokenMeasurement.endMeasurement({\n              errorCode: e_1 instanceof AuthError && e_1.errorCode || undefined,\n              subErrorCode: e_1 instanceof AuthError && e_1.subError || undefined,\n              success: false\n            });\n            throw e_1;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentIframeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n   * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n   * @param navigateUrl\r\n   * @param userRequestScopes\r\n   */\n\n\n  SilentIframeClient.prototype.silentTokenHelper = function (authClient, silentRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authCodeRequest, navigateUrl, silentHandler, msalFrame, hash, serverParams, state, nativeInteractionClient, userRequestState;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, silentRequest.correlationId); // Create auth code request and generate PKCE params\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, silentRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(silentRequest)];\n\n          case 1:\n            authCodeRequest = _a.sent(); // Create authorize request url\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.GetAuthCodeUrl, silentRequest.correlationId);\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(__assign(__assign({}, silentRequest), {\n              nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\n            }))];\n\n          case 2:\n            navigateUrl = _a.sent();\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient); // Get the frame handle for the silent request\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerInitiateAuthRequest, silentRequest.correlationId);\n            return [4\n            /*yield*/\n            , silentHandler.initiateAuthRequest(navigateUrl)];\n\n          case 3:\n            msalFrame = _a.sent(); // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerMonitorIframeForHash, silentRequest.correlationId);\n            return [4\n            /*yield*/\n            , silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout)];\n\n          case 4:\n            hash = _a.sent();\n            serverParams = UrlString.getDeserializedHash(hash);\n            state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\n\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\n              return [2\n              /*return*/\n              , nativeInteractionClient.acquireToken(__assign(__assign({}, silentRequest), {\n                state: userRequestState,\n                prompt: silentRequest.prompt || PromptValue.NONE\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state);\n              })];\n            } // Handle response from hash string\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromHash, silentRequest.correlationId);\n            return [2\n            /*return*/\n            , silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n        }\n      });\n    });\n  };\n\n  return SilentIframeClient;\n}(StandardInteractionClient);\n\nexport { SilentIframeClient };","map":{"version":3,"sources":["../../src/interaction_client/SilentIframeClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, ICrypto, Logger, StringUtils, PromptValue, CommonAuthorizationCodeRequest, AuthorizationCodeClient, AuthError, Constants, UrlString, ServerAuthorizationCodeResponse, ProtocolUtils, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\r\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\r\n\r\nexport class SilentIframeClient extends StandardInteractionClient {\r\n    protected apiId: ApiId;\r\n    protected nativeStorage: BrowserCacheManager;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\r\n        this.apiId = apiId;\r\n        this.nativeStorage = nativeStorageImpl;\r\n    }\r\n\r\n    /**\r\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\r\n     * @param request\r\n     */\r\n    async acquireToken(request: SsoSilentRequest): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\r\n        this.logger.verbose(\"acquireTokenByIframe called\");\r\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\r\n        // Check that we have some SSO data\r\n        if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\r\n            this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\r\n        }\r\n\r\n        // Check that prompt is set to none or no_session, throw error if it is set to anything else.\r\n        if (request.prompt && (request.prompt !== PromptValue.NONE) && (request.prompt !== PromptValue.NO_SESSION)) {\r\n            acquireTokenMeasurement.endMeasurement({\r\n                success: false\r\n            });\r\n            throw BrowserAuthError.createSilentPromptValueError(request.prompt);\r\n        }\r\n\r\n        // Create silent request\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest({\r\n            ...request,\r\n            prompt: request.prompt || PromptValue.NONE\r\n        }, InteractionType.Silent);\r\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\r\n\r\n        try {\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\r\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentIframeClientTokenHelper, request.correlationId);\r\n            return await this.silentTokenHelper(authClient, silentRequest).then((result: AuthenticationResult) => {\r\n                acquireTokenMeasurement.endMeasurement({\r\n                    success: true,\r\n                    fromCache: false,\r\n                    requestId: result.requestId\r\n                });\r\n                return result;\r\n            });\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByState(silentRequest.state);\r\n            acquireTokenMeasurement.endMeasurement({\r\n                errorCode: e instanceof AuthError && e.errorCode || undefined,\r\n                subErrorCode: e instanceof AuthError && e.subError || undefined,\r\n                success: false\r\n            });\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\r\n    }\r\n\r\n    /**\r\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n     * @param navigateUrl\r\n     * @param userRequestScopes\r\n     */\r\n    protected async silentTokenHelper(authClient: AuthorizationCodeClient, silentRequest: AuthorizationUrlRequest): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, silentRequest.correlationId);\r\n\r\n        // Create auth code request and generate PKCE params\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, silentRequest.correlationId);\r\n        const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(silentRequest);\r\n        // Create authorize request url\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.GetAuthCodeUrl, silentRequest.correlationId);\r\n        const navigateUrl = await authClient.getAuthCodeUrl({\r\n            ...silentRequest,\r\n            nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\r\n        });\r\n\r\n        // Create silent handler\r\n        const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);\r\n        // Get the frame handle for the silent request\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerInitiateAuthRequest, silentRequest.correlationId);\r\n        const msalFrame = await silentHandler.initiateAuthRequest(navigateUrl);\r\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerMonitorIframeForHash, silentRequest.correlationId);\r\n        const hash = await silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout);\r\n        // Deserialize hash fragment response parameters.\r\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\r\n        const state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\r\n\r\n        if (serverParams.accountId) {\r\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\r\n            if (!this.nativeMessageHandler) {\r\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\r\n            }\r\n            const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);\r\n            const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\r\n            return nativeInteractionClient.acquireToken({\r\n                ...silentRequest,\r\n                state: userRequestState,\r\n                prompt: silentRequest.prompt || PromptValue.NONE\r\n            }).finally(() => {\r\n                this.browserStorage.cleanRequestByState(state);\r\n            });\r\n        }\r\n\r\n        // Handle response from hash string\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromHash, silentRequest.correlationId);\r\n        return silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}