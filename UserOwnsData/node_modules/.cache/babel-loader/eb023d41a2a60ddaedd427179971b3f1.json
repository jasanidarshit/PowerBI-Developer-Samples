{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { Constants, CredentialType, GrantType, CacheOutcome, AuthenticationScheme } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 client credential grant\r\n */\n\nvar ClientCredentialClient =\n/** @class */\nfunction (_super) {\n  __extends(ClientCredentialClient, _super);\n\n  function ClientCredentialClient(configuration, appTokenProvider) {\n    var _this = _super.call(this, configuration) || this;\n\n    _this.appTokenProvider = appTokenProvider;\n    return _this;\n  }\n  /**\r\n   * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n   * @param request\r\n   */\n\n\n  ClientCredentialClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            if (!request.skipCache) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3\n            /*break*/\n            , 4];\n            return [2\n            /*return*/\n            , cachedAuthenticationResult];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * looks up cache if the tokens are cached already\r\n   */\n\n\n  ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n\n            if (!cachedAccessToken) {\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: null,\n              idToken: null,\n              accessToken: cachedAccessToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads access token from the cache\r\n   */\n\n\n  ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      homeAccountId: Constants.EMPTY_STRING,\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: ScopeSet.createSearchScopes(this.scopeSet.asArray())\n    };\n    var accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\n\n    if (accessTokens.length < 1) {\n      return null;\n    } else if (accessTokens.length > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * Makes a network call to request the token from the service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTokenResponse, reqTimestamp, appTokenPropviderParameters, appTokenProviderResult, queryParametersString, endpoint, requestBody, headers, thumbprint, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.appTokenProvider) return [3\n            /*break*/\n            , 2];\n            this.logger.info(\"Using appTokenProvider extensibility.\");\n            appTokenPropviderParameters = {\n              correlationId: request.correlationId,\n              tenantId: this.config.authOptions.authority.tenant,\n              scopes: request.scopes,\n              claims: request.claims\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.appTokenProvider(appTokenPropviderParameters)];\n\n          case 1:\n            appTokenProviderResult = _a.sent();\n            serverTokenResponse = {\n              access_token: appTokenProviderResult.accessToken,\n              expires_in: appTokenProviderResult.expiresInSeconds,\n              refresh_in: appTokenProviderResult.refreshInSeconds,\n              token_type: AuthenticationScheme.BEARER\n            };\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n\n          case 3:\n            response = _a.sent();\n            serverTokenResponse = response.body;\n            _a.label = 4;\n\n          case 4:\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(serverTokenResponse);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(serverTokenResponse, this.authority, reqTimestamp, request)];\n\n          case 5:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate the request to the server in the acceptable format\r\n   * @param request\r\n   */\n\n\n  ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes, false);\n    parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    } // Use clientAssertion from request, fallback to client assertion in base configuration\n\n\n    var clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\n\n    if (clientAssertion) {\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return ClientCredentialClient;\n}(BaseClient);\n\nexport { ClientCredentialClient };","map":{"version":3,"sources":["../../src/client/ClientCredentialClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { GrantType , CredentialType, CacheOutcome, Constants, AuthenticationScheme } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { CommonClientCredentialRequest } from \"../request/CommonClientCredentialRequest\";\r\nimport { CredentialFilter } from \"../cache/utils/CacheTypes\";\r\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { IAppTokenProvider } from \"../config/AppTokenProvider\";\r\nimport { UrlString } from \"../url/UrlString\";\r\n\r\n/**\r\n * OAuth2.0 client credential grant\r\n */\r\nexport class ClientCredentialClient extends BaseClient {\r\n\r\n    private scopeSet: ScopeSet;\r\n    private readonly appTokenProvider?: IAppTokenProvider;\r\n\r\n    constructor(configuration: ClientConfiguration, appTokenProvider?: IAppTokenProvider) {\r\n        super(configuration);\r\n        this.appTokenProvider = appTokenProvider;\r\n    }\r\n\r\n    /**\r\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\r\n\r\n        this.scopeSet = new ScopeSet(request.scopes || []);\r\n\r\n        if (request.skipCache) {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n\r\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\r\n        if (cachedAuthenticationResult) {\r\n            return cachedAuthenticationResult;\r\n        } else {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * looks up cache if the tokens are cached already\r\n     */\r\n    private async getCachedAuthenticationResult(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\r\n        \r\n        const cachedAccessToken = this.readAccessTokenFromCache();\r\n\r\n        if (!cachedAccessToken) {\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n            return null;\r\n        }\r\n\r\n        return await ResponseHandler.generateAuthenticationResult(\r\n            this.cryptoUtils,\r\n            this.authority,\r\n            {\r\n                account: null,\r\n                idToken: null,\r\n                accessToken: cachedAccessToken,\r\n                refreshToken: null,\r\n                appMetadata: null\r\n            },\r\n            true,\r\n            request\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Reads access token from the cache\r\n     */\r\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\r\n        const accessTokenFilter: CredentialFilter = {\r\n            homeAccountId: Constants.EMPTY_STRING,\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: ScopeSet.createSearchScopes(this.scopeSet.asArray())\r\n        };\r\n\r\n        const accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\r\n        if (accessTokens.length < 1) {\r\n            return null;\r\n        } else if (accessTokens.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0] as AccessTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Makes a network call to request the token from the service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonClientCredentialRequest, authority: Authority)\r\n        : Promise<AuthenticationResult | null> {\r\n        \r\n        let serverTokenResponse: ServerAuthorizationTokenResponse;\r\n        let reqTimestamp: number;\r\n\r\n        if (this.appTokenProvider) {\r\n            this.logger.info(\"Using appTokenProvider extensibility.\");\r\n\r\n            const appTokenPropviderParameters = {\r\n                correlationId: request.correlationId,\r\n                tenantId: this.config.authOptions.authority.tenant,\r\n                scopes: request.scopes,\r\n                claims: request.claims,\r\n            };\r\n\r\n            reqTimestamp = TimeUtils.nowSeconds();\r\n            const appTokenProviderResult = await this.appTokenProvider(appTokenPropviderParameters);\r\n\r\n            serverTokenResponse = {\r\n                access_token: appTokenProviderResult.accessToken, \r\n                expires_in: appTokenProviderResult.expiresInSeconds,\r\n                refresh_in: appTokenProviderResult.refreshInSeconds,\r\n                token_type : AuthenticationScheme.BEARER\r\n            };\r\n        } else {\r\n            const queryParametersString = this.createTokenQueryParameters(request);\r\n            const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n            const requestBody = this.createTokenRequestBody(request);\r\n            const headers: Record<string, string> = this.createTokenRequestHeaders();\r\n            const thumbprint: RequestThumbprint = {\r\n                clientId: this.config.authOptions.clientId,\r\n                authority: request.authority,\r\n                scopes: request.scopes,\r\n                claims: request.claims,\r\n                authenticationScheme: request.authenticationScheme,\r\n                resourceRequestMethod: request.resourceRequestMethod,\r\n                resourceRequestUri: request.resourceRequestUri,\r\n                shrClaims: request.shrClaims,\r\n                sshKid: request.sshKid\r\n            };\r\n    \r\n            reqTimestamp = TimeUtils.nowSeconds();\r\n            const response = await this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\r\n            serverTokenResponse = response.body;\r\n        }\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        responseHandler.validateTokenResponse(serverTokenResponse);\r\n       \r\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\r\n            serverTokenResponse,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request\r\n        );\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * generate the request to the server in the acceptable format\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonClientCredentialRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes, false);\r\n\r\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n\r\n        parameterBuilder.addThrottling();\r\n        \r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        // Use clientAssertion from request, fallback to client assertion in base configuration\r\n        const clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\r\n\r\n        if (clientAssertion) {\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}