{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { PerformanceEvents, AuthError, RefreshTokenClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentRefreshClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentRefreshClient, _super);\n\n  function SilentRefreshClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Exchanges the refresh token for new tokens\r\n   * @param request\r\n   */\n\n\n  SilentRefreshClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, _a, acquireTokenMeasurement, serverTelemetryManager, refreshTokenClient;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n            _a = [__assign({}, request)];\n            return [4\n            /*yield*/\n            , this.initializeBaseRequest(request, request.account)];\n\n          case 1:\n            silentRequest = __assign.apply(void 0, _a.concat([_b.sent()]));\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n            return [4\n            /*yield*/\n            , this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n\n          case 2:\n            refreshTokenClient = _b.sent();\n            this.logger.verbose(\"Refresh token client created\"); // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n            return [2\n            /*return*/\n            , refreshTokenClient.acquireTokenByRefreshToken(silentRequest).then(function (result) {\n              acquireTokenMeasurement.endMeasurement({\n                success: true,\n                fromCache: result.fromCache,\n                requestId: result.requestId\n              });\n              return result;\n            }).catch(function (e) {\n              if (e instanceof AuthError) {\n                e.setCorrelationId(_this.correlationId);\n              }\n\n              serverTelemetryManager.cacheFailedRequest(e);\n              acquireTokenMeasurement.endMeasurement({\n                errorCode: e.errorCode,\n                subErrorCode: e.subError,\n                success: false\n              });\n              throw e;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentRefreshClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Creates a Refresh Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n\n\n  SilentRefreshClient.prototype.createRefreshTokenClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Create auth module.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];\n\n          case 1:\n            clientConfig = _a.sent();\n            return [2\n            /*return*/\n            , new RefreshTokenClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n\n  return SilentRefreshClient;\n}(StandardInteractionClient);\n\nexport { SilentRefreshClient };","map":{"version":3,"sources":["../../src/interaction_client/SilentRefreshClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { CommonSilentFlowRequest, AuthenticationResult, ServerTelemetryManager, RefreshTokenClient, AuthError, AzureCloudOptions, PerformanceEvents } from \"@azure/msal-common\";\r\nimport { ApiId } from \"../utils/BrowserConstants\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\n\r\nexport class SilentRefreshClient extends StandardInteractionClient {\r\n    /**\r\n     * Exchanges the refresh token for new tokens\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, request.correlationId);\r\n        const silentRequest: CommonSilentFlowRequest = {\r\n            ...request,\r\n            ...await this.initializeBaseRequest(request, request.account)\r\n        };\r\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\r\n\r\n        const refreshTokenClient = await this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\r\n        this.logger.verbose(\"Refresh token client created\");\r\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\r\n        return refreshTokenClient.acquireTokenByRefreshToken(silentRequest)\r\n            .then((result: AuthenticationResult) => {\r\n                acquireTokenMeasurement.endMeasurement({\r\n                    success: true,\r\n                    fromCache: result.fromCache,\r\n                    requestId: result.requestId\r\n                });\r\n\r\n                return result;\r\n            })\r\n            .catch((e: AuthError) => {\r\n                if (e instanceof AuthError) {\r\n                    (e as AuthError).setCorrelationId(this.correlationId);\r\n                }\r\n                serverTelemetryManager.cacheFailedRequest(e);\r\n                acquireTokenMeasurement.endMeasurement({\r\n                    errorCode: e.errorCode,\r\n                    subErrorCode: e.subError,\r\n                    success: false\r\n                });\r\n                throw e;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Currently Unsupported\r\n     */\r\n    logout(): Promise<void> {\r\n        // Synchronous so we must reject\r\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\r\n    }\r\n\r\n    /**\r\n     * Creates a Refresh Client with the given authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param authorityUrl\r\n     */\r\n    protected async createRefreshTokenClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<RefreshTokenClient> {\r\n        // Create auth module.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\r\n        return new RefreshTokenClient(clientConfig, this.performanceClient);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}