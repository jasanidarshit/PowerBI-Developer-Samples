{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __assign, __generator } from '../_virtual/_tslib.js';\nimport { UrlString, Constants, PerformanceEvents, AuthorizationCodeClient, Authority, AuthorityFactory, ResponseMode, StringUtils, ProtocolUtils } from '@azure/msal-common';\nimport { BaseInteractionClient } from './BaseInteractionClient.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { version } from '../packageMetadata.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */\n\nvar StandardInteractionClient =\n/** @class */\nfunction (_super) {\n  __extends(StandardInteractionClient, _super);\n\n  function StandardInteractionClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Generates an auth code request tied to the url request.\r\n   * @param request\r\n   */\n\n\n  StandardInteractionClient.prototype.initializeAuthorizationCodeRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var generatedPkceParams, authCodeRequest;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\n            return [4\n            /*yield*/\n            , this.browserCrypto.generatePkceCodes()];\n\n          case 1:\n            generatedPkceParams = _a.sent();\n            authCodeRequest = __assign(__assign({}, request), {\n              redirectUri: request.redirectUri,\n              code: Constants.EMPTY_STRING,\n              codeVerifier: generatedPkceParams.verifier\n            });\n            request.codeChallenge = generatedPkceParams.challenge;\n            request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n            return [2\n            /*return*/\n            , authCodeRequest];\n        }\n      });\n    });\n  };\n  /**\r\n   * Initializer for the logout request.\r\n   * @param logoutRequest\r\n   */\n\n\n  StandardInteractionClient.prototype.initializeLogoutRequest = function (logoutRequest) {\n    this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);\n\n    var validLogoutRequest = __assign({\n      correlationId: this.correlationId || this.browserCrypto.createNewGuid()\n    }, logoutRequest);\n    /**\r\n     * Set logout_hint to be login_hint from ID Token Claims if present\r\n     * and logoutHint attribute wasn't manually set in logout request\r\n     */\n\n\n    if (logoutRequest) {\n      // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n      if (!logoutRequest.logoutHint) {\n        if (logoutRequest.account) {\n          var logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n\n          if (logoutHint) {\n            this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n            validLogoutRequest.logoutHint = logoutHint;\n          }\n        } else {\n          this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n        }\n      } else {\n        this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n      }\n    } else {\n      this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n    }\n    /*\r\n     * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n     * Otherwise, use passed uri, config, or current page.\r\n     */\n\n\n    if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n      if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else if (this.config.auth.postLogoutRedirectUri === null) {\n        this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n      } else if (this.config.auth.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\n      }\n    } else {\n      this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n    }\n\n    return validLogoutRequest;\n  };\n  /**\r\n   * Parses login_hint ID Token Claim out of AccountInfo object to be used as\r\n   * logout_hint in end session request.\r\n   * @param account\r\n   */\n\n\n  StandardInteractionClient.prototype.getLogoutHintFromIdTokenClaims = function (account) {\n    var idTokenClaims = account.idTokenClaims;\n\n    if (idTokenClaims) {\n      if (idTokenClaims.login_hint) {\n        return idTokenClaims.login_hint;\n      } else {\n        this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n      }\n    } else {\n      this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n    }\n\n    return null;\n  };\n  /**\r\n   * Creates an Authorization Code Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n\n\n  StandardInteractionClient.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId); // Create auth module.\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions)];\n\n          case 1:\n            clientConfig = _a.sent();\n            return [2\n            /*return*/\n            , new AuthorizationCodeClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates a Client Configuration object with the given request authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n\n\n  StandardInteractionClient.prototype.getClientConfiguration = function (serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var discoveredAuthority, logger;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            this.logger.verbose(\"getClientConfiguration called\", this.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n            return [4\n            /*yield*/\n            , this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions)];\n\n          case 1:\n            discoveredAuthority = _a.sent();\n            logger = this.config.system.loggerOptions;\n            return [2\n            /*return*/\n            , {\n              authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities\n              },\n              systemOptions: {\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true\n              },\n              loggerOptions: {\n                loggerCallback: logger.loggerCallback,\n                piiLoggingEnabled: logger.piiLoggingEnabled,\n                logLevel: logger.logLevel,\n                correlationId: this.correlationId\n              },\n              cacheOptions: {\n                claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled\n              },\n              cryptoInterface: this.browserCrypto,\n              networkInterface: this.networkClient,\n              storageInterface: this.browserStorage,\n              serverTelemetryManager: serverTelemetryManager,\n              libraryInfo: {\n                sku: BrowserConstants.MSAL_SKU,\n                version: version,\n                cpu: Constants.EMPTY_STRING,\n                os: Constants.EMPTY_STRING\n              },\n              telemetry: this.config.telemetry\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * @param hash\r\n   * @param interactionType\r\n   */\n\n\n  StandardInteractionClient.prototype.validateAndExtractStateFromHash = function (serverParams, interactionType, requestCorrelationId) {\n    this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\n\n    if (!serverParams.state) {\n      throw BrowserAuthError.createHashDoesNotContainStateError();\n    }\n\n    var platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\n\n    if (!platformStateObj) {\n      throw BrowserAuthError.createUnableToParseStateError();\n    }\n\n    if (platformStateObj.interactionType !== interactionType) {\n      throw BrowserAuthError.createStateInteractionTypeMismatchError();\n    }\n\n    this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\n    return serverParams.state;\n  };\n  /**\r\n   * Used to get a discovered version of the default authority.\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n\n\n  StandardInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority, requestAzureCloudOptions) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var getAuthorityMeasurement, authorityOptions, userAuthority, builtAuthority;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n            this.logger.verbose(\"getDiscoveredAuthority called\", this.correlationId);\n            getAuthorityMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n            authorityOptions = {\n              protocolMode: this.config.auth.protocolMode,\n              knownAuthorities: this.config.auth.knownAuthorities,\n              cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n              authorityMetadata: this.config.auth.authorityMetadata,\n              skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n            };\n            userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;\n            builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\n            this.logger.verbose(\"Creating discovered authority with configured authority\", this.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.correlationId);\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.performanceClient, this.correlationId).then(function (result) {\n              getAuthorityMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              getAuthorityMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false\n              });\n              throw error;\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n   * @param request\r\n   * @param interactionType\r\n   */\n\n\n  StandardInteractionClient.prototype.initializeAuthorizationRequest = function (request, interactionType) {\n    return __awaiter(this, void 0, void 0, function () {\n      var redirectUri, browserState, state, validatedRequest, _a, account, legacyLoginHint;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\n            this.logger.verbose(\"initializeAuthorizationRequest called\", this.correlationId);\n            redirectUri = this.getRedirectUri(request.redirectUri);\n            browserState = {\n              interactionType: interactionType\n            };\n            state = ProtocolUtils.setRequestState(this.browserCrypto, request && request.state || Constants.EMPTY_STRING, browserState);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\n            _a = [{}];\n            return [4\n            /*yield*/\n            , this.initializeBaseRequest(request)];\n\n          case 1:\n            validatedRequest = __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_b.sent()])), {\n              redirectUri: redirectUri,\n              state: state,\n              nonce: request.nonce || this.browserCrypto.createNewGuid(),\n              responseMode: ResponseMode.FRAGMENT\n            }]);\n            account = request.account || this.browserStorage.getActiveAccount();\n\n            if (account) {\n              this.logger.verbose(\"Setting validated request account\", this.correlationId);\n              this.logger.verbosePii(\"Setting validated request account: \" + account.homeAccountId, this.correlationId);\n              validatedRequest.account = account;\n            } // Check for ADAL/MSAL v1 SSO\n\n\n            if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {\n              legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n\n              if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n              }\n            }\n\n            return [2\n            /*return*/\n            , validatedRequest];\n        }\n      });\n    });\n  };\n\n  return StandardInteractionClient;\n}(BaseInteractionClient);\n\nexport { StandardInteractionClient };","map":{"version":3,"sources":["../../src/interaction_client/StandardInteractionClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ServerTelemetryManager, CommonAuthorizationCodeRequest, Constants, AuthorizationCodeClient, ClientConfiguration, AuthorityOptions, Authority, AuthorityFactory, ServerAuthorizationCodeResponse, UrlString, CommonEndSessionRequest, ProtocolUtils, ResponseMode, StringUtils, IdTokenClaims, AccountInfo, AzureCloudOptions, PerformanceEvents, AuthError} from \"@azure/msal-common\";\r\nimport { BaseInteractionClient } from \"./BaseInteractionClient\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { BrowserConstants, InteractionType } from \"../utils/BrowserConstants\";\r\nimport { version } from \"../packageMetadata\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { BrowserProtocolUtils, BrowserStateObject } from \"../utils/BrowserProtocolUtils\";\r\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\n\r\n/**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */\r\nexport abstract class StandardInteractionClient extends BaseInteractionClient {\r\n    /**\r\n     * Generates an auth code request tied to the url request.\r\n     * @param request\r\n     */\r\n    protected async initializeAuthorizationCodeRequest(request: AuthorizationUrlRequest): Promise<CommonAuthorizationCodeRequest> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n        this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\r\n        const generatedPkceParams = await this.browserCrypto.generatePkceCodes();\r\n\r\n        const authCodeRequest: CommonAuthorizationCodeRequest = {\r\n            ...request,\r\n            redirectUri: request.redirectUri,\r\n            code: Constants.EMPTY_STRING,\r\n            codeVerifier: generatedPkceParams.verifier\r\n        };\r\n\r\n        request.codeChallenge = generatedPkceParams.challenge;\r\n        request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\r\n\r\n        return authCodeRequest;\r\n    }\r\n\r\n    /**\r\n     * Initializer for the logout request.\r\n     * @param logoutRequest\r\n     */\r\n    protected initializeLogoutRequest(logoutRequest?: EndSessionRequest): CommonEndSessionRequest {\r\n        this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest?.correlationId);\r\n\r\n        const validLogoutRequest: CommonEndSessionRequest = {\r\n            correlationId: this.correlationId || this.browserCrypto.createNewGuid(),\r\n            ...logoutRequest\r\n        };\r\n\r\n        /**\r\n         * Set logout_hint to be login_hint from ID Token Claims if present\r\n         * and logoutHint attribute wasn't manually set in logout request\r\n         */\r\n        if (logoutRequest) {\r\n            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\r\n            if (!logoutRequest.logoutHint) {\r\n                if(logoutRequest.account) {\r\n                    const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\r\n                    if (logoutHint) {\r\n                        this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\r\n                        validLogoutRequest.logoutHint = logoutHint;\r\n                    }\r\n                } else {\r\n                    this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\r\n                }\r\n            } else {\r\n                this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\r\n            }\r\n        } else {\r\n            this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\r\n        }\r\n\r\n        /*\r\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n         * Otherwise, use passed uri, config, or current page.\r\n         */\r\n        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\r\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\r\n                this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\r\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\r\n            } else if (this.config.auth.postLogoutRedirectUri === null) {\r\n                this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\r\n            } else if (this.config.auth.postLogoutRedirectUri) {\r\n                this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\r\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\r\n            } else {\r\n                this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\r\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\r\n            }\r\n        } else {\r\n            this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\r\n        }\r\n\r\n        return validLogoutRequest;\r\n    }\r\n\r\n    /**\r\n     * Parses login_hint ID Token Claim out of AccountInfo object to be used as\r\n     * logout_hint in end session request.\r\n     * @param account\r\n     */\r\n    protected getLogoutHintFromIdTokenClaims(account: AccountInfo): string | null {\r\n        const idTokenClaims: IdTokenClaims | undefined = account.idTokenClaims;\r\n        if (idTokenClaims) {\r\n            if (idTokenClaims.login_hint) {\r\n                return idTokenClaims.login_hint;\r\n            } else {\r\n                this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\r\n            }\r\n        } else {\r\n            this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Creates an Authorization Code Client with the given authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param authorityUrl\r\n     */\r\n    protected async createAuthCodeClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, requestAzureCloudOptions?: AzureCloudOptions): Promise<AuthorizationCodeClient> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId);\r\n        // Create auth module.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions);\r\n        return new AuthorizationCodeClient(clientConfig, this.performanceClient);\r\n    }\r\n\r\n    /**\r\n     * Creates a Client Configuration object with the given request authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param requestAuthority\r\n     * @param requestCorrelationId\r\n     */\r\n    protected async getClientConfiguration(serverTelemetryManager: ServerTelemetryManager, requestAuthority?: string, requestAzureCloudOptions?: AzureCloudOptions): Promise<ClientConfiguration> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n        this.logger.verbose(\"getClientConfiguration called\", this.correlationId);\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\r\n        const discoveredAuthority = await this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions);\r\n        const logger= this.config.system.loggerOptions;\r\n\r\n        return {\r\n            authOptions: {\r\n                clientId: this.config.auth.clientId,\r\n                authority: discoveredAuthority,\r\n                clientCapabilities: this.config.auth.clientCapabilities\r\n            },\r\n            systemOptions: {\r\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\r\n                preventCorsPreflight: true\r\n            },\r\n            loggerOptions: {\r\n                loggerCallback: logger.loggerCallback,\r\n                piiLoggingEnabled: logger.piiLoggingEnabled,\r\n                logLevel: logger.logLevel,\r\n                correlationId: this.correlationId\r\n            },\r\n            cacheOptions: {\r\n                claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled\r\n            },\r\n            cryptoInterface: this.browserCrypto,\r\n            networkInterface: this.networkClient,\r\n            storageInterface: this.browserStorage,\r\n            serverTelemetryManager: serverTelemetryManager,\r\n            libraryInfo: {\r\n                sku: BrowserConstants.MSAL_SKU,\r\n                version: version,\r\n                cpu: Constants.EMPTY_STRING,\r\n                os: Constants.EMPTY_STRING\r\n            },\r\n            telemetry: this.config.telemetry\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * @param hash\r\n     * @param interactionType\r\n     */\r\n    protected validateAndExtractStateFromHash(serverParams: ServerAuthorizationCodeResponse, interactionType: InteractionType, requestCorrelationId?: string): string {\r\n        this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\r\n        if (!serverParams.state) {\r\n            throw BrowserAuthError.createHashDoesNotContainStateError();\r\n        }\r\n\r\n        const platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\r\n        if (!platformStateObj) {\r\n            throw BrowserAuthError.createUnableToParseStateError();\r\n        }\r\n\r\n        if (platformStateObj.interactionType !== interactionType) {\r\n            throw BrowserAuthError.createStateInteractionTypeMismatchError();\r\n        }\r\n\r\n        this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\r\n        return serverParams.state;\r\n    }\r\n\r\n    /**\r\n     * Used to get a discovered version of the default authority.\r\n     * @param requestAuthority\r\n     * @param requestCorrelationId\r\n     */\r\n    protected async getDiscoveredAuthority(requestAuthority?: string, requestAzureCloudOptions?: AzureCloudOptions): Promise<Authority> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\r\n        this.logger.verbose(\"getDiscoveredAuthority called\", this.correlationId);\r\n        const getAuthorityMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\r\n        const authorityOptions: AuthorityOptions = {\r\n            protocolMode: this.config.auth.protocolMode,\r\n            knownAuthorities: this.config.auth.knownAuthorities,\r\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n            authorityMetadata: this.config.auth.authorityMetadata,\r\n            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\r\n        };\r\n\r\n        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\r\n        const userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;\r\n\r\n        // fall back to the authority from config\r\n        const builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\r\n        this.logger.verbose(\"Creating discovered authority with configured authority\", this.correlationId);\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.correlationId);\r\n        return await AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.performanceClient, this.correlationId)\r\n            .then((result: Authority) => {\r\n                getAuthorityMeasurement.endMeasurement({\r\n                    success: true,\r\n                });\r\n\r\n                return result;\r\n            })\r\n            .catch((error:AuthError) => {\r\n                getAuthorityMeasurement.endMeasurement({\r\n                    errorCode: error.errorCode,\r\n                    subErrorCode: error.subError,\r\n                    success: false\r\n                });\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n     * @param request\r\n     * @param interactionType\r\n     */\r\n    protected async initializeAuthorizationRequest(request: RedirectRequest|PopupRequest|SsoSilentRequest, interactionType: InteractionType): Promise<AuthorizationUrlRequest> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\r\n        this.logger.verbose(\"initializeAuthorizationRequest called\", this.correlationId);\r\n        const redirectUri = this.getRedirectUri(request.redirectUri);\r\n        const browserState: BrowserStateObject = {\r\n            interactionType: interactionType\r\n        };\r\n        const state = ProtocolUtils.setRequestState(\r\n            this.browserCrypto,\r\n            (request && request.state)|| Constants.EMPTY_STRING,\r\n            browserState\r\n        );\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\r\n        const validatedRequest: AuthorizationUrlRequest = {\r\n            ...await this.initializeBaseRequest(request),\r\n            redirectUri: redirectUri,\r\n            state: state,\r\n            nonce: request.nonce || this.browserCrypto.createNewGuid(),\r\n            responseMode: ResponseMode.FRAGMENT\r\n        };\r\n\r\n        const account = request.account || this.browserStorage.getActiveAccount();\r\n        if (account) {\r\n            this.logger.verbose(\"Setting validated request account\", this.correlationId);\r\n            this.logger.verbosePii(`Setting validated request account: ${account.homeAccountId}`, this.correlationId);\r\n            validatedRequest.account = account;\r\n        }\r\n\r\n        // Check for ADAL/MSAL v1 SSO\r\n        if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {\r\n            const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\r\n            if (legacyLoginHint) {\r\n                validatedRequest.loginHint = legacyLoginHint;\r\n            }\r\n        }\r\n\r\n        return validatedRequest;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}