{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { AuthToken, AccountEntity, CacheRecord, Authority, IdTokenEntity, ScopeSet, AccessTokenEntity, RefreshTokenEntity, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Token cache manager\r\n */\n\nvar TokenCache =\n/** @class */\nfunction () {\n  function TokenCache(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  } // Move getAllAccounts here and cache utility APIs\n\n  /**\r\n   * API to load tokens to msal-browser cache.\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   * @returns `AuthenticationResult` for the response that was loaded.\r\n   */\n\n\n  TokenCache.prototype.loadExternalTokens = function (request, response, options) {\n    this.logger.info(\"TokenCache - loadExternalTokens called\");\n\n    if (!response.id_token) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n    }\n\n    var idToken = new AuthToken(response.id_token, this.cryptoObj);\n    var cacheRecord;\n    var authority;\n    var cacheRecordAccount;\n\n    if (request.account) {\n      cacheRecordAccount = AccountEntity.createFromAccountInfo(request.account);\n      cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));\n    } else if (request.authority) {\n      var authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n      var authorityOptions = {\n        protocolMode: this.config.auth.protocolMode,\n        knownAuthorities: this.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: this.config.auth.authorityMetadata,\n        skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n      };\n      authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger); // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n\n      if (options.clientInfo) {\n        this.logger.trace(\"TokenCache - homeAccountId from options\");\n        cacheRecordAccount = this.loadAccount(idToken, authority, options.clientInfo);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else if (response.client_info) {\n        this.logger.trace(\"TokenCache - homeAccountId from response\");\n        cacheRecordAccount = this.loadAccount(idToken, authority, response.client_info);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else {\n        throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n      }\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n    }\n\n    return this.generateAuthenticationResult(request, idToken, cacheRecord, cacheRecordAccount, authority);\n  };\n  /**\r\n   * Helper function to load account to msal-browser cache\r\n   * @param idToken\r\n   * @param environment\r\n   * @param clientInfo\r\n   * @param authorityType\r\n   * @param requestHomeAccountId\r\n   * @returns `AccountEntity`\r\n   */\n\n\n  TokenCache.prototype.loadAccount = function (idToken, authority, clientInfo, requestHomeAccountId) {\n    var homeAccountId;\n\n    if (requestHomeAccountId) {\n      homeAccountId = requestHomeAccountId;\n    } else if (authority.authorityType !== undefined && clientInfo) {\n      homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authority.authorityType, this.logger, this.cryptoObj, idToken.claims);\n    }\n\n    if (!homeAccountId) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\n    }\n\n    var accountEntity = AccountEntity.createAccount({\n      homeAccountId: homeAccountId,\n      idTokenClaims: idToken.claims,\n      clientInfo: clientInfo,\n      environment: authority.hostnameAndPort\n    }, authority);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading account\");\n      this.storage.setAccount(accountEntity);\n      return accountEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load id tokens to msal-browser cache\r\n   * @param idToken\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `IdTokenEntity`\r\n   */\n\n\n  TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId) {\n    var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading id token\");\n      this.storage.setIdTokenCredential(idTokenEntity);\n      return idTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load access tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `AccessTokenEntity`\r\n   */\n\n\n  TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - No access token provided for caching\");\n      return null;\n    }\n\n    if (!response.expires_in) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n    }\n\n    if (!options.extendedExpiresOn) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n    }\n\n    var scopes = new ScopeSet(request.scopes).printScopes();\n    var expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;\n    var extendedExpiresOn = options.extendedExpiresOn;\n    var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading access token\");\n      this.storage.setAccessTokenCredential(accessTokenEntity);\n      return accessTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load refresh tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @returns `RefreshTokenEntity`\r\n   */\n\n\n  TokenCache.prototype.loadRefreshToken = function (request, response, homeAccountId, environment) {\n    if (!response.refresh_token) {\n      this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\n      return null;\n    }\n\n    var refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading refresh token\");\n      this.storage.setRefreshTokenCredential(refreshTokenEntity);\n      return refreshTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to generate an `AuthenticationResult` for the result.\r\n   * @param request\r\n   * @param idTokenObj\r\n   * @param cacheRecord\r\n   * @param accountEntity\r\n   * @param authority\r\n   * @returns `AuthenticationResult`\r\n   */\n\n\n  TokenCache.prototype.generateAuthenticationResult = function (request, idTokenObj, cacheRecord, accountEntity, authority) {\n    var _a;\n\n    var accessToken = Constants.EMPTY_STRING;\n    var responseScopes = [];\n    var expiresOn = null;\n    var extExpiresOn;\n\n    if (cacheRecord.accessToken) {\n      accessToken = cacheRecord.accessToken.secret;\n      responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n      expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n      extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n    }\n\n    var uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\n    var tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\n    return {\n      authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\n      uniqueId: uid,\n      tenantId: tid,\n      scopes: responseScopes,\n      account: accountEntity ? accountEntity.getAccountInfo() : null,\n      idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n      idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n      accessToken: accessToken,\n      fromCache: true,\n      expiresOn: expiresOn,\n      correlationId: request.correlationId || Constants.EMPTY_STRING,\n      requestId: Constants.EMPTY_STRING,\n      extExpiresOn: extExpiresOn,\n      familyId: Constants.EMPTY_STRING,\n      tokenType: ((_a = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\n      state: Constants.EMPTY_STRING,\n      cloudGraphHostName: accountEntity.cloudGraphHostName || Constants.EMPTY_STRING,\n      msGraphHost: accountEntity.msGraphHost || Constants.EMPTY_STRING,\n      code: undefined,\n      fromNativeBroker: false\n    };\n  };\n\n  return TokenCache;\n}();\n\nexport { TokenCache };","map":{"version":3,"sources":["../../src/cache/TokenCache.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccessTokenEntity, ICrypto, IdTokenEntity, Logger, ScopeSet, Authority, AuthorityOptions, ExternalTokenResponse, AccountEntity, AuthToken, RefreshTokenEntity, CacheRecord, AuthenticationResult, Constants } from \"@azure/msal-common\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { BrowserCacheManager } from \"./BrowserCacheManager\";\r\nimport { ITokenCache } from \"./ITokenCache\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\n\r\nexport type LoadTokenOptions = {\r\n    clientInfo?: string,\r\n    expiresOn?: number,\r\n    extendedExpiresOn?: number\r\n};\r\n\r\n/**\r\n * Token cache manager\r\n */\r\nexport class TokenCache implements ITokenCache {\r\n    // Flag to indicate if in browser environment\r\n    public isBrowserEnvironment: boolean;\r\n    // Input configuration by developer/user\r\n    protected config: BrowserConfiguration;\r\n    // Browser cache storage\r\n    private storage: BrowserCacheManager;\r\n    // Logger\r\n    private logger: Logger;\r\n    // Crypto class\r\n    private cryptoObj: ICrypto;\r\n\r\n    constructor(configuration: BrowserConfiguration, storage: BrowserCacheManager, logger: Logger, cryptoObj: ICrypto) {\r\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\r\n        this.config = configuration;\r\n        this.storage = storage;\r\n        this.logger = logger;\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n\r\n    // Move getAllAccounts here and cache utility APIs\r\n\r\n    /**\r\n     * API to load tokens to msal-browser cache.\r\n     * @param request\r\n     * @param response\r\n     * @param options\r\n     * @returns `AuthenticationResult` for the response that was loaded.\r\n     */\r\n    loadExternalTokens(request: SilentRequest, response: ExternalTokenResponse, options: LoadTokenOptions): AuthenticationResult {\r\n        this.logger.info(\"TokenCache - loadExternalTokens called\");\r\n\r\n        if (!response.id_token) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\r\n        }\r\n\r\n        const idToken = new AuthToken(response.id_token, this.cryptoObj);\r\n\r\n        let cacheRecord: CacheRecord;\r\n        let authority: Authority | undefined;\r\n        let cacheRecordAccount: AccountEntity;\r\n\r\n        if (request.account) {\r\n            cacheRecordAccount = AccountEntity.createFromAccountInfo(request.account);\r\n            cacheRecord = new CacheRecord(\r\n                cacheRecordAccount,\r\n                this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId),\r\n                this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options),\r\n                this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment)\r\n            );\r\n        } else if (request.authority) {\r\n\r\n            const authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\r\n            const authorityOptions: AuthorityOptions = {\r\n                protocolMode: this.config.auth.protocolMode,\r\n                knownAuthorities: this.config.auth.knownAuthorities,\r\n                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n                authorityMetadata: this.config.auth.authorityMetadata,\r\n                skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache,\r\n            };\r\n            authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);\r\n\r\n            // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\r\n            if (options.clientInfo) {\r\n                this.logger.trace(\"TokenCache - homeAccountId from options\");\r\n                cacheRecordAccount = this.loadAccount(\r\n                    idToken,\r\n                    authority,\r\n                    options.clientInfo\r\n                );\r\n                cacheRecord = new CacheRecord(\r\n                    cacheRecordAccount,\r\n                    this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant),\r\n                    this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options),\r\n                    this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort)\r\n                );\r\n            } else if (response.client_info) {\r\n                this.logger.trace(\"TokenCache - homeAccountId from response\");\r\n                cacheRecordAccount = this.loadAccount(idToken, authority, response.client_info);\r\n                cacheRecord = new CacheRecord(\r\n                    cacheRecordAccount,\r\n                    this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant),\r\n                    this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options),\r\n                    this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort)\r\n                );\r\n            } else {\r\n                throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\r\n            }\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\r\n        }\r\n\r\n        return this.generateAuthenticationResult(request, idToken, cacheRecord, cacheRecordAccount, authority);\r\n    }\r\n\r\n    /**\r\n     * Helper function to load account to msal-browser cache\r\n     * @param idToken\r\n     * @param environment\r\n     * @param clientInfo\r\n     * @param authorityType\r\n     * @param requestHomeAccountId\r\n     * @returns `AccountEntity`\r\n     */\r\n    private loadAccount(idToken: AuthToken, authority: Authority, clientInfo?: string, requestHomeAccountId?: string): AccountEntity {\r\n\r\n        let homeAccountId;\r\n        if (requestHomeAccountId) {\r\n            homeAccountId = requestHomeAccountId;\r\n        } else if (authority.authorityType !== undefined && clientInfo) {\r\n            homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authority.authorityType, this.logger, this.cryptoObj, idToken.claims);\r\n        }\r\n\r\n        if (!homeAccountId) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\r\n        }\r\n\r\n        const accountEntity = AccountEntity.createAccount({homeAccountId, idTokenClaims: idToken.claims, clientInfo, environment: authority.hostnameAndPort}, authority);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading account\");\r\n\r\n            this.storage.setAccount(accountEntity);\r\n            return accountEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to load id tokens to msal-browser cache\r\n     * @param idToken\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `IdTokenEntity`\r\n     */\r\n    private loadIdToken(idToken: AuthToken, homeAccountId: string, environment: string, tenantId: string): IdTokenEntity {\r\n\r\n        const idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading id token\");\r\n            this.storage.setIdTokenCredential(idTokenEntity);\r\n            return idTokenEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to load access tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `AccessTokenEntity`\r\n     */\r\n    private loadAccessToken(request: SilentRequest, response: ExternalTokenResponse, homeAccountId: string, environment: string, tenantId: string, options: LoadTokenOptions): AccessTokenEntity | null {\r\n\r\n        if (!response.access_token) {\r\n            this.logger.verbose(\"TokenCache - No access token provided for caching\");\r\n            return null;\r\n        }\r\n\r\n        if (!response.expires_in) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\r\n        }\r\n\r\n        if (!options.extendedExpiresOn) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\r\n        }\r\n\r\n        const scopes = new ScopeSet(request.scopes).printScopes();\r\n        const expiresOn = options.expiresOn || (response.expires_in + new Date().getTime() / 1000);\r\n        const extendedExpiresOn = options.extendedExpiresOn;\r\n\r\n        const accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading access token\");\r\n            this.storage.setAccessTokenCredential(accessTokenEntity);\r\n            return accessTokenEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to load refresh tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @returns `RefreshTokenEntity`\r\n     */\r\n    private loadRefreshToken(request: SilentRequest, response: ExternalTokenResponse, homeAccountId: string, environment: string): RefreshTokenEntity | null {\r\n\r\n        if (!response.refresh_token) {\r\n            this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\r\n            return null;\r\n        }\r\n\r\n        const refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\r\n\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading refresh token\");\r\n            this.storage.setRefreshTokenCredential(refreshTokenEntity);\r\n            return refreshTokenEntity;\r\n        } else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to generate an `AuthenticationResult` for the result.\r\n     * @param request\r\n     * @param idTokenObj\r\n     * @param cacheRecord\r\n     * @param accountEntity\r\n     * @param authority\r\n     * @returns `AuthenticationResult`\r\n     */\r\n    private generateAuthenticationResult(\r\n        request: SilentRequest,\r\n        idTokenObj: AuthToken,\r\n        cacheRecord: CacheRecord,\r\n        accountEntity: AccountEntity,\r\n        authority?: Authority,\r\n    ): AuthenticationResult {\r\n        let accessToken: string = Constants.EMPTY_STRING;\r\n        let responseScopes: Array<string> = [];\r\n        let expiresOn: Date | null = null;\r\n        let extExpiresOn: Date | undefined;\r\n\r\n        if (cacheRecord.accessToken) {\r\n            accessToken = cacheRecord.accessToken.secret;\r\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\r\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\r\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\r\n        }\r\n\r\n        const uid = idTokenObj?.claims.oid || idTokenObj?.claims.sub || Constants.EMPTY_STRING;\r\n        const tid = idTokenObj?.claims.tid || Constants.EMPTY_STRING;\r\n\r\n        return {\r\n            authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\r\n            uniqueId: uid,\r\n            tenantId: tid,\r\n            scopes: responseScopes,\r\n            account: accountEntity ? accountEntity.getAccountInfo() : null,\r\n            idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\r\n            idTokenClaims: idTokenObj ? idTokenObj.claims : {},\r\n            accessToken: accessToken,\r\n            fromCache: true,\r\n            expiresOn: expiresOn,\r\n            correlationId: request.correlationId || Constants.EMPTY_STRING,\r\n            requestId: Constants.EMPTY_STRING,\r\n            extExpiresOn: extExpiresOn,\r\n            familyId: Constants.EMPTY_STRING,\r\n            tokenType: cacheRecord?.accessToken?.tokenType || Constants.EMPTY_STRING,\r\n            state: Constants.EMPTY_STRING,\r\n            cloudGraphHostName: accountEntity.cloudGraphHostName || Constants.EMPTY_STRING,\r\n            msGraphHost: accountEntity.msGraphHost || Constants.EMPTY_STRING,\r\n            code: undefined,\r\n            fromNativeBroker: false\r\n        };\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}