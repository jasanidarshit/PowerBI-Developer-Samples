{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { AccountEntity, CacheManager } from '@azure/msal-common';\nimport { EventType } from './EventType.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar EventHandler =\n/** @class */\nfunction () {\n  function EventHandler(logger, browserCrypto) {\n    this.eventCallbacks = new Map();\n    this.logger = logger;\n    this.browserCrypto = browserCrypto;\n    this.listeningToStorageEvents = false;\n    this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\n  }\n  /**\r\n   * Adds event callbacks to array\r\n   * @param callback\r\n   */\n\n\n  EventHandler.prototype.addEventCallback = function (callback) {\n    if (typeof window !== \"undefined\") {\n      var callbackId = this.browserCrypto.createNewGuid();\n      this.eventCallbacks.set(callbackId, callback);\n      this.logger.verbose(\"Event callback registered with id: \" + callbackId);\n      return callbackId;\n    }\n\n    return null;\n  };\n  /**\r\n   * Removes callback with provided id from callback array\r\n   * @param callbackId\r\n   */\n\n\n  EventHandler.prototype.removeEventCallback = function (callbackId) {\n    this.eventCallbacks.delete(callbackId);\n    this.logger.verbose(\"Event callback \" + callbackId + \" removed.\");\n  };\n  /**\r\n   * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n   */\n\n\n  EventHandler.prototype.enableAccountStorageEvents = function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    if (!this.listeningToStorageEvents) {\n      this.logger.verbose(\"Adding account storage listener.\");\n      this.listeningToStorageEvents = true;\n      window.addEventListener(\"storage\", this.handleAccountCacheChange);\n    } else {\n      this.logger.verbose(\"Account storage listener already registered.\");\n    }\n  };\n  /**\r\n   * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n   */\n\n\n  EventHandler.prototype.disableAccountStorageEvents = function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    if (this.listeningToStorageEvents) {\n      this.logger.verbose(\"Removing account storage listener.\");\n      window.removeEventListener(\"storage\", this.handleAccountCacheChange);\n      this.listeningToStorageEvents = false;\n    } else {\n      this.logger.verbose(\"No account storage listener registered.\");\n    }\n  };\n  /**\r\n   * Emits events by calling callback with event message\r\n   * @param eventType\r\n   * @param interactionType\r\n   * @param payload\r\n   * @param error\r\n   */\n\n\n  EventHandler.prototype.emitEvent = function (eventType, interactionType, payload, error) {\n    var _this = this;\n\n    if (typeof window !== \"undefined\") {\n      var message_1 = {\n        eventType: eventType,\n        interactionType: interactionType || null,\n        payload: payload || null,\n        error: error || null,\n        timestamp: Date.now()\n      };\n      this.logger.info(\"Emitting event: \" + eventType);\n      this.eventCallbacks.forEach(function (callback, callbackId) {\n        _this.logger.verbose(\"Emitting event to callback \" + callbackId + \": \" + eventType);\n\n        callback.apply(null, [message_1]);\n      });\n    }\n  };\n  /**\r\n   * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n   */\n\n\n  EventHandler.prototype.handleAccountCacheChange = function (e) {\n    try {\n      var cacheValue = e.newValue || e.oldValue;\n\n      if (!cacheValue) {\n        return;\n      }\n\n      var parsedValue = JSON.parse(cacheValue);\n\n      if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\n        return;\n      }\n\n      var accountEntity = CacheManager.toObject(new AccountEntity(), parsedValue);\n      var accountInfo = accountEntity.getAccountInfo();\n\n      if (!e.oldValue && e.newValue) {\n        this.logger.info(\"Account was added to cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\n      } else if (!e.newValue && e.oldValue) {\n        this.logger.info(\"Account was removed from cache in a different window\");\n        this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\n      }\n    } catch (e) {\n      return;\n    }\n  };\n\n  return EventHandler;\n}();\n\nexport { EventHandler };","map":{"version":3,"sources":["../../src/event/EventHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto, Logger, AccountEntity, CacheManager } from \"@azure/msal-common\";\r\nimport { InteractionType } from \"../utils/BrowserConstants\";\r\nimport { EventCallbackFunction, EventError, EventMessage, EventPayload } from \"./EventMessage\";\r\nimport { EventType } from \"./EventType\";\r\n\r\nexport class EventHandler {\r\n    // Callback for subscribing to events\r\n    private eventCallbacks: Map<string, EventCallbackFunction>;\r\n    private logger: Logger;\r\n    private browserCrypto: ICrypto;\r\n    private listeningToStorageEvents: boolean;\r\n\r\n    constructor(logger: Logger, browserCrypto: ICrypto) {\r\n        this.eventCallbacks = new Map();\r\n        this.logger = logger;\r\n        this.browserCrypto = browserCrypto;\r\n        this.listeningToStorageEvents = false;\r\n        this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     */\r\n    addEventCallback(callback: EventCallbackFunction): string | null {\r\n        if (typeof window !== \"undefined\") {\r\n            const callbackId = this.browserCrypto.createNewGuid();\r\n            this.eventCallbacks.set(callbackId, callback);\r\n            this.logger.verbose(`Event callback registered with id: ${callbackId}`);\r\n    \r\n            return callbackId;\r\n        }\r\n        \r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */\r\n    removeEventCallback(callbackId: string): void {\r\n        this.eventCallbacks.delete(callbackId);\r\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\r\n    }\r\n\r\n    /**\r\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    enableAccountStorageEvents(): void {\r\n        if (typeof window === \"undefined\") {\r\n            return;\r\n        }\r\n\r\n        if (!this.listeningToStorageEvents) {\r\n            this.logger.verbose(\"Adding account storage listener.\");\r\n            this.listeningToStorageEvents = true;\r\n            window.addEventListener(\"storage\", this.handleAccountCacheChange);\r\n        } else {\r\n            this.logger.verbose(\"Account storage listener already registered.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */\r\n    disableAccountStorageEvents(): void {\r\n        if (typeof window === \"undefined\") {\r\n            return;\r\n        }\r\n\r\n        if (this.listeningToStorageEvents) {\r\n            this.logger.verbose(\"Removing account storage listener.\");\r\n            window.removeEventListener(\"storage\", this.handleAccountCacheChange);\r\n            this.listeningToStorageEvents = false;\r\n        } else {\r\n            this.logger.verbose(\"No account storage listener registered.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emits events by calling callback with event message\r\n     * @param eventType\r\n     * @param interactionType\r\n     * @param payload\r\n     * @param error\r\n     */\r\n    emitEvent(eventType: EventType, interactionType?: InteractionType, payload?: EventPayload, error?: EventError): void {\r\n        if (typeof window !== \"undefined\") {\r\n            const message: EventMessage = {\r\n                eventType: eventType,\r\n                interactionType: interactionType || null,\r\n                payload: payload || null,\r\n                error: error || null,\r\n                timestamp: Date.now()\r\n            };\r\n\r\n            this.logger.info(`Emitting event: ${eventType}`);\r\n\r\n            this.eventCallbacks.forEach((callback: EventCallbackFunction, callbackId: string) => {\r\n                this.logger.verbose(`Emitting event to callback ${callbackId}: ${eventType}`);\r\n                callback.apply(null, [message]);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n     */\r\n    private handleAccountCacheChange(e: StorageEvent): void {\r\n        try {\r\n            const cacheValue = e.newValue || e.oldValue;\r\n            if (!cacheValue) {\r\n                return;\r\n            }\r\n            const parsedValue = JSON.parse(cacheValue);\r\n            if (typeof parsedValue !== \"object\" || !AccountEntity.isAccountEntity(parsedValue)) {\r\n                return;\r\n            }\r\n            const accountEntity = CacheManager.toObject<AccountEntity>(new AccountEntity(), parsedValue);\r\n            const accountInfo = accountEntity.getAccountInfo();\r\n            if (!e.oldValue && e.newValue) {\r\n                this.logger.info(\"Account was added to cache in a different window\");\r\n                this.emitEvent(EventType.ACCOUNT_ADDED, undefined, accountInfo);\r\n            } else if (!e.newValue && e.oldValue) {\r\n                this.logger.info(\"Account was removed from cache in a different window\");\r\n                this.emitEvent(EventType.ACCOUNT_REMOVED, undefined, accountInfo);\r\n            }\r\n        } catch (e) {\r\n            return;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}