{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { Separators, Constants } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\n\nfunction buildClientInfo(rawClientInfo, crypto) {\n  if (StringUtils.isEmpty(rawClientInfo)) {\n    throw ClientAuthError.createClientInfoEmptyError();\n  }\n\n  try {\n    var decodedClientInfo = crypto.base64Decode(rawClientInfo);\n    return JSON.parse(decodedClientInfo);\n  } catch (e) {\n    throw ClientAuthError.createClientInfoDecodingError(e.message);\n  }\n}\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\n\n\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\n  if (StringUtils.isEmpty(homeAccountId)) {\n    throw ClientAuthError.createClientInfoDecodingError(\"Home account ID was empty.\");\n  }\n\n  var clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\n  return {\n    uid: clientInfoParts[0],\n    utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\n  };\n}\n\nexport { buildClientInfo, buildClientInfoFromHomeAccountId };","map":{"version":3,"sources":["../../src/account/ClientInfo.ts"],"names":[],"mappings":";;;;;;AAAA;;;AAGG;;AAeH;;;;AAIG;;AACa,SAAA,eAAA,CAAgB,aAAhB,EAAuC,MAAvC,EAAsD;AAClE,MAAI,WAAW,CAAC,OAAZ,CAAoB,aAApB,CAAJ,EAAwC;AACpC,UAAM,eAAe,CAAC,0BAAhB,EAAN;AACH;;AAED,MAAI;AACA,QAAM,iBAAiB,GAAW,MAAM,CAAC,YAAP,CAAoB,aAApB,CAAlC;AACA,WAAO,IAAI,CAAC,KAAL,CAAW,iBAAX,CAAP;AACH,GAHD,CAGE,OAAO,CAAP,EAAU;AACR,UAAM,eAAe,CAAC,6BAAhB,CAA+C,CAAqB,CAAC,OAArE,CAAN;AACH;AACJ;AAED;;;AAGG;;;AACG,SAAU,gCAAV,CAA2C,aAA3C,EAAgE;AAClE,MAAI,WAAW,CAAC,OAAZ,CAAoB,aAApB,CAAJ,EAAwC;AACpC,UAAM,eAAe,CAAC,6BAAhB,CAA8C,4BAA9C,CAAN;AACH;;AACD,MAAM,eAAe,GAAa,aAAa,CAAC,KAAd,CAAoB,UAAU,CAAC,qBAA/B,EAAsD,CAAtD,CAAlC;AACA,SAAO;AACH,IAAA,GAAG,EAAE,eAAe,CAAC,CAAD,CADjB;AAEH,IAAA,IAAI,EAAE,eAAe,CAAC,MAAhB,GAAyB,CAAzB,GAA6B,SAAS,CAAC,YAAvC,GAAsD,eAAe,CAAC,CAAD;AAFxE,GAAP;AAIJ","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ICrypto } from \"../crypto/ICrypto\";\r\nimport { Separators, Constants } from \"../utils/Constants\";\r\n\r\n/**\r\n * Client info object which consists of two IDs. Need to add more info here.\r\n */\r\nexport type ClientInfo = {\r\n    uid: string,\r\n    utid: string\r\n};\r\n\r\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\r\nexport function buildClientInfo(rawClientInfo: string, crypto: ICrypto): ClientInfo {\r\n    if (StringUtils.isEmpty(rawClientInfo)) {\r\n        throw ClientAuthError.createClientInfoEmptyError();\r\n    }\r\n\r\n    try {\r\n        const decodedClientInfo: string = crypto.base64Decode(rawClientInfo);\r\n        return JSON.parse(decodedClientInfo) as ClientInfo;\r\n    } catch (e) {\r\n        throw ClientAuthError.createClientInfoDecodingError((e as ClientAuthError).message);\r\n    }\r\n}\r\n\r\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId \r\n */\r\nexport function buildClientInfoFromHomeAccountId(homeAccountId: string): ClientInfo {\r\n    if (StringUtils.isEmpty(homeAccountId)) {\r\n        throw ClientAuthError.createClientInfoDecodingError(\"Home account ID was empty.\");\r\n    }\r\n    const clientInfoParts: string[] = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\r\n    return {\r\n        uid: clientInfoParts[0],\r\n        utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}