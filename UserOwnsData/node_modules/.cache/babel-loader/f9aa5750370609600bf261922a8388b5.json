{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\n\nvar RequestValidator =\n/** @class */\nfunction () {\n  function RequestValidator() {}\n  /**\r\n   * Utility to check if the `redirectUri` in the request is a non-null value\r\n   * @param redirectUri\r\n   */\n\n\n  RequestValidator.validateRedirectUri = function (redirectUri) {\n    if (StringUtils.isEmpty(redirectUri)) {\n      throw ClientConfigurationError.createRedirectUriEmptyError();\n    }\n  };\n  /**\r\n   * Utility to validate prompt sent by the user in the request\r\n   * @param prompt\r\n   */\n\n\n  RequestValidator.validatePrompt = function (prompt) {\n    var promptValues = [];\n\n    for (var value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n\n    if (promptValues.indexOf(prompt) < 0) {\n      throw ClientConfigurationError.createInvalidPromptError(prompt);\n    }\n  };\n\n  RequestValidator.validateClaims = function (claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidClaimsRequestError();\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge and code_challenge_method\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge_method\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n    }\n  };\n  /**\r\n   * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\r\n   * @param request\r\n   */\n\n\n  RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\n    if (!eQParams) {\n      return {};\n    } // Remove any query parameters already included in SSO params\n\n\n    queryParams.forEach(function (value, key) {\n      if (eQParams[key]) {\n        delete eQParams[key];\n      }\n    }); // remove empty string parameters\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    return Object.fromEntries(Object.entries(eQParams).filter(function (_a) {\n      var value = _a[1];\n      return value !== \"\";\n    }));\n  };\n\n  return RequestValidator;\n}();\n\nexport { RequestValidator };","map":{"version":3,"sources":["../../src/request/RequestValidator.ts"],"names":[],"mappings":";;;;;;AAAA;;;AAGG;;AAOH;;AAEG;;AACH,IAAA,gBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,gBAAA,GAAA,CAoFC;AAlFG;;;AAGG;;;AACI,EAAA,gBAAmB,CAAA,mBAAnB,GAAP,UAA2B,WAA3B,EAA8C;AAC1C,QAAI,WAAW,CAAC,OAAZ,CAAoB,WAApB,CAAJ,EAAsC;AAClC,YAAM,wBAAwB,CAAC,2BAAzB,EAAN;AACH;AACJ,GAJM;AAMP;;;AAGG;;;AACI,EAAA,gBAAc,CAAA,cAAd,GAAP,UAAsB,MAAtB,EAAoC;AAChC,QAAM,YAAY,GAAG,EAArB;;AAEA,SAAK,IAAM,KAAX,IAAoB,WAApB,EAAiC;AAC7B,MAAA,YAAY,CAAC,IAAb,CAAkB,WAAW,CAAC,KAAD,CAA7B;AACH;;AAED,QAAI,YAAY,CAAC,OAAb,CAAqB,MAArB,IAA+B,CAAnC,EAAsC;AAClC,YAAM,wBAAwB,CAAC,wBAAzB,CAAkD,MAAlD,CAAN;AACH;AACJ,GAVM;;AAYA,EAAA,gBAAc,CAAA,cAAd,GAAP,UAAsB,MAAtB,EAAoC;AAChC,QAAI;AACA,MAAA,IAAI,CAAC,KAAL,CAAW,MAAX;AACH,KAFD,CAEE,OAAM,CAAN,EAAS;AACP,YAAM,wBAAwB,CAAC,+BAAzB,EAAN;AACH;AACJ,GANM;AAQP;;;;AAIG;;;AACI,EAAA,gBAAA,CAAA,2BAAA,GAAP,UAAmC,aAAnC,EAA0D,mBAA1D,EAAqF;AACjF,QAAI,WAAW,CAAC,OAAZ,CAAoB,aAApB,KAAsC,WAAW,CAAC,OAAZ,CAAoB,mBAApB,CAA1C,EAAoF;AAChF,YAAM,wBAAwB,CAAC,qCAAzB,EAAN;AACH,KAFD,MAEO;AACH,WAAK,2BAAL,CAAiC,mBAAjC;AACH;AACJ,GANM;AAQP;;;AAGG;;;AACI,EAAA,gBAA2B,CAAA,2BAA3B,GAAP,UAAmC,mBAAnC,EAA8D;AAC1D,QACI,CACI,yBAAyB,CAAC,KAD9B,EAEI,yBAAyB,CAAC,IAF9B,EAGE,OAHF,CAGU,mBAHV,IAGiC,CAJrC,EAKE;AACE,YAAM,wBAAwB,CAAC,qCAAzB,EAAN;AACH;AACJ,GATM;AAWP;;;AAGG;;;AACI,EAAA,gBAAA,CAAA,gBAAA,GAAP,UAAwB,QAAxB,EAA8C,WAA9C,EAA8E;AAC1E,QAAI,CAAC,QAAL,EAAe;AACX,aAAO,EAAP;AACH,KAHyE,C;;;AAM1E,IAAA,WAAW,CAAC,OAAZ,CAAoB,UAAC,KAAD,EAAQ,GAAR,EAAW;AAC3B,UAAI,QAAQ,CAAC,GAAD,CAAZ,EAAmB;AACf,eAAO,QAAQ,CAAC,GAAD,CAAf;AACH;AACJ,KAJD,EAN0E,C;;;AAc1E,WAAO,MAAM,CAAC,WAAP,CAAmB,MAAM,CAAC,OAAP,CAAe,QAAf,EAAyB,MAAzB,CAAgC,UAAC,EAAD,EAAa;UAAN,KAAK,GAAA,EAAA,CAAA,CAAA,C;AAAM,aAAA,KAAK,KAAK,EAAV;AAAY,KAA9D,CAAnB,CAAP;AACH,GAfM;;AAgBX,SAAC,gBAAD;AAAC,CApFD,EAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { PromptValue, CodeChallengeMethodValues} from \"../utils/Constants\";\r\nimport { StringDict } from \"../utils/MsalTypes\";\r\n\r\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\r\nexport class RequestValidator {\r\n\r\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */\r\n    static validateRedirectUri(redirectUri: string) : void {\r\n        if (StringUtils.isEmpty(redirectUri)) {\r\n            throw ClientConfigurationError.createRedirectUriEmptyError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */\r\n    static validatePrompt(prompt: string) : void {\r\n        const promptValues = [];\r\n\r\n        for (const value in PromptValue) {\r\n            promptValues.push(PromptValue[value]);\r\n        }\r\n\r\n        if (promptValues.indexOf(prompt) < 0) {\r\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\r\n        }\r\n    }\r\n\r\n    static validateClaims(claims: string) : void {\r\n        try {\r\n            JSON.parse(claims);\r\n        } catch(e) {\r\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    static validateCodeChallengeParams(codeChallenge: string, codeChallengeMethod: string) : void  {\r\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        } else {\r\n            this.validateCodeChallengeMethod(codeChallengeMethod);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */\r\n    static validateCodeChallengeMethod(codeChallengeMethod: string) : void {\r\n        if (\r\n            [\r\n                CodeChallengeMethodValues.PLAIN,\r\n                CodeChallengeMethodValues.S256\r\n            ].indexOf(codeChallengeMethod) < 0\r\n        ) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    static sanitizeEQParams(eQParams: StringDict, queryParams: Map<string, string>) : StringDict {\r\n        if (!eQParams) {\r\n            return {};\r\n        }\r\n\r\n        // Remove any query parameters already included in SSO params\r\n        queryParams.forEach((value, key) => {\r\n            if (eQParams[key]) {\r\n                delete eQParams[key];\r\n            }\r\n        });\r\n\r\n        // remove empty string parameters\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        return Object.fromEntries(Object.entries(eQParams).filter(([key, value]) => value !== \"\"));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}