{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __extends } from '../../_virtual/_tslib.js';\nimport { CredentialEntity } from './CredentialEntity.js';\nimport { CredentialType, AuthenticationScheme } from '../../utils/Constants.js';\nimport { TimeUtils } from '../../utils/TimeUtils.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { AuthToken } from '../../account/AuthToken.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * ACCESS_TOKEN Credential Type\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      cachedAt: Absolute device time when entry was created in the cache.\r\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\r\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\r\n *      keyId: used for POP and SSH tokenTypes\r\n *      tokenType: Type of the token issued. Usually \"Bearer\"\r\n * }\r\n */\n\nvar AccessTokenEntity =\n/** @class */\nfunction (_super) {\n  __extends(AccessTokenEntity, _super);\n\n  function AccessTokenEntity() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Create AccessTokenEntity\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param accessToken\r\n   * @param clientId\r\n   * @param tenantId\r\n   * @param scopes\r\n   * @param expiresOn\r\n   * @param extExpiresOn\r\n   */\n\n\n  AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\n    var _a, _b;\n\n    var atEntity = new AccessTokenEntity();\n    atEntity.homeAccountId = homeAccountId;\n    atEntity.credentialType = CredentialType.ACCESS_TOKEN;\n    atEntity.secret = accessToken;\n    var currentTime = TimeUtils.nowSeconds();\n    atEntity.cachedAt = currentTime.toString();\n    /*\r\n     * Token expiry time.\r\n     * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\r\n     */\n\n    atEntity.expiresOn = expiresOn.toString();\n    atEntity.extendedExpiresOn = extExpiresOn.toString();\n\n    if (refreshOn) {\n      atEntity.refreshOn = refreshOn.toString();\n    }\n\n    atEntity.environment = environment;\n    atEntity.clientId = clientId;\n    atEntity.realm = tenantId;\n    atEntity.target = scopes;\n    atEntity.userAssertionHash = userAssertionHash;\n    atEntity.tokenType = StringUtils.isEmpty(tokenType) ? AuthenticationScheme.BEARER : tokenType;\n\n    if (requestedClaims) {\n      atEntity.requestedClaims = requestedClaims;\n      atEntity.requestedClaimsHash = requestedClaimsHash;\n    }\n    /*\r\n     * Create Access Token With Auth Scheme instead of regular access token\r\n     * Cast to lower to handle \"bearer\" from ADFS\r\n     */\n\n\n    if (((_a = atEntity.tokenType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== AuthenticationScheme.BEARER.toLowerCase()) {\n      atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n\n      switch (atEntity.tokenType) {\n        case AuthenticationScheme.POP:\n          // Make sure keyId is present and add it to credential\n          var tokenClaims = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\n\n          if (!((_b = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _b === void 0 ? void 0 : _b.kid)) {\n            throw ClientAuthError.createTokenClaimsRequiredError();\n          }\n\n          atEntity.keyId = tokenClaims.cnf.kid;\n          break;\n\n        case AuthenticationScheme.SSH:\n          atEntity.keyId = keyId;\n      }\n    }\n\n    return atEntity;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n\n\n  AccessTokenEntity.isAccessTokenEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\") && entity.hasOwnProperty(\"target\") && (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n  };\n\n  return AccessTokenEntity;\n}(CredentialEntity);\n\nexport { AccessTokenEntity };","map":{"version":3,"sources":["../../../src/cache/entities/AccessTokenEntity.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CredentialEntity } from \"./CredentialEntity\";\r\nimport { CredentialType, AuthenticationScheme } from \"../../utils/Constants\";\r\nimport { TimeUtils } from \"../../utils/TimeUtils\";\r\nimport { StringUtils } from \"../../utils/StringUtils\";\r\nimport { ICrypto } from \"../../crypto/ICrypto\";\r\nimport { TokenClaims } from \"../../account/TokenClaims\";\r\nimport { AuthToken } from \"../../account/AuthToken\";\r\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\r\n\r\n/**\r\n * ACCESS_TOKEN Credential Type\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      cachedAt: Absolute device time when entry was created in the cache.\r\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\r\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\r\n *      keyId: used for POP and SSH tokenTypes\r\n *      tokenType: Type of the token issued. Usually \"Bearer\"\r\n * }\r\n */\r\nexport class AccessTokenEntity extends CredentialEntity {\r\n    realm: string;\r\n    target: string;\r\n    cachedAt: string;\r\n    expiresOn: string;\r\n    extendedExpiresOn?: string;\r\n    refreshOn?: string;\r\n    keyId?: string; // for POP and SSH tokenTypes\r\n    tokenType?: AuthenticationScheme;\r\n    requestedClaims?: string;\r\n    requestedClaimsHash?: string;\r\n\r\n    /**\r\n     * Create AccessTokenEntity\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param accessToken\r\n     * @param clientId\r\n     * @param tenantId\r\n     * @param scopes\r\n     * @param expiresOn\r\n     * @param extExpiresOn\r\n     */\r\n    static createAccessTokenEntity(\r\n        homeAccountId: string,\r\n        environment: string,\r\n        accessToken: string,\r\n        clientId: string,\r\n        tenantId: string,\r\n        scopes: string,\r\n        expiresOn: number,\r\n        extExpiresOn: number,\r\n        cryptoUtils: ICrypto,\r\n        refreshOn?: number,\r\n        tokenType?: AuthenticationScheme,\r\n        userAssertionHash?:string,\r\n        keyId?: string,\r\n        requestedClaims?: string,\r\n        requestedClaimsHash?: string\r\n    ): AccessTokenEntity {\r\n        const atEntity: AccessTokenEntity = new AccessTokenEntity();\r\n\r\n        atEntity.homeAccountId = homeAccountId;\r\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN;\r\n        atEntity.secret = accessToken;\r\n\r\n        const currentTime = TimeUtils.nowSeconds();\r\n        atEntity.cachedAt = currentTime.toString();\r\n\r\n        /*\r\n         * Token expiry time.\r\n         * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\r\n         */\r\n        atEntity.expiresOn = expiresOn.toString();\r\n        atEntity.extendedExpiresOn = extExpiresOn.toString();\r\n        if (refreshOn) {\r\n            atEntity.refreshOn = refreshOn.toString();\r\n        }\r\n\r\n        atEntity.environment = environment;\r\n        atEntity.clientId = clientId;\r\n        atEntity.realm = tenantId;\r\n        atEntity.target = scopes;\r\n        atEntity.userAssertionHash = userAssertionHash;\r\n\r\n        atEntity.tokenType = StringUtils.isEmpty(tokenType) ? AuthenticationScheme.BEARER : tokenType;\r\n\r\n        if (requestedClaims) {\r\n            atEntity.requestedClaims = requestedClaims;\r\n            atEntity.requestedClaimsHash = requestedClaimsHash;\r\n        }\r\n\r\n        /*\r\n         * Create Access Token With Auth Scheme instead of regular access token\r\n         * Cast to lower to handle \"bearer\" from ADFS\r\n         */\r\n        if (atEntity.tokenType?.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) {\r\n            atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n            switch (atEntity.tokenType) {\r\n                case AuthenticationScheme.POP:\r\n                    // Make sure keyId is present and add it to credential\r\n                    const tokenClaims: TokenClaims | null = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\r\n                    if (!tokenClaims?.cnf?.kid) {\r\n                        throw ClientAuthError.createTokenClaimsRequiredError();\r\n                    }\r\n                    atEntity.keyId = tokenClaims.cnf.kid;\r\n                    break;\r\n                case AuthenticationScheme.SSH:\r\n                    atEntity.keyId = keyId;\r\n            }\r\n        }\r\n\r\n        return atEntity;\r\n    }\r\n\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    static isAccessTokenEntity(entity: object): boolean {\r\n\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"credentialType\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"clientId\") &&\r\n            entity.hasOwnProperty(\"secret\") &&\r\n            entity.hasOwnProperty(\"target\") &&\r\n            (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME)\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}