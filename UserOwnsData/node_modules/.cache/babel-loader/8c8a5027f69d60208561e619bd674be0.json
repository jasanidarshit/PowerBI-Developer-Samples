{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { CryptoKeyStore } from '../cache/CryptoKeyStore.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\n\nvar CryptoOps =\n/** @class */\nfunction () {\n  function CryptoOps(logger, performanceClient, cryptoConfig) {\n    this.logger = logger; // Browser crypto needs to be validated first before any other classes can be set.\n\n    this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = new CryptoKeyStore(this.logger);\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n\n\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n\n\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n\n\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var publicKeyThumbMeasurement, keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            publicKeyThumbMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n            return [4\n            /*yield*/\n            , this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n\n          case 1:\n            keyPair = _b.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _b.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\n            return [4\n            /*yield*/\n            , this.hashString(publicJwkString)];\n\n          case 3:\n            publicJwkHash = _b.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.privateKey)];\n\n          case 4:\n            privateKeyJwk = _b.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n\n          case 5:\n            unextractablePrivateKey = _b.sent(); // Store Keypair data in keystore\n\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.setItem(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            })];\n\n          case 6:\n            // Store Keypair data in keystore\n            _b.sent();\n\n            if (publicKeyThumbMeasurement) {\n              publicKeyThumbMeasurement.endMeasurement({\n                success: true\n              });\n            }\n\n            return [2\n            /*return*/\n            , publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.removeTokenBindingKey = function (kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyFound;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.removeItem(kid)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.containsKey(kid)];\n\n          case 2:\n            keyFound = _a.sent();\n            return [2\n            /*return*/\n            , !keyFound];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all cryptographic keys from IndexedDB storage\r\n   */\n\n\n  CryptoOps.prototype.clearKeystore = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.clear()];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.signJwt = function (payload, kid, correlationId) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var signJwtMeasurement, cachedKeyPair, publicKeyJwk, publicKeyJwkString, encodedKeyIdThumbprint, shrHeader, encodedShrHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature, signedJwt;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            signJwtMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.getItem(kid)];\n\n          case 1:\n            cachedKeyPair = _b.sent();\n\n            if (!cachedKeyPair) {\n              throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n            }\n\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _b.sent();\n            publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\n            encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({\n              kid: kid\n            }));\n            shrHeader = JoseHeader.getShrHeaderString({\n              kid: encodedKeyIdThumbprint,\n              alg: publicKeyJwk.alg\n            });\n            encodedShrHeader = this.b64Encode.urlEncode(shrHeader); // Generate payload\n\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedShrHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4\n            /*yield*/\n            , this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n\n          case 3:\n            signatureBuffer = _b.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            signedJwt = tokenString + \".\" + encodedSignature;\n\n            if (signJwtMeasurement) {\n              signJwtMeasurement.endMeasurement({\n                success: true\n              });\n            }\n\n            return [2\n            /*return*/\n            , signedJwt];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns the SHA-256 hash of an input string\r\n   * @param plainText\r\n   */\n\n\n  CryptoOps.prototype.hashString = function (plainText) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hashBuffer, hashBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.browserCrypto.sha256Digest(plainText)];\n\n          case 1:\n            hashBuffer = _a.sent();\n            hashBytes = new Uint8Array(hashBuffer);\n            return [2\n            /*return*/\n            , this.b64Encode.urlEncodeArr(hashBytes)];\n        }\n      });\n    });\n  };\n\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  return CryptoOps;\n}();\n\nexport { CryptoOps };","map":{"version":3,"sources":["../../src/crypto/CryptoOps.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto, IPerformanceClient, JoseHeader, Logger, PerformanceEvents, PkceCodes, SignedHttpRequest, SignedHttpRequestParameters } from \"@azure/msal-common\";\r\nimport { GuidGenerator } from \"./GuidGenerator\";\r\nimport { Base64Encode } from \"../encode/Base64Encode\";\r\nimport { Base64Decode } from \"../encode/Base64Decode\";\r\nimport { PkceGenerator } from \"./PkceGenerator\";\r\nimport { BrowserCrypto } from \"./BrowserCrypto\";\r\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { CryptoKeyStore } from \"../cache/CryptoKeyStore\";\r\nimport { CryptoOptions } from \"../config/Configuration\";\r\n\r\nexport type CachedKeyPair = {\r\n    publicKey: CryptoKey,\r\n    privateKey: CryptoKey,\r\n    requestMethod?: string,\r\n    requestUri?: string\r\n};\r\n\r\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and \r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\r\nexport class CryptoOps implements ICrypto {\r\n\r\n    private browserCrypto: BrowserCrypto;\r\n    private guidGenerator: GuidGenerator;\r\n    private b64Encode: Base64Encode;\r\n    private b64Decode: Base64Decode;\r\n    private pkceGenerator: PkceGenerator;\r\n    private logger: Logger;\r\n\r\n    /**\r\n     * CryptoOps can be used in contexts outside a PCA instance,\r\n     * meaning there won't be a performance manager available.\r\n     */\r\n    private performanceClient: IPerformanceClient | undefined;\r\n\r\n    private static POP_KEY_USAGES: Array<KeyUsage> = [\"sign\", \"verify\"];\r\n    private static EXTRACTABLE: boolean = true;\r\n    private cache: CryptoKeyStore;\r\n\r\n    constructor(logger: Logger, performanceClient?: IPerformanceClient, cryptoConfig?: CryptoOptions) {\r\n        this.logger = logger;\r\n        // Browser crypto needs to be validated first before any other classes can be set.\r\n        this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\r\n        this.b64Encode = new Base64Encode();\r\n        this.b64Decode = new Base64Decode();\r\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\r\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\r\n        this.cache = new CryptoKeyStore(this.logger);\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */\r\n    createNewGuid(): string {\r\n        return this.guidGenerator.generateGuid();\r\n    }\r\n\r\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input \r\n     */\r\n    base64Encode(input: string): string {\r\n        return this.b64Encode.encode(input);\r\n    }    \r\n    \r\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input \r\n     */\r\n    base64Decode(input: string): string {\r\n        return this.b64Decode.decode(input);\r\n    }\r\n\r\n    /**\r\n     * Generates PKCE codes used in Authorization Code Flow.\r\n     */\r\n    async generatePkceCodes(): Promise<PkceCodes> {\r\n        return this.pkceGenerator.generateCodes();\r\n    }\r\n\r\n    /**\r\n     * Generates a keypair, stores it and returns a thumbprint\r\n     * @param request\r\n     */\r\n    async getPublicKeyThumbprint(request: SignedHttpRequestParameters): Promise<string> {\r\n        const publicKeyThumbMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\r\n\r\n        // Generate Keypair\r\n        const keyPair: CryptoKeyPair = await this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\r\n\r\n        // Generate Thumbprint for Public Key\r\n        const publicKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.publicKey);\r\n        \r\n        const pubKeyThumprintObj: JsonWebKey = {\r\n            e: publicKeyJwk.e,\r\n            kty: publicKeyJwk.kty,\r\n            n: publicKeyJwk.n\r\n        };\r\n        \r\n        const publicJwkString: string = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\r\n        const publicJwkHash = await this.hashString(publicJwkString);\r\n\r\n        // Generate Thumbprint for Private Key\r\n        const privateKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.privateKey);\r\n        // Re-import private key to make it unextractable\r\n        const unextractablePrivateKey: CryptoKey = await this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\r\n\r\n        // Store Keypair data in keystore\r\n        await this.cache.asymmetricKeys.setItem(\r\n            publicJwkHash, \r\n            {\r\n                privateKey: unextractablePrivateKey,\r\n                publicKey: keyPair.publicKey,\r\n                requestMethod: request.resourceRequestMethod,\r\n                requestUri: request.resourceRequestUri\r\n            }\r\n        );\r\n\r\n        if (publicKeyThumbMeasurement) {\r\n            publicKeyThumbMeasurement.endMeasurement({\r\n                success: true\r\n            });\r\n        }\r\n\r\n        return publicJwkHash;\r\n    }\r\n\r\n    /**\r\n     * Removes cryptographic keypair from key store matching the keyId passed in\r\n     * @param kid \r\n     */\r\n    async removeTokenBindingKey(kid: string): Promise<boolean> {\r\n        await this.cache.asymmetricKeys.removeItem(kid);\r\n        const keyFound = await this.cache.asymmetricKeys.containsKey(kid);\r\n        return !keyFound;\r\n    }\r\n\r\n    /**\r\n     * Removes all cryptographic keys from IndexedDB storage\r\n     */\r\n    async clearKeystore(): Promise<boolean> {\r\n        return await this.cache.clear();\r\n    }\r\n\r\n    /**\r\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n     * @param payload \r\n     * @param kid \r\n     */\r\n    async signJwt(payload: SignedHttpRequest, kid: string, correlationId?: string): Promise<string> {\r\n        const signJwtMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\r\n        const cachedKeyPair = await this.cache.asymmetricKeys.getItem(kid);\r\n        \r\n        if (!cachedKeyPair) {\r\n            throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\r\n        }\r\n\r\n        // Get public key as JWK\r\n        const publicKeyJwk = await this.browserCrypto.exportJwk(cachedKeyPair.publicKey);\r\n        const publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\r\n\r\n        // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: \"FULL_PUBLIC_KEY_HASH\" })\r\n        const encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({ kid: kid }));\r\n        \r\n        // Generate header\r\n        const shrHeader = JoseHeader.getShrHeaderString({ kid: encodedKeyIdThumbprint, alg: publicKeyJwk.alg });\r\n        const encodedShrHeader = this.b64Encode.urlEncode(shrHeader);\r\n\r\n        // Generate payload\r\n        payload.cnf = {\r\n            jwk: JSON.parse(publicKeyJwkString)\r\n        };\r\n        const encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\r\n\r\n        // Form token string\r\n        const tokenString = `${encodedShrHeader}.${encodedPayload}`;\r\n\r\n        // Sign token\r\n        const tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\r\n        const signatureBuffer = await this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer);\r\n        const encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\r\n\r\n        const signedJwt = `${tokenString}.${encodedSignature}`;\r\n\r\n        if (signJwtMeasurement) {\r\n            signJwtMeasurement.endMeasurement({\r\n                success: true\r\n            });\r\n        }\r\n\r\n        return signedJwt;\r\n    }\r\n\r\n    /**\r\n     * Returns the SHA-256 hash of an input string\r\n     * @param plainText\r\n     */\r\n    async hashString(plainText: string): Promise<string> {\r\n        const hashBuffer: ArrayBuffer = await this.browserCrypto.sha256Digest(plainText);\r\n        const hashBytes = new Uint8Array(hashBuffer);\r\n        return this.b64Encode.urlEncodeArr(hashBytes);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}