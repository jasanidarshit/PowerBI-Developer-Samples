{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AuthenticationScheme, CredentialType, GrantType, AADServerParamKeys, CacheOutcome, Constants } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * On-Behalf-Of client\r\n */\n\nvar OnBehalfOfClient =\n/** @class */\nfunction (_super) {\n  __extends(OnBehalfOfClient, _super);\n\n  function OnBehalfOfClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire tokens with on behalf of flow\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []); // generate the user_assertion_hash for OBOAssertion\n\n            _a = this;\n            return [4\n            /*yield*/\n            , this.cryptoUtils.hashString(request.oboAssertion)];\n\n          case 1:\n            // generate the user_assertion_hash for OBOAssertion\n            _a.userAssertionHash = _b.sent();\n            if (!request.skipCache) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority, this.userAssertionHash)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            _b.trys.push([3, 5,, 7]);\n\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 4:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 5:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority, this.userAssertionHash)];\n\n          case 6:\n            // Any failure falls back to interactive request, once we implement distributed cache, we plan to handle `createRefreshRequiredError` to refresh using the RT\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * look up cache for tokens\r\n   * Find idtoken in the cache\r\n   * Find accessToken based on user assertion and account info in the cache\r\n   * Please note we are not yet supported OBO tokens refreshed with long lived RT. User will have to send a new assertion if the current access token expires\r\n   * This is to prevent security issues when the assertion changes over time, however, longlived RT helps retaining the session\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCacheForOBO(this.config.authOptions.clientId, request);\n\n            if (!cachedAccessToken) {\n              // Must refresh due to non-existent access_token.\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Access token expired, will need to renewed\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              this.logger.info(\"OnbehalfofFlow:getCachedAuthenticationResult - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n\n            cachedIdToken = this.readIdTokenFromCacheForOBO(cachedAccessToken.homeAccountId);\n            cachedAccount = null;\n\n            if (cachedIdToken) {\n              idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\n              localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n              accountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants.EMPTY_STRING,\n                localAccountId: localAccountId || Constants.EMPTY_STRING\n              };\n              cachedAccount = this.cacheManager.readAccountFromCache(accountInfo);\n            } // increment telemetry cache hit counter\n\n\n            if (this.config.serverTelemetryManager) {\n              this.config.serverTelemetryManager.incrementCacheHits();\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: cachedAccount,\n              accessToken: cachedAccessToken,\n              idToken: cachedIdToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request, idTokenObject)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * read idtoken from cache, this is a specific implementation for OBO as the requirements differ from a generic lookup in the cacheManager\r\n   * Certain use cases of OBO flow do not expect an idToken in the cache/or from the service\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.readIdTokenFromCacheForOBO = function (atHomeAccountId) {\n    var idTokenFilter = {\n      homeAccountId: atHomeAccountId,\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant\n    };\n    var idTokens = this.cacheManager.getIdTokensByFilter(idTokenFilter); // When acquiring a token on behalf of an application, there might not be an id token in the cache\n\n    if (idTokens.length < 1) {\n      return null;\n    }\n\n    return idTokens[0];\n  };\n  /**\r\n   * Fetches the cached access token based on incoming assertion\r\n   * @param clientId\r\n   * @param request\r\n   * @param userAssertionHash\r\n   */\n\n\n  OnBehalfOfClient.prototype.readAccessTokenFromCacheForOBO = function (clientId, request) {\n    var authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n    /*\r\n     * Distinguish between Bearer and PoP/SSH token cache types\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n\n    var credentialType = authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n    var accessTokenFilter = {\n      credentialType: credentialType,\n      clientId: clientId,\n      target: ScopeSet.createSearchScopes(this.scopeSet.asArray()),\n      tokenType: authScheme,\n      keyId: request.sshKid,\n      requestedClaimsHash: request.requestedClaimsHash,\n      userAssertionHash: this.userAssertionHash\n    };\n    var accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\n    var numAccessTokens = accessTokens.length;\n\n    if (numAccessTokens < 1) {\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * Make a network call to the server requesting credentials\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority, userAssertionHash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, userAssertionHash)];\n\n          case 2:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate a server request in accepable format\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n    parameterBuilder.addOboAssertion(request.oboAssertion);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (request.claims || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return OnBehalfOfClient;\n}(BaseClient);\n\nexport { OnBehalfOfClient };","map":{"version":3,"sources":["../../src/client/OnBehalfOfClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { GrantType, AADServerParamKeys , CredentialType, Constants, CacheOutcome, AuthenticationScheme } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { CommonOnBehalfOfRequest } from \"../request/CommonOnBehalfOfRequest\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { CredentialFilter } from \"../cache/utils/CacheTypes\";\r\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\r\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\r\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { AccountInfo } from \"../account/AccountInfo\";\r\nimport { UrlString } from \"../url/UrlString\";\r\n\r\n/**\r\n * On-Behalf-Of client\r\n */\r\nexport class OnBehalfOfClient extends BaseClient {\r\n\r\n    private scopeSet: ScopeSet;\r\n    private userAssertionHash: string;\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Public API to acquire tokens with on behalf of flow\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\r\n        this.scopeSet = new ScopeSet(request.scopes || []);\r\n\r\n        // generate the user_assertion_hash for OBOAssertion\r\n        this.userAssertionHash = await this.cryptoUtils.hashString(request.oboAssertion);\r\n\r\n        if (request.skipCache) {\r\n            return await this.executeTokenRequest(request, this.authority, this.userAssertionHash);\r\n        }\r\n\r\n        try {\r\n            return await this.getCachedAuthenticationResult(request);\r\n        } catch (e) {\r\n            // Any failure falls back to interactive request, once we implement distributed cache, we plan to handle `createRefreshRequiredError` to refresh using the RT\r\n            return await this.executeTokenRequest(request, this.authority, this.userAssertionHash);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * look up cache for tokens\r\n     * Find idtoken in the cache\r\n     * Find accessToken based on user assertion and account info in the cache\r\n     * Please note we are not yet supported OBO tokens refreshed with long lived RT. User will have to send a new assertion if the current access token expires\r\n     * This is to prevent security issues when the assertion changes over time, however, longlived RT helps retaining the session\r\n     * @param request\r\n     */\r\n    private async getCachedAuthenticationResult(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\r\n\r\n        // look in the cache for the access_token which matches the incoming_assertion\r\n        const cachedAccessToken = this.readAccessTokenFromCacheForOBO(this.config.authOptions.clientId, request);\r\n        if (!cachedAccessToken) {\r\n            // Must refresh due to non-existent access_token.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        } else if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n            // Access token expired, will need to renewed\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n            this.logger.info(`OnbehalfofFlow:getCachedAuthenticationResult - Cached access token is expired or will expire within ${this.config.systemOptions.tokenRenewalOffsetSeconds} seconds.`);\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        }\r\n\r\n        // fetch the idToken from cache\r\n        const cachedIdToken = this.readIdTokenFromCacheForOBO(cachedAccessToken.homeAccountId);\r\n        let idTokenObject: AuthToken | undefined;\r\n        let cachedAccount: AccountEntity | null = null;\r\n        if (cachedIdToken) {\r\n            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\r\n            const localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\r\n            const accountInfo: AccountInfo = {\r\n                homeAccountId: cachedIdToken.homeAccountId,\r\n                environment: cachedIdToken.environment,\r\n                tenantId: cachedIdToken.realm,\r\n                username: Constants.EMPTY_STRING,\r\n                localAccountId: localAccountId || Constants.EMPTY_STRING\r\n            };\r\n\r\n            cachedAccount = this.cacheManager.readAccountFromCache(accountInfo);\r\n        }\r\n\r\n        // increment telemetry cache hit counter\r\n        if (this.config.serverTelemetryManager) {\r\n            this.config.serverTelemetryManager.incrementCacheHits();\r\n        }\r\n\r\n        return await ResponseHandler.generateAuthenticationResult(\r\n            this.cryptoUtils,\r\n            this.authority,\r\n            {\r\n                account: cachedAccount,\r\n                accessToken: cachedAccessToken,\r\n                idToken: cachedIdToken,\r\n                refreshToken: null,\r\n                appMetadata: null\r\n            },\r\n            true,\r\n            request,\r\n            idTokenObject);\r\n    }\r\n\r\n    /**\r\n     * read idtoken from cache, this is a specific implementation for OBO as the requirements differ from a generic lookup in the cacheManager\r\n     * Certain use cases of OBO flow do not expect an idToken in the cache/or from the service\r\n     * @param request\r\n     */\r\n    private readIdTokenFromCacheForOBO(atHomeAccountId: string): IdTokenEntity | null {\r\n\r\n        const idTokenFilter: CredentialFilter = {\r\n            homeAccountId: atHomeAccountId,\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant\r\n        };\r\n\r\n        const idTokens: IdTokenEntity[] = this.cacheManager.getIdTokensByFilter(idTokenFilter);\r\n\r\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\r\n        if (idTokens.length < 1) {\r\n            return null;\r\n        }\r\n        return idTokens[0] as IdTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Fetches the cached access token based on incoming assertion\r\n     * @param clientId\r\n     * @param request\r\n     * @param userAssertionHash\r\n     */\r\n    private readAccessTokenFromCacheForOBO(clientId: string, request: CommonOnBehalfOfRequest) {\r\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\r\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        const credentialType = (authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\r\n\r\n        const accessTokenFilter: CredentialFilter = {\r\n            credentialType: credentialType,\r\n            clientId,\r\n            target: ScopeSet.createSearchScopes(this.scopeSet.asArray()),\r\n            tokenType: authScheme,\r\n            keyId: request.sshKid,\r\n            requestedClaimsHash: request.requestedClaimsHash,\r\n            userAssertionHash: this.userAssertionHash\r\n        };\r\n\r\n        const accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\r\n\r\n        const numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        } else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n\r\n        return accessTokens[0] as AccessTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Make a network call to the server requesting credentials\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonOnBehalfOfRequest, authority: Authority, userAssertionHash: string)\r\n        : Promise<AuthenticationResult | null> {\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = this.createTokenRequestBody(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        responseHandler.validateTokenResponse(response.body);\r\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request,\r\n            undefined,\r\n            userAssertionHash\r\n        );\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * generate a server request in accepable format\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonOnBehalfOfRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        parameterBuilder.addGrantType(GrantType.JWT_BEARER);\r\n\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\r\n\r\n        parameterBuilder.addOboAssertion(request.oboAssertion);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (request.claims || (this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0)) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n       \r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}