{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { Constants } from '../utils/Constants.js';\nimport { AuthError } from './AuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\r\n */\n\nvar InteractionRequiredServerErrorMessage = [\"interaction_required\", \"consent_required\", \"login_required\"];\nvar InteractionRequiredAuthSubErrorMessage = [\"message_only\", \"additional_action\", \"basic_action\", \"user_password_expired\", \"consent_required\"];\n/**\r\n * Interaction required errors defined by the SDK\r\n */\n\nvar InteractionRequiredAuthErrorMessage = {\n  noTokensFoundError: {\n    code: \"no_tokens_found\",\n    desc: \"No refresh token found in the cache. Please sign-in.\"\n  },\n  native_account_unavailable: {\n    code: \"native_account_unavailable\",\n    desc: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\"\n  }\n};\n/**\r\n * Error thrown when user interaction is required.\r\n */\n\nvar InteractionRequiredAuthError =\n/** @class */\nfunction (_super) {\n  __extends(InteractionRequiredAuthError, _super);\n\n  function InteractionRequiredAuthError(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims) {\n    var _this = _super.call(this, errorCode, errorMessage, subError) || this;\n\n    Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);\n    _this.timestamp = timestamp || Constants.EMPTY_STRING;\n    _this.traceId = traceId || Constants.EMPTY_STRING;\n    _this.correlationId = correlationId || Constants.EMPTY_STRING;\n    _this.claims = claims || Constants.EMPTY_STRING;\n    _this.name = \"InteractionRequiredAuthError\";\n    return _this;\n  }\n  /**\r\n   * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n   * @param errorCode\r\n   * @param errorString\r\n   * @param subError\r\n   */\n\n\n  InteractionRequiredAuthError.isInteractionRequiredError = function (errorCode, errorString, subError) {\n    var isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n    var isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n    var isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some(function (irErrorCode) {\n      return errorString.indexOf(irErrorCode) > -1;\n    });\n    return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\n  };\n  /**\r\n   * Creates an error thrown when the authorization code required for a token request is null or empty.\r\n   */\n\n\n  InteractionRequiredAuthError.createNoTokensFoundError = function () {\n    return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.noTokensFoundError.code, InteractionRequiredAuthErrorMessage.noTokensFoundError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the native broker returns ACCOUNT_UNAVAILABLE status, indicating that the account was removed and interactive sign-in is required\r\n   * @returns\r\n   */\n\n\n  InteractionRequiredAuthError.createNativeAccountUnavailableError = function () {\n    return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.native_account_unavailable.code, InteractionRequiredAuthErrorMessage.native_account_unavailable.desc);\n  };\n\n  return InteractionRequiredAuthError;\n}(AuthError);\n\nexport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage, InteractionRequiredAuthSubErrorMessage, InteractionRequiredServerErrorMessage };","map":{"version":3,"sources":["../../src/error/InteractionRequiredAuthError.ts"],"names":[],"mappings":";;;;;;AAAA;;;AAGG;;AAKH;;AAEG;;AACU,IAAA,qCAAqC,GAAG,CACjD,sBADiD,EAEjD,kBAFiD,EAGjD,gBAHiD,CAAxC;AAMA,IAAA,sCAAsC,GAAG,CAClD,cADkD,EAElD,mBAFkD,EAGlD,cAHkD,EAIlD,uBAJkD,EAKlD,kBALkD,CAAzC;AAQb;;AAEG;;AACU,IAAA,mCAAmC,GAAG;AAC/C,EAAA,kBAAkB,EAAE;AAChB,IAAA,IAAI,EAAE,iBADU;AAEhB,IAAA,IAAI,EAAE;AAFU,GAD2B;AAK/C,EAAA,0BAA0B,EAAE;AACxB,IAAA,IAAI,EAAE,4BADkB;AAExB,IAAA,IAAI,EAAE;AAFkB;AALmB,CAAtC;AAWb;;AAEG;;AACH,IAAA,4BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkD,EAAA,SAAS,CAAA,4BAAA,EAAA,MAAA,CAAT;;AAsB9C,WAAA,4BAAA,CAAY,SAAZ,EAAgC,YAAhC,EAAuD,QAAvD,EAA0E,SAA1E,EAA8F,OAA9F,EAAgH,aAAhH,EAAwI,MAAxI,EAAuJ;AAAvJ,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,EAAiB,YAAjB,EAA+B,QAA/B,KAQH,IATD;;AAEI,IAAA,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA4B,4BAA4B,CAAC,SAAzD;AAEA,IAAA,KAAI,CAAC,SAAL,GAAiB,SAAS,IAAI,SAAS,CAAC,YAAxC;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,OAAO,IAAI,SAAS,CAAC,YAApC;AACA,IAAA,KAAI,CAAC,aAAL,GAAqB,aAAa,IAAI,SAAS,CAAC,YAAhD;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,MAAM,IAAI,SAAS,CAAC,YAAlC;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,8BAAZ;;AACH;AAED;;;;;AAKG;;;AACI,EAAA,4BAAA,CAAA,0BAAA,GAAP,UAAkC,SAAlC,EAAsD,WAAtD,EAA4E,QAA5E,EAA6F;AACzF,QAAM,8BAA8B,GAAG,CAAC,CAAC,SAAF,IAAe,qCAAqC,CAAC,OAAtC,CAA8C,SAA9C,IAA2D,CAAC,CAAlH;AACA,QAAM,6BAA6B,GAAG,CAAC,CAAC,QAAF,IAAc,sCAAsC,CAAC,OAAvC,CAA+C,QAA/C,IAA2D,CAAC,CAAhH;AACA,QAAM,8BAA8B,GAAG,CAAC,CAAC,WAAF,IAAiB,qCAAqC,CAAC,IAAtC,CAA2C,UAAC,WAAD,EAAY;AAC3G,aAAO,WAAW,CAAC,OAAZ,CAAoB,WAApB,IAAmC,CAAC,CAA3C;AACH,KAFuD,CAAxD;AAIA,WAAO,8BAA8B,IAAI,8BAAlC,IAAoE,6BAA3E;AACH,GARM;AAUP;;AAEG;;;AACI,EAAA,4BAAA,CAAA,wBAAA,GAAP,YAAA;AACI,WAAO,IAAI,4BAAJ,CAAiC,mCAAmC,CAAC,kBAApC,CAAuD,IAAxF,EAA8F,mCAAmC,CAAC,kBAApC,CAAuD,IAArJ,CAAP;AACH,GAFM;AAIP;;;AAGG;;;AACI,EAAA,4BAAA,CAAA,mCAAA,GAAP,YAAA;AACI,WAAO,IAAI,4BAAJ,CAAiC,mCAAmC,CAAC,0BAApC,CAA+D,IAAhG,EAAsG,mCAAmC,CAAC,0BAApC,CAA+D,IAArK,CAAP;AACH,GAFM;;AAGX,SAAC,4BAAD;AA/DA,CAAA,CAAkD,SAAlD,CAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants } from \"../utils/Constants\";\r\nimport { AuthError } from \"./AuthError\";\r\n\r\n/**\r\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\r\n */\r\nexport const InteractionRequiredServerErrorMessage = [\r\n    \"interaction_required\",\r\n    \"consent_required\",\r\n    \"login_required\"\r\n];\r\n\r\nexport const InteractionRequiredAuthSubErrorMessage = [\r\n    \"message_only\",\r\n    \"additional_action\",\r\n    \"basic_action\",\r\n    \"user_password_expired\",\r\n    \"consent_required\"\r\n];\r\n\r\n/**\r\n * Interaction required errors defined by the SDK\r\n */\r\nexport const InteractionRequiredAuthErrorMessage = {\r\n    noTokensFoundError: {\r\n        code: \"no_tokens_found\",\r\n        desc: \"No refresh token found in the cache. Please sign-in.\"\r\n    },\r\n    native_account_unavailable: {\r\n        code: \"native_account_unavailable\",\r\n        desc: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\"\r\n    }\r\n};\r\n\r\n/**\r\n * Error thrown when user interaction is required.\r\n */\r\nexport class InteractionRequiredAuthError extends AuthError {\r\n    /**\r\n     * The time the error occured at\r\n     */\r\n    timestamp: string;\r\n\r\n    /**\r\n     * TraceId associated with the error\r\n     */\r\n    traceId: string;\r\n\r\n    /**\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/claims-challenge.md\r\n     * \r\n     * A string with extra claims needed for the token request to succeed\r\n     * web site: redirect the user to the authorization page and set the extra claims\r\n     * web api: include the claims in the WWW-Authenticate header that are sent back to the client so that it knows to request a token with the extra claims\r\n     * desktop application or browser context: include the claims when acquiring the token interactively\r\n     * app to app context (client_credentials): include the claims in the AcquireTokenByClientCredential request\r\n     */\r\n    claims: string;\r\n\r\n    constructor(errorCode?: string, errorMessage?: string, subError?: string, timestamp?: string, traceId?: string, correlationId?: string, claims?: string) {\r\n        super(errorCode, errorMessage, subError);\r\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\r\n        \r\n        this.timestamp = timestamp || Constants.EMPTY_STRING;\r\n        this.traceId = traceId || Constants.EMPTY_STRING;\r\n        this.correlationId = correlationId || Constants.EMPTY_STRING;\r\n        this.claims = claims || Constants.EMPTY_STRING;\r\n        this.name = \"InteractionRequiredAuthError\";\r\n    }\r\n\r\n    /**\r\n     * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n     * @param errorCode \r\n     * @param errorString \r\n     * @param subError \r\n     */\r\n    static isInteractionRequiredError(errorCode?: string, errorString?: string, subError?: string): boolean {\r\n        const isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\r\n        const isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\r\n        const isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some((irErrorCode) => {\r\n            return errorString.indexOf(irErrorCode) > -1;\r\n        });\r\n\r\n        return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the authorization code required for a token request is null or empty.\r\n     */\r\n    static createNoTokensFoundError(): InteractionRequiredAuthError {\r\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.noTokensFoundError.code, InteractionRequiredAuthErrorMessage.noTokensFoundError.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the native broker returns ACCOUNT_UNAVAILABLE status, indicating that the account was removed and interactive sign-in is required\r\n     * @returns \r\n     */\r\n    static createNativeAccountUnavailableError(): InteractionRequiredAuthError {\r\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.native_account_unavailable.code, InteractionRequiredAuthErrorMessage.native_account_unavailable.desc);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}