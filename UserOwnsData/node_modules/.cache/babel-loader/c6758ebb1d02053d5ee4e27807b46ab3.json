{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar KeyLocation;\n\n(function (KeyLocation) {\n  KeyLocation[\"SW\"] = \"sw\";\n  KeyLocation[\"UHW\"] = \"uhw\";\n})(KeyLocation || (KeyLocation = {}));\n\nvar PopTokenGenerator =\n/** @class */\nfunction () {\n  function PopTokenGenerator(cryptoUtils, performanceClient) {\n    this.cryptoUtils = cryptoUtils;\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n   * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n   * @param request\r\n   * @returns\r\n   */\n\n\n  PopTokenGenerator.prototype.generateCnf = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var reqCnf, reqCnfString, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n            return [4\n            /*yield*/\n            , this.generateKid(request)];\n\n          case 1:\n            reqCnf = _d.sent();\n            reqCnfString = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n            _c = {\n              kid: reqCnf.kid,\n              reqCnfString: reqCnfString\n            };\n            return [4\n            /*yield*/\n            , this.cryptoUtils.hashString(reqCnfString)];\n\n          case 2:\n            return [2\n            /*return*/\n            , (_c.reqCnfHash = _d.sent(), _c)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates key_id for a SHR token request\r\n   * @param request\r\n   * @returns\r\n   */\n\n\n  PopTokenGenerator.prototype.generateKid = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var kidThumbprint;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n            return [4\n            /*yield*/\n            , this.cryptoUtils.getPublicKeyThumbprint(request)];\n\n          case 1:\n            kidThumbprint = _b.sent();\n            return [2\n            /*return*/\n            , {\n              kid: kidThumbprint,\n              xms_ksl: KeyLocation.SW\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the POP access_token with the local generated key-pair\r\n   * @param accessToken\r\n   * @param request\r\n   * @returns\r\n   */\n\n\n  PopTokenGenerator.prototype.signPopToken = function (accessToken, keyId, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.signPayload(accessToken, keyId, request)];\n      });\n    });\n  };\n  /**\r\n   * Utility function to generate the signed JWT for an access_token\r\n   * @param payload\r\n   * @param kid\r\n   * @param request\r\n   * @param claims\r\n   * @returns\r\n   */\n\n\n  PopTokenGenerator.prototype.signPayload = function (payload, keyId, request, claims) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, resourceUrlString, resourceUrlComponents;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims, shrNonce = request.shrNonce;\n            resourceUrlString = resourceRequestUri ? new UrlString(resourceRequestUri) : undefined;\n            resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();\n            return [4\n            /*yield*/\n            , this.cryptoUtils.signJwt(__assign({\n              at: payload,\n              ts: TimeUtils.nowSeconds(),\n              m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(),\n              u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort,\n              nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n              p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath,\n              q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n              client_claims: shrClaims || undefined\n            }, claims), keyId, request.correlationId)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return PopTokenGenerator;\n}();\n\nexport { PopTokenGenerator };","map":{"version":3,"sources":["../../src/crypto/PopTokenGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto, SignedHttpRequestParameters } from \"./ICrypto\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\r\n\r\n/**\r\n * See eSTS docs for more info.\r\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\r\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\r\n *      - sw: software storage\r\n *      - uhw: hardware storage\r\n */\r\ntype ReqCnf = {\r\n    kid: string;\r\n    xms_ksl: KeyLocation;\r\n};\r\n\r\nexport type ReqCnfData = {\r\n    kid: string;\r\n    reqCnfString: string;\r\n    reqCnfHash: string;\r\n};\r\n\r\nenum KeyLocation {\r\n    SW = \"sw\",\r\n    UHW = \"uhw\"\r\n}\r\n\r\nexport class PopTokenGenerator {\r\n\r\n    private cryptoUtils: ICrypto;\r\n    private performanceClient?: IPerformanceClient;\r\n\r\n    constructor(cryptoUtils: ICrypto, performanceClient?: IPerformanceClient) {\r\n        this.cryptoUtils = cryptoUtils;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    /**\r\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async generateCnf(request: SignedHttpRequestParameters): Promise<ReqCnfData> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\r\n\r\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\r\n        const reqCnf = await this.generateKid(request);\r\n        const reqCnfString: string = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\r\n\r\n        return {\r\n            kid: reqCnf.kid,\r\n            reqCnfString, \r\n            reqCnfHash: await this.cryptoUtils.hashString(reqCnfString) \r\n        };\r\n    }\r\n\r\n    /**\r\n     * Generates key_id for a SHR token request\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async generateKid(request: SignedHttpRequestParameters): Promise<ReqCnf> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\r\n\r\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\r\n\r\n        return {\r\n            kid: kidThumbprint,\r\n            xms_ksl: KeyLocation.SW\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Signs the POP access_token with the local generated key-pair\r\n     * @param accessToken\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async signPopToken(accessToken: string, keyId: string, request: SignedHttpRequestParameters): Promise<string> {\r\n        return this.signPayload(accessToken, keyId, request);\r\n    }\r\n\r\n    /**\r\n     * Utility function to generate the signed JWT for an access_token\r\n     * @param payload\r\n     * @param kid\r\n     * @param request\r\n     * @param claims\r\n     * @returns\r\n     */\r\n    async signPayload(payload: string, keyId: string, request: SignedHttpRequestParameters, claims?: object): Promise<string> {\r\n\r\n        // Deconstruct request to extract SHR parameters\r\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce } = request;\r\n\r\n        const resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\r\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\r\n        return await this.cryptoUtils.signJwt({\r\n            at: payload,\r\n            ts: TimeUtils.nowSeconds(),\r\n            m: resourceRequestMethod?.toUpperCase(),\r\n            u: resourceUrlComponents?.HostNameAndPort,\r\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\r\n            p: resourceUrlComponents?.AbsolutePath,\r\n            q: (resourceUrlComponents?.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\r\n            client_claims: shrClaims || undefined,\r\n            ...claims\r\n        }, keyId, request.correlationId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}