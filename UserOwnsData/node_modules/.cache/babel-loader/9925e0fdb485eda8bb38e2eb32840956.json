{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __assign, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, AccountEntity, Constants, ServerError, InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '@azure/msal-common';\nimport { DEFAULT_REQUEST, InteractionType, CacheLookupPolicy, ApiId, BrowserConstants } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeAuthError } from '../error/NativeAuthError.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\n\nvar PublicClientApplication =\n/** @class */\nfunction (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n\n\n  function PublicClientApplication(configuration) {\n    var _this = _super.call(this, configuration) || this;\n\n    _this.astsAsyncMeasurement = undefined;\n    _this.activeSilentTokenRequests = new Map(); // Register listener functions\n\n    _this.trackPageVisibility = _this.trackPageVisibility.bind(_this);\n    return _this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n\n\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId;\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return [2\n        /*return*/\n        , this.acquireTokenRedirect(__assign({\n          correlationId: correlationId\n        }, request || DEFAULT_REQUEST))];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    var correlationId = this.getRequestCorrelationId(request);\n    this.logger.verbose(\"loginPopup called\", correlationId);\n    return this.acquireTokenPopup(__assign({\n      correlationId: correlationId\n    }, request || DEFAULT_REQUEST));\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\n        atsMeasurement.addStaticFields({\n          cacheLookupPolicy: request.cacheLookupPolicy\n        });\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n        account = request.account || this.getActiveAccount();\n\n        if (!account) {\n          throw BrowserAuthError.createNoAccountError();\n        }\n\n        thumbprint = {\n          clientId: this.config.auth.clientId,\n          authority: request.authority || Constants.EMPTY_STRING,\n          scopes: request.scopes,\n          homeAccountIdentifier: account.homeAccountId,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        silentRequestKey = JSON.stringify(thumbprint);\n        cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n\n        if (typeof cachedResponse === \"undefined\") {\n          this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n          this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenSilentAsync, correlationId);\n          response = this.acquireTokenSilentAsync(__assign(__assign({}, request), {\n            correlationId: correlationId\n          }), account).then(function (result) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            atsMeasurement.addStaticFields({\n              accessTokenSize: result.accessToken.length,\n              idTokenSize: result.idToken.length\n            });\n            atsMeasurement.endMeasurement({\n              success: true,\n              fromCache: result.fromCache,\n              isNativeBroker: result.fromNativeBroker,\n              cacheLookupPolicy: request.cacheLookupPolicy,\n              requestId: result.requestId\n            });\n            return result;\n          }).catch(function (error) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            atsMeasurement.endMeasurement({\n              errorCode: error.errorCode,\n              subErrorCode: error.subError,\n              success: false\n            });\n            throw error;\n          });\n          this.activeSilentTokenRequests.set(silentRequestKey, response);\n          return [2\n          /*return*/\n          , response];\n        } else {\n          this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId); // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n\n          atsMeasurement.discardMeasurement();\n          return [2\n          /*return*/\n          , cachedResponse];\n        }\n      });\n    });\n  };\n\n  PublicClientApplication.prototype.trackPageVisibility = function () {\n    if (!this.astsAsyncMeasurement) {\n      return;\n    }\n\n    this.logger.info(\"Perf: Visibility change detected\");\n    this.astsAsyncMeasurement.increment({\n      visibilityChangeCount: 1\n    });\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   * @param {@link (SilentRequest:type)}\r\n   * @param {@link (AccountInfo:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var result, silentRequest, silentCacheClient, silentRequest_1, requestWithCLP_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n            this.astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            (_a = this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.increment({\n              visibilityChangeCount: 0\n            });\n            document.addEventListener(\"visibilitychange\", this.trackPageVisibility);\n            if (!(NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId)) return [3\n            /*break*/\n            , 1];\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\n            silentRequest = __assign(__assign({}, request), {\n              account: account\n            });\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var silentIframeClient;\n                return __generator(this, function (_a) {\n                  // If native token acquisition fails for availability reasons fallback to web flow\n                  if (e instanceof NativeAuthError && e.isFatal()) {\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\n\n                    silentIframeClient = this.createSilentIframeClient(request.correlationId);\n                    return [2\n                    /*return*/\n                    , silentIframeClient.acquireToken(request)];\n                  }\n\n                  throw e;\n                });\n              });\n            });\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\n            silentCacheClient = this.createSilentCacheClient(request.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeSilentRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , silentCacheClient.initializeSilentRequest(request, account)];\n\n          case 2:\n            silentRequest_1 = _b.sent();\n            requestWithCLP_1 = __assign(__assign({}, request), {\n              // set the request's CacheLookupPolicy to Default if it was not optionally passed in\n              cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default\n            });\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenFromCache, silentRequest_1.correlationId);\n            result = this.acquireTokenFromCache(silentCacheClient, silentRequest_1, requestWithCLP_1).catch(function (cacheError) {\n              if (requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\n                throw cacheError;\n              } // block the reload if it occurred inside a hidden iframe\n\n\n              BrowserUtils.blockReloadInHiddenIframes();\n\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest_1);\n\n              _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenByRefreshToken, silentRequest_1.correlationId);\n\n              return _this.acquireTokenByRefreshToken(silentRequest_1, requestWithCLP_1).catch(function (refreshTokenError) {\n                var isServerError = refreshTokenError instanceof ServerError;\n                var isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\n                var rtNotFound = refreshTokenError.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n                var isInvalidGrantError = refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR;\n\n                if ((!isServerError || !isInvalidGrantError || isInteractionRequiredError || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.RefreshToken) && requestWithCLP_1.cacheLookupPolicy !== CacheLookupPolicy.Skip && !rtNotFound) {\n                  throw refreshTokenError;\n                }\n\n                _this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\n\n                _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenBySilentIframe, silentRequest_1.correlationId);\n\n                return _this.acquireTokenBySilentIframe(silentRequest_1);\n              });\n            });\n            _b.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , result.then(function (response) {\n              var _a;\n\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\n\n              (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\n                success: true,\n                fromCache: response.fromCache,\n                isNativeBroker: response.fromNativeBroker,\n                requestId: response.requestId\n              });\n              return response;\n            }).catch(function (tokenRenewalError) {\n              var _a;\n\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n\n              (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\n                errorCode: tokenRenewalError.errorCode,\n                subErrorCode: tokenRenewalError.subError,\n                success: false\n              });\n              throw tokenRenewalError;\n            }).finally(function () {\n              document.removeEventListener(\"visibilitychange\", _this.trackPageVisibility);\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Hydrates cache with the tokens and account in the AuthenticationResult object\r\n   * @param result\r\n   * @param request - The request object that was used to obtain the AuthenticationResult\r\n   * @returns\r\n   */\n\n\n  PublicClientApplication.prototype.hydrateCache = function (result, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accountEntity;\n      return __generator(this, function (_a) {\n        this.logger.verbose(\"hydrateCache called\");\n\n        if (result.account) {\n          accountEntity = AccountEntity.createFromAccountInfo(result.account, result.cloudGraphHostName, result.msGraphHost);\n          this.browserStorage.setAccount(accountEntity);\n\n          if (result.fromNativeBroker) {\n            this.logger.verbose(\"Response was from native broker, storing in-memory\"); // Tokens from native broker are stored in-memory\n\n            return [2\n            /*return*/\n            , this.nativeInternalStorage.hydrateCache(result, request)];\n          } else {\n            return [2\n            /*return*/\n            , this.browserStorage.hydrateCache(result, request)];\n          }\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return PublicClientApplication;\n}(ClientApplication);\n\nexport { PublicClientApplication };","map":{"version":3,"sources":["../../src/app/PublicClientApplication.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccountInfo, AuthenticationResult, Constants, RequestThumbprint, AuthError, PerformanceEvents, ServerError, InteractionRequiredAuthError, InProgressPerformanceEvent, InteractionRequiredAuthErrorMessage, AccountEntity } from \"@azure/msal-common\";\r\nimport { Configuration } from \"../config/Configuration\";\r\nimport { DEFAULT_REQUEST, InteractionType, ApiId, CacheLookupPolicy, BrowserConstants } from \"../utils/BrowserConstants\";\r\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { ClientApplication } from \"./ClientApplication\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { EventType } from \"../event/EventType\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { NativeAuthError } from \"../error/NativeAuthError\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\r\n\r\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\r\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\r\n\r\n    // Active requests\r\n    private activeSilentTokenRequests: Map<string, Promise<AuthenticationResult>>;\r\n    private astsAsyncMeasurement?: InProgressPerformanceEvent = undefined;\r\n\r\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration object for the MSAL PublicClientApplication instance\r\n     */\r\n    constructor(configuration: Configuration) {\r\n        super(configuration);\r\n\r\n        this.activeSilentTokenRequests = new Map();\r\n        // Register listener functions\r\n        this.trackPageVisibility = this.trackPageVisibility.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */\r\n    async loginRedirect(request?: RedirectRequest): Promise<void> {\r\n        const correlationId: string = this.getRequestCorrelationId(request);\r\n        this.logger.verbose(\"loginRedirect called\", correlationId);\r\n        return this.acquireTokenRedirect({\r\n            correlationId,\r\n            ...(request || DEFAULT_REQUEST)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult> {\r\n        const correlationId: string = this.getRequestCorrelationId(request);\r\n        this.logger.verbose(\"loginPopup called\", correlationId);\r\n        return this.acquireTokenPopup({\r\n            correlationId,\r\n            ...(request || DEFAULT_REQUEST)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    async acquireTokenSilent(request: SilentRequest): Promise<AuthenticationResult> {\r\n        const correlationId = this.getRequestCorrelationId(request);\r\n        const atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\r\n        atsMeasurement.addStaticFields({\r\n            cacheLookupPolicy: request.cacheLookupPolicy\r\n        });\r\n\r\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\r\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\r\n\r\n        const account = request.account || this.getActiveAccount();\r\n        if (!account) {\r\n            throw BrowserAuthError.createNoAccountError();\r\n        }\r\n\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.auth.clientId,\r\n            authority: request.authority || Constants.EMPTY_STRING,\r\n            scopes: request.scopes,\r\n            homeAccountIdentifier: account.homeAccountId,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n        const silentRequestKey = JSON.stringify(thumbprint);\r\n\r\n        const cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\r\n        if (typeof cachedResponse === \"undefined\") {\r\n            this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\r\n\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenSilentAsync, correlationId);\r\n            const response = this.acquireTokenSilentAsync({\r\n                ...request,\r\n                correlationId\r\n            }, account)\r\n                .then((result) => {\r\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                    atsMeasurement.addStaticFields({\r\n                        accessTokenSize: result.accessToken.length,\r\n                        idTokenSize: result.idToken.length\r\n                    });\r\n                    atsMeasurement.endMeasurement({\r\n                        success: true,\r\n                        fromCache: result.fromCache,\r\n                        isNativeBroker: result.fromNativeBroker,\r\n                        cacheLookupPolicy: request.cacheLookupPolicy,\r\n                        requestId: result.requestId,\r\n                    });\r\n                    return result;\r\n                })\r\n                .catch((error: AuthError) => {\r\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                    atsMeasurement.endMeasurement({\r\n                        errorCode: error.errorCode,\r\n                        subErrorCode: error.subError,\r\n                        success: false\r\n                    });\r\n                    throw error;\r\n                });\r\n            this.activeSilentTokenRequests.set(silentRequestKey, response);\r\n            return response;\r\n        } else {\r\n            this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\r\n            // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\r\n            atsMeasurement.discardMeasurement();\r\n            return cachedResponse;\r\n        }\r\n    }\r\n\r\n    private trackPageVisibility():void {\r\n        if (!this.astsAsyncMeasurement) {\r\n            return;\r\n        }\r\n        this.logger.info(\"Perf: Visibility change detected\");\r\n        this.astsAsyncMeasurement.increment({\r\n            visibilityChangeCount: 1,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n     * @param {@link (SilentRequest:type)}\r\n     * @param {@link (AccountInfo:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n     */\r\n    protected async acquireTokenSilentAsync(request: SilentRequest, account: AccountInfo): Promise<AuthenticationResult>{\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\r\n\r\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\r\n        this.astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\r\n        this.astsAsyncMeasurement?.increment({\r\n            visibilityChangeCount: 0\r\n        });\r\n        document.addEventListener(\"visibilitychange\",this.trackPageVisibility);\r\n        let result: Promise<AuthenticationResult>;\r\n        if (NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId) {\r\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\r\n            const silentRequest: SilentRequest = {\r\n                ...request,\r\n                account\r\n            };\r\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(async (e: AuthError) => {\r\n                // If native token acquisition fails for availability reasons fallback to web flow\r\n                if (e instanceof NativeAuthError && e.isFatal()) {\r\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\r\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\r\n\r\n                    // Cache will not contain tokens, given that previous WAM requests succeeded. Skip cache and RT renewal and go straight to iframe renewal\r\n                    const silentIframeClient = this.createSilentIframeClient(request.correlationId);\r\n                    return silentIframeClient.acquireToken(request);\r\n                }\r\n                throw e;\r\n            });\r\n        } else {\r\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\r\n\r\n            const silentCacheClient = this.createSilentCacheClient(request.correlationId);\r\n\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeSilentRequest, request.correlationId);\r\n            const silentRequest = await silentCacheClient.initializeSilentRequest(request, account);\r\n\r\n            const requestWithCLP = {\r\n                ...request,\r\n                // set the request's CacheLookupPolicy to Default if it was not optionally passed in\r\n                cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default\r\n            };\r\n\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenFromCache, silentRequest.correlationId);\r\n            result = this.acquireTokenFromCache(silentCacheClient, silentRequest, requestWithCLP).catch((cacheError: AuthError) => {\r\n                if (requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\r\n                    throw cacheError;\r\n                }\r\n\r\n                // block the reload if it occurred inside a hidden iframe\r\n                BrowserUtils.blockReloadInHiddenIframes();\r\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest);\r\n\r\n                this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenByRefreshToken, silentRequest.correlationId);\r\n                return this.acquireTokenByRefreshToken(silentRequest, requestWithCLP).catch((refreshTokenError: AuthError) => {\r\n                    const isServerError = refreshTokenError instanceof ServerError;\r\n                    const isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\r\n                    const rtNotFound = (refreshTokenError.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code);\r\n                    const isInvalidGrantError = (refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR);\r\n\r\n                    if ((!isServerError ||\r\n                            !isInvalidGrantError ||\r\n                            isInteractionRequiredError ||\r\n                            requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken ||\r\n                            requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.RefreshToken)\r\n                        && (requestWithCLP.cacheLookupPolicy !== CacheLookupPolicy.Skip)\r\n                        && !rtNotFound\r\n                    ) {\r\n                        throw refreshTokenError;\r\n                    }\r\n\r\n                    this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\r\n                    this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenBySilentIframe, silentRequest.correlationId);\r\n                    return this.acquireTokenBySilentIframe(silentRequest);\r\n                });\r\n            });\r\n        }\r\n\r\n        return result.then((response) => {\r\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\r\n            this.astsAsyncMeasurement?.endMeasurement({\r\n                success: true,\r\n                fromCache: response.fromCache,\r\n                isNativeBroker: response.fromNativeBroker,\r\n                requestId: response.requestId\r\n            });\r\n            return response;\r\n        }).catch((tokenRenewalError: AuthError) => {\r\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\r\n            this.astsAsyncMeasurement?.endMeasurement({\r\n                errorCode: tokenRenewalError.errorCode,\r\n                subErrorCode: tokenRenewalError.subError,\r\n                success: false\r\n            });\r\n            throw tokenRenewalError;\r\n        }).finally(() => {\r\n            document.removeEventListener(\"visibilitychange\",this.trackPageVisibility);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Hydrates cache with the tokens and account in the AuthenticationResult object\r\n     * @param result\r\n     * @param request - The request object that was used to obtain the AuthenticationResult\r\n     * @returns\r\n     */\r\n    async hydrateCache(\r\n        result: AuthenticationResult,\r\n        request: SilentRequest\r\n        | SsoSilentRequest\r\n        | RedirectRequest\r\n        | PopupRequest\r\n    ): Promise<void> {\r\n        this.logger.verbose(\"hydrateCache called\");\r\n\r\n        if(result.account) {\r\n            // Account gets saved to browser storage regardless of native or not\r\n            const accountEntity = AccountEntity.createFromAccountInfo(\r\n                result.account,\r\n                result.cloudGraphHostName,\r\n                result.msGraphHost\r\n            );\r\n            this.browserStorage.setAccount(accountEntity);\r\n\r\n            if (result.fromNativeBroker) {\r\n                this.logger.verbose(\r\n                    \"Response was from native broker, storing in-memory\"\r\n                );\r\n                // Tokens from native broker are stored in-memory\r\n                return this.nativeInternalStorage.hydrateCache(result, request);\r\n            } else {\r\n                return this.browserStorage.hydrateCache(result, request);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}