{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { CryptoOps } from './CryptoOps.js';\nimport { Logger, PopTokenGenerator } from '@azure/msal-common';\nimport { name, version } from '../packageMetadata.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SignedHttpRequest =\n/** @class */\nfunction () {\n  function SignedHttpRequest(shrParameters, shrOptions) {\n    var loggerOptions = shrOptions && shrOptions.loggerOptions || {};\n    this.logger = new Logger(loggerOptions, name, version);\n    this.cryptoOps = new CryptoOps(this.logger);\n    this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n    this.shrParameters = shrParameters;\n  }\n  /**\r\n   * Generates and caches a keypair for the given request options.\r\n   * @returns Public key digest, which should be sent to the token issuer.\r\n   */\n\n\n  SignedHttpRequest.prototype.generatePublicKeyThumbprint = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var kid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.popTokenGenerator.generateKid(this.shrParameters)];\n\n          case 1:\n            kid = _a.sent().kid;\n            return [2\n            /*return*/\n            , kid];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a signed http request for the given payload with the given key.\r\n   * @param payload Payload to sign (e.g. access token)\r\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n   * @param claims Additional claims to include/override in the signed JWT\r\n   * @returns Pop token signed with the corresponding private key\r\n   */\n\n\n  SignedHttpRequest.prototype.signRequest = function (payload, publicKeyThumbprint, claims) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.popTokenGenerator.signPayload(payload, publicKeyThumbprint, this.shrParameters, claims)];\n      });\n    });\n  };\n  /**\r\n   * Removes cached keys from browser for given public key thumbprint\r\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n   * @returns If keys are properly deleted\r\n   */\n\n\n  SignedHttpRequest.prototype.removeKeys = function (publicKeyThumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return SignedHttpRequest;\n}();\n\nexport { SignedHttpRequest };","map":{"version":3,"sources":["../../src/crypto/SignedHttpRequest.ts"],"names":[],"mappings":";;;;;;;AAAA;;;AAGG;;AAUH,IAAA,iBAAA;AAAA;AAAA,YAAA;AAMI,WAAY,iBAAZ,CAAY,aAAZ,EAAwD,UAAxD,EAA6F;AACzF,QAAM,aAAa,GAAI,UAAU,IAAI,UAAU,CAAC,aAA1B,IAA4C,EAAlE;AACA,SAAK,MAAL,GAAc,IAAI,MAAJ,CAAW,aAAX,EAA0B,IAA1B,EAAgC,OAAhC,CAAd;AACA,SAAK,SAAL,GAAiB,IAAI,SAAJ,CAAc,KAAK,MAAnB,CAAjB;AACA,SAAK,iBAAL,GAAyB,IAAI,iBAAJ,CAAsB,KAAK,SAA3B,CAAzB;AACA,SAAK,aAAL,GAAqB,aAArB;AACH;AAED;;;AAGG;;;AACG,EAAA,iBAAA,CAAA,SAAA,CAAA,2BAAA,GAAN,YAAA;;;;;;AACoB,mBAAM,CAAA;AAAA;AAAA,cAAA,KAAK,iBAAL,CAAuB,WAAvB,CAAmC,KAAK,aAAxC,CAAA,CAAN;;;AAAR,YAAA,GAAG,GAAK,EAA4D,CAAA,IAA5D,EAAA,CAAL,GAAH;AAER,mBAAA,CAAA;AAAA;AAAA,cAAO,GAAP,CAAA;;;;AACH,GAJK;AAMN;;;;;;AAMG;;;AACG,EAAA,iBAAA,CAAA,SAAA,CAAA,WAAA,GAAN,UAAkB,OAAlB,EAAmC,mBAAnC,EAAgE,MAAhE,EAA+E;;;AAC3E,eAAA,CAAA;AAAA;AAAA,UAAO,KAAK,iBAAL,CAAuB,WAAvB,CACH,OADG,EAEH,mBAFG,EAGH,KAAK,aAHF,EAIH,MAJG,CAAP,CAAA;;;AAMH,GAPK;AASN;;;;AAIG;;;AACG,EAAA,iBAAU,CAAA,SAAV,CAAU,UAAV,GAAN,UAAiB,mBAAjB,EAA4C;;;;;AACjC,mBAAM,CAAA;AAAA;AAAA,cAAA,KAAK,SAAL,CAAe,qBAAf,CAAqC,mBAArC,CAAA,CAAN;;AAAP,eAAA,CAAA;AAAA,mBAAA,CAAA;AAAA;AAAA,cAAO,EAAA,CAAA,IAAA,EAAP,CAAA;;;;AACH,GAFK;;AAGV,SAAC,iBAAD;AAAC,CAhDD,EAAA","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CryptoOps } from \"./CryptoOps\";\r\nimport { Logger, LoggerOptions, PopTokenGenerator, SignedHttpRequestParameters } from \"@azure/msal-common\";\r\nimport { version, name } from \"../packageMetadata\";\r\n\r\nexport type SignedHttpRequestOptions = {\r\n    loggerOptions: LoggerOptions\r\n};\r\n\r\nexport class SignedHttpRequest {\r\n    private popTokenGenerator: PopTokenGenerator;\r\n    private cryptoOps: CryptoOps;\r\n    private shrParameters: SignedHttpRequestParameters;\r\n    private logger: Logger;\r\n\r\n    constructor(shrParameters: SignedHttpRequestParameters, shrOptions?: SignedHttpRequestOptions) {\r\n        const loggerOptions = (shrOptions && shrOptions.loggerOptions) || {};\r\n        this.logger = new Logger(loggerOptions, name, version);\r\n        this.cryptoOps = new CryptoOps(this.logger);\r\n        this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\r\n        this.shrParameters = shrParameters;\r\n    }\r\n\r\n    /**\r\n     * Generates and caches a keypair for the given request options.\r\n     * @returns Public key digest, which should be sent to the token issuer.\r\n     */\r\n    async generatePublicKeyThumbprint(): Promise<string> {\r\n        const { kid } = await this.popTokenGenerator.generateKid(this.shrParameters);\r\n\r\n        return kid;\r\n    }\r\n\r\n    /**\r\n     * Generates a signed http request for the given payload with the given key.\r\n     * @param payload Payload to sign (e.g. access token)\r\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n     * @param claims Additional claims to include/override in the signed JWT \r\n     * @returns Pop token signed with the corresponding private key\r\n     */\r\n    async signRequest(payload: string, publicKeyThumbprint: string, claims?: object): Promise<string> {\r\n        return this.popTokenGenerator.signPayload(\r\n            payload, \r\n            publicKeyThumbprint,\r\n            this.shrParameters, \r\n            claims\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Removes cached keys from browser for given public key thumbprint\r\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n     * @returns If keys are properly deleted\r\n     */\r\n    async removeKeys(publicKeyThumbprint: string): Promise<boolean> {\r\n        return await this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}